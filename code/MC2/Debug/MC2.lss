
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00002c34  00002cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008000ae  008000ae  00002d16  2**0
                  ALLOC
  3 .stab         00002d24  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f6  00000000  00000000  00005a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007072  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b67f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 15 11 	jmp	0x222a	; 0x222a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 10 	call	0x2132	; 0x2132 <main>
      8a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e9       	ldi	r26, 0x9F	; 159
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e9       	ldi	r24, 0x9F	; 159
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <lcd_sendCommand>:
#include"Lcd_driver.h"
#include"common_macros.h"
#include"gpio.h"
#include <util/delay.h>

void lcd_sendCommand(uint8 command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e9 97       	sbiw	r28, 0x39	; 57
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e8       	ldi	r26, 0x80	; 128
     b6c:	bf e3       	ldi	r27, 0x3F	; 63
     b6e:	8d ab       	std	Y+53, r24	; 0x35
     b70:	9e ab       	std	Y+54, r25	; 0x36
     b72:	af ab       	std	Y+55, r26	; 0x37
     b74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	6d a9       	ldd	r22, Y+53	; 0x35
     b78:	7e a9       	ldd	r23, Y+54	; 0x36
     b7a:	8f a9       	ldd	r24, Y+55	; 0x37
     b7c:	98 ad       	ldd	r25, Y+56	; 0x38
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4a ef       	ldi	r20, 0xFA	; 250
     b84:	54 e4       	ldi	r21, 0x44	; 68
     b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	89 ab       	std	Y+49, r24	; 0x31
     b90:	9a ab       	std	Y+50, r25	; 0x32
     b92:	ab ab       	std	Y+51, r26	; 0x33
     b94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     b96:	69 a9       	ldd	r22, Y+49	; 0x31
     b98:	7a a9       	ldd	r23, Y+50	; 0x32
     b9a:	8b a9       	ldd	r24, Y+51	; 0x33
     b9c:	9c a9       	ldd	r25, Y+52	; 0x34
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <lcd_sendCommand+0x72>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	98 ab       	std	Y+48, r25	; 0x30
     bb4:	8f a7       	std	Y+47, r24	; 0x2f
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <lcd_sendCommand+0xf0>
	else if (__tmp > 65535)
     bb8:	69 a9       	ldd	r22, Y+49	; 0x31
     bba:	7a a9       	ldd	r23, Y+50	; 0x32
     bbc:	8b a9       	ldd	r24, Y+51	; 0x33
     bbe:	9c a9       	ldd	r25, Y+52	; 0x34
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bcc:	18 16       	cp	r1, r24
     bce:	4c f5       	brge	.+82     	; 0xc22 <lcd_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd0:	6d a9       	ldd	r22, Y+53	; 0x35
     bd2:	7e a9       	ldd	r23, Y+54	; 0x36
     bd4:	8f a9       	ldd	r24, Y+55	; 0x37
     bd6:	98 ad       	ldd	r25, Y+56	; 0x38
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	98 ab       	std	Y+48, r25	; 0x30
     bf6:	8f a7       	std	Y+47, r24	; 0x2f
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <lcd_sendCommand+0xd2>
     bfa:	88 ec       	ldi	r24, 0xC8	; 200
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9e a7       	std	Y+46, r25	; 0x2e
     c00:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c02:	8d a5       	ldd	r24, Y+45	; 0x2d
     c04:	9e a5       	ldd	r25, Y+46	; 0x2e
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <lcd_sendCommand+0xc0>
     c0a:	9e a7       	std	Y+46, r25	; 0x2e
     c0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c10:	98 a9       	ldd	r25, Y+48	; 0x30
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	98 ab       	std	Y+48, r25	; 0x30
     c16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1a:	98 a9       	ldd	r25, Y+48	; 0x30
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	69 f7       	brne	.-38     	; 0xbfa <lcd_sendCommand+0xb4>
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <lcd_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	69 a9       	ldd	r22, Y+49	; 0x31
     c24:	7a a9       	ldd	r23, Y+50	; 0x32
     c26:	8b a9       	ldd	r24, Y+51	; 0x33
     c28:	9c a9       	ldd	r25, Y+52	; 0x34
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	98 ab       	std	Y+48, r25	; 0x30
     c34:	8f a7       	std	Y+47, r24	; 0x2f
     c36:	8f a5       	ldd	r24, Y+47	; 0x2f
     c38:	98 a9       	ldd	r25, Y+48	; 0x30
     c3a:	9c a7       	std	Y+44, r25	; 0x2c
     c3c:	8b a7       	std	Y+43, r24	; 0x2b
     c3e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c40:	9c a5       	ldd	r25, Y+44	; 0x2c
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_sendCommand+0xfc>
     c46:	9c a7       	std	Y+44, r25	; 0x2c
     c48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	64 e0       	ldi	r22, 0x04	; 4
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e8       	ldi	r26, 0x80	; 128
     c5a:	bf e3       	ldi	r27, 0x3F	; 63
     c5c:	8f a3       	std	Y+39, r24	; 0x27
     c5e:	98 a7       	std	Y+40, r25	; 0x28
     c60:	a9 a7       	std	Y+41, r26	; 0x29
     c62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c64:	6f a1       	ldd	r22, Y+39	; 0x27
     c66:	78 a5       	ldd	r23, Y+40	; 0x28
     c68:	89 a5       	ldd	r24, Y+41	; 0x29
     c6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a ef       	ldi	r20, 0xFA	; 250
     c72:	54 e4       	ldi	r21, 0x44	; 68
     c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	8b a3       	std	Y+35, r24	; 0x23
     c7e:	9c a3       	std	Y+36, r25	; 0x24
     c80:	ad a3       	std	Y+37, r26	; 0x25
     c82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c84:	6b a1       	ldd	r22, Y+35	; 0x23
     c86:	7c a1       	ldd	r23, Y+36	; 0x24
     c88:	8d a1       	ldd	r24, Y+37	; 0x25
     c8a:	9e a1       	ldd	r25, Y+38	; 0x26
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c98:	88 23       	and	r24, r24
     c9a:	2c f4       	brge	.+10     	; 0xca6 <lcd_sendCommand+0x160>
		__ticks = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9a a3       	std	Y+34, r25	; 0x22
     ca2:	89 a3       	std	Y+33, r24	; 0x21
     ca4:	3f c0       	rjmp	.+126    	; 0xd24 <lcd_sendCommand+0x1de>
	else if (__tmp > 65535)
     ca6:	6b a1       	ldd	r22, Y+35	; 0x23
     ca8:	7c a1       	ldd	r23, Y+36	; 0x24
     caa:	8d a1       	ldd	r24, Y+37	; 0x25
     cac:	9e a1       	ldd	r25, Y+38	; 0x26
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	3f ef       	ldi	r19, 0xFF	; 255
     cb2:	4f e7       	ldi	r20, 0x7F	; 127
     cb4:	57 e4       	ldi	r21, 0x47	; 71
     cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cba:	18 16       	cp	r1, r24
     cbc:	4c f5       	brge	.+82     	; 0xd10 <lcd_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbe:	6f a1       	ldd	r22, Y+39	; 0x27
     cc0:	78 a5       	ldd	r23, Y+40	; 0x28
     cc2:	89 a5       	ldd	r24, Y+41	; 0x29
     cc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e2       	ldi	r20, 0x20	; 32
     ccc:	51 e4       	ldi	r21, 0x41	; 65
     cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9a a3       	std	Y+34, r25	; 0x22
     ce4:	89 a3       	std	Y+33, r24	; 0x21
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <lcd_sendCommand+0x1c0>
     ce8:	88 ec       	ldi	r24, 0xC8	; 200
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	98 a3       	std	Y+32, r25	; 0x20
     cee:	8f 8f       	std	Y+31, r24	; 0x1f
     cf0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cf2:	98 a1       	ldd	r25, Y+32	; 0x20
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <lcd_sendCommand+0x1ae>
     cf8:	98 a3       	std	Y+32, r25	; 0x20
     cfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfc:	89 a1       	ldd	r24, Y+33	; 0x21
     cfe:	9a a1       	ldd	r25, Y+34	; 0x22
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	9a a3       	std	Y+34, r25	; 0x22
     d04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d06:	89 a1       	ldd	r24, Y+33	; 0x21
     d08:	9a a1       	ldd	r25, Y+34	; 0x22
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f7       	brne	.-38     	; 0xce8 <lcd_sendCommand+0x1a2>
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <lcd_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d10:	6b a1       	ldd	r22, Y+35	; 0x23
     d12:	7c a1       	ldd	r23, Y+36	; 0x24
     d14:	8d a1       	ldd	r24, Y+37	; 0x25
     d16:	9e a1       	ldd	r25, Y+38	; 0x26
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9a a3       	std	Y+34, r25	; 0x22
     d22:	89 a3       	std	Y+33, r24	; 0x21
     d24:	89 a1       	ldd	r24, Y+33	; 0x21
     d26:	9a a1       	ldd	r25, Y+34	; 0x22
     d28:	9e 8f       	std	Y+30, r25	; 0x1e
     d2a:	8d 8f       	std	Y+29, r24	; 0x1d
     d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <lcd_sendCommand+0x1ea>
     d34:	9e 8f       	std	Y+30, r25	; 0x1e
     d36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(lcdbits == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	69 ad       	ldd	r22, Y+57	; 0x39
     d3c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <GPIO_writePort>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf e3       	ldi	r27, 0x3F	; 63
     d48:	89 8f       	std	Y+25, r24	; 0x19
     d4a:	9a 8f       	std	Y+26, r25	; 0x1a
     d4c:	ab 8f       	std	Y+27, r26	; 0x1b
     d4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	69 8d       	ldd	r22, Y+25	; 0x19
     d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a ef       	ldi	r20, 0xFA	; 250
     d5e:	54 e4       	ldi	r21, 0x44	; 68
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8d 8b       	std	Y+21, r24	; 0x15
     d6a:	9e 8b       	std	Y+22, r25	; 0x16
     d6c:	af 8b       	std	Y+23, r26	; 0x17
     d6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d70:	6d 89       	ldd	r22, Y+21	; 0x15
     d72:	7e 89       	ldd	r23, Y+22	; 0x16
     d74:	8f 89       	ldd	r24, Y+23	; 0x17
     d76:	98 8d       	ldd	r25, Y+24	; 0x18
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	2c f4       	brge	.+10     	; 0xd92 <lcd_sendCommand+0x24c>
		__ticks = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <lcd_sendCommand+0x2ca>
	else if (__tmp > 65535)
     d92:	6d 89       	ldd	r22, Y+21	; 0x15
     d94:	7e 89       	ldd	r23, Y+22	; 0x16
     d96:	8f 89       	ldd	r24, Y+23	; 0x17
     d98:	98 8d       	ldd	r25, Y+24	; 0x18
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	4c f5       	brge	.+82     	; 0xdfc <lcd_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	69 8d       	ldd	r22, Y+25	; 0x19
     dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9c 8b       	std	Y+20, r25	; 0x14
     dd0:	8b 8b       	std	Y+19, r24	; 0x13
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <lcd_sendCommand+0x2ac>
     dd4:	88 ec       	ldi	r24, 0xC8	; 200
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9a 8b       	std	Y+18, r25	; 0x12
     dda:	89 8b       	std	Y+17, r24	; 0x11
     ddc:	89 89       	ldd	r24, Y+17	; 0x11
     dde:	9a 89       	ldd	r25, Y+18	; 0x12
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <lcd_sendCommand+0x29a>
     de4:	9a 8b       	std	Y+18, r25	; 0x12
     de6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8b 89       	ldd	r24, Y+19	; 0x13
     df4:	9c 89       	ldd	r25, Y+20	; 0x14
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <lcd_sendCommand+0x28e>
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <lcd_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6d 89       	ldd	r22, Y+21	; 0x15
     dfe:	7e 89       	ldd	r23, Y+22	; 0x16
     e00:	8f 89       	ldd	r24, Y+23	; 0x17
     e02:	98 8d       	ldd	r25, Y+24	; 0x18
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9c 8b       	std	Y+20, r25	; 0x14
     e0e:	8b 8b       	std	Y+19, r24	; 0x13
     e10:	8b 89       	ldd	r24, Y+19	; 0x13
     e12:	9c 89       	ldd	r25, Y+20	; 0x14
     e14:	98 8b       	std	Y+16, r25	; 0x10
     e16:	8f 87       	std	Y+15, r24	; 0x0f
     e18:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <lcd_sendCommand+0x2d6>
     e20:	98 8b       	std	Y+16, r25	; 0x10
     e22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	64 e0       	ldi	r22, 0x04	; 4
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 e8       	ldi	r26, 0x80	; 128
     e34:	bf e3       	ldi	r27, 0x3F	; 63
     e36:	8b 87       	std	Y+11, r24	; 0x0b
     e38:	9c 87       	std	Y+12, r25	; 0x0c
     e3a:	ad 87       	std	Y+13, r26	; 0x0d
     e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a ef       	ldi	r20, 0xFA	; 250
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	98 87       	std	Y+8, r25	; 0x08
     e5a:	a9 87       	std	Y+9, r26	; 0x09
     e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <lcd_sendCommand+0x33a>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <lcd_sendCommand+0x3b8>
	else if (__tmp > 65535)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <lcd_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <lcd_sendCommand+0x39a>
     ec2:	88 ec       	ldi	r24, 0xC8	; 200
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <lcd_sendCommand+0x388>
     ed2:	9c 83       	std	Y+4, r25	; 0x04
     ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <lcd_sendCommand+0x37c>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <lcd_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <lcd_sendCommand+0x3c4>
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
     f12:	e9 96       	adiw	r28, 0x39	; 57
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <lcd_displayCharacter>:

void lcd_displayCharacter(uint8 data){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	e9 97       	sbiw	r28, 0x39	; 57
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e8       	ldi	r26, 0x80	; 128
     f4a:	bf e3       	ldi	r27, 0x3F	; 63
     f4c:	8d ab       	std	Y+53, r24	; 0x35
     f4e:	9e ab       	std	Y+54, r25	; 0x36
     f50:	af ab       	std	Y+55, r26	; 0x37
     f52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f54:	6d a9       	ldd	r22, Y+53	; 0x35
     f56:	7e a9       	ldd	r23, Y+54	; 0x36
     f58:	8f a9       	ldd	r24, Y+55	; 0x37
     f5a:	98 ad       	ldd	r25, Y+56	; 0x38
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a ef       	ldi	r20, 0xFA	; 250
     f62:	54 e4       	ldi	r21, 0x44	; 68
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	89 ab       	std	Y+49, r24	; 0x31
     f6e:	9a ab       	std	Y+50, r25	; 0x32
     f70:	ab ab       	std	Y+51, r26	; 0x33
     f72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f74:	69 a9       	ldd	r22, Y+49	; 0x31
     f76:	7a a9       	ldd	r23, Y+50	; 0x32
     f78:	8b a9       	ldd	r24, Y+51	; 0x33
     f7a:	9c a9       	ldd	r25, Y+52	; 0x34
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f88:	88 23       	and	r24, r24
     f8a:	2c f4       	brge	.+10     	; 0xf96 <lcd_displayCharacter+0x72>
		__ticks = 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	98 ab       	std	Y+48, r25	; 0x30
     f92:	8f a7       	std	Y+47, r24	; 0x2f
     f94:	3f c0       	rjmp	.+126    	; 0x1014 <lcd_displayCharacter+0xf0>
	else if (__tmp > 65535)
     f96:	69 a9       	ldd	r22, Y+49	; 0x31
     f98:	7a a9       	ldd	r23, Y+50	; 0x32
     f9a:	8b a9       	ldd	r24, Y+51	; 0x33
     f9c:	9c a9       	ldd	r25, Y+52	; 0x34
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     faa:	18 16       	cp	r1, r24
     fac:	4c f5       	brge	.+82     	; 0x1000 <lcd_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fae:	6d a9       	ldd	r22, Y+53	; 0x35
     fb0:	7e a9       	ldd	r23, Y+54	; 0x36
     fb2:	8f a9       	ldd	r24, Y+55	; 0x37
     fb4:	98 ad       	ldd	r25, Y+56	; 0x38
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	98 ab       	std	Y+48, r25	; 0x30
     fd4:	8f a7       	std	Y+47, r24	; 0x2f
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <lcd_displayCharacter+0xd2>
     fd8:	88 ec       	ldi	r24, 0xC8	; 200
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e a7       	std	Y+46, r25	; 0x2e
     fde:	8d a7       	std	Y+45, r24	; 0x2d
     fe0:	8d a5       	ldd	r24, Y+45	; 0x2d
     fe2:	9e a5       	ldd	r25, Y+46	; 0x2e
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_displayCharacter+0xc0>
     fe8:	9e a7       	std	Y+46, r25	; 0x2e
     fea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	8f a5       	ldd	r24, Y+47	; 0x2f
     fee:	98 a9       	ldd	r25, Y+48	; 0x30
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	98 ab       	std	Y+48, r25	; 0x30
     ff4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff8:	98 a9       	ldd	r25, Y+48	; 0x30
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <lcd_displayCharacter+0xb4>
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <lcd_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	69 a9       	ldd	r22, Y+49	; 0x31
    1002:	7a a9       	ldd	r23, Y+50	; 0x32
    1004:	8b a9       	ldd	r24, Y+51	; 0x33
    1006:	9c a9       	ldd	r25, Y+52	; 0x34
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	98 ab       	std	Y+48, r25	; 0x30
    1012:	8f a7       	std	Y+47, r24	; 0x2f
    1014:	8f a5       	ldd	r24, Y+47	; 0x2f
    1016:	98 a9       	ldd	r25, Y+48	; 0x30
    1018:	9c a7       	std	Y+44, r25	; 0x2c
    101a:	8b a7       	std	Y+43, r24	; 0x2b
    101c:	8b a5       	ldd	r24, Y+43	; 0x2b
    101e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <lcd_displayCharacter+0xfc>
    1024:	9c a7       	std	Y+44, r25	; 0x2c
    1026:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	64 e0       	ldi	r22, 0x04	; 4
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e8       	ldi	r26, 0x80	; 128
    1038:	bf e3       	ldi	r27, 0x3F	; 63
    103a:	8f a3       	std	Y+39, r24	; 0x27
    103c:	98 a7       	std	Y+40, r25	; 0x28
    103e:	a9 a7       	std	Y+41, r26	; 0x29
    1040:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1042:	6f a1       	ldd	r22, Y+39	; 0x27
    1044:	78 a5       	ldd	r23, Y+40	; 0x28
    1046:	89 a5       	ldd	r24, Y+41	; 0x29
    1048:	9a a5       	ldd	r25, Y+42	; 0x2a
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a ef       	ldi	r20, 0xFA	; 250
    1050:	54 e4       	ldi	r21, 0x44	; 68
    1052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	8b a3       	std	Y+35, r24	; 0x23
    105c:	9c a3       	std	Y+36, r25	; 0x24
    105e:	ad a3       	std	Y+37, r26	; 0x25
    1060:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1062:	6b a1       	ldd	r22, Y+35	; 0x23
    1064:	7c a1       	ldd	r23, Y+36	; 0x24
    1066:	8d a1       	ldd	r24, Y+37	; 0x25
    1068:	9e a1       	ldd	r25, Y+38	; 0x26
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1076:	88 23       	and	r24, r24
    1078:	2c f4       	brge	.+10     	; 0x1084 <lcd_displayCharacter+0x160>
		__ticks = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9a a3       	std	Y+34, r25	; 0x22
    1080:	89 a3       	std	Y+33, r24	; 0x21
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <lcd_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1084:	6b a1       	ldd	r22, Y+35	; 0x23
    1086:	7c a1       	ldd	r23, Y+36	; 0x24
    1088:	8d a1       	ldd	r24, Y+37	; 0x25
    108a:	9e a1       	ldd	r25, Y+38	; 0x26
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	4c f5       	brge	.+82     	; 0x10ee <lcd_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	6f a1       	ldd	r22, Y+39	; 0x27
    109e:	78 a5       	ldd	r23, Y+40	; 0x28
    10a0:	89 a5       	ldd	r24, Y+41	; 0x29
    10a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9a a3       	std	Y+34, r25	; 0x22
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <lcd_displayCharacter+0x1c0>
    10c6:	88 ec       	ldi	r24, 0xC8	; 200
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	98 a3       	std	Y+32, r25	; 0x20
    10cc:	8f 8f       	std	Y+31, r24	; 0x1f
    10ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d0:	98 a1       	ldd	r25, Y+32	; 0x20
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <lcd_displayCharacter+0x1ae>
    10d6:	98 a3       	std	Y+32, r25	; 0x20
    10d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	89 a1       	ldd	r24, Y+33	; 0x21
    10dc:	9a a1       	ldd	r25, Y+34	; 0x22
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	9a a3       	std	Y+34, r25	; 0x22
    10e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e4:	89 a1       	ldd	r24, Y+33	; 0x21
    10e6:	9a a1       	ldd	r25, Y+34	; 0x22
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <lcd_displayCharacter+0x1a2>
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <lcd_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	6b a1       	ldd	r22, Y+35	; 0x23
    10f0:	7c a1       	ldd	r23, Y+36	; 0x24
    10f2:	8d a1       	ldd	r24, Y+37	; 0x25
    10f4:	9e a1       	ldd	r25, Y+38	; 0x26
    10f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	9a a3       	std	Y+34, r25	; 0x22
    1100:	89 a3       	std	Y+33, r24	; 0x21
    1102:	89 a1       	ldd	r24, Y+33	; 0x21
    1104:	9a a1       	ldd	r25, Y+34	; 0x22
    1106:	9e 8f       	std	Y+30, r25	; 0x1e
    1108:	8d 8f       	std	Y+29, r24	; 0x1d
    110a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <lcd_displayCharacter+0x1ea>
    1112:	9e 8f       	std	Y+30, r25	; 0x1e
    1114:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(lcdbits == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	69 ad       	ldd	r22, Y+57	; 0x39
    111a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <GPIO_writePort>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e8       	ldi	r26, 0x80	; 128
    1124:	bf e3       	ldi	r27, 0x3F	; 63
    1126:	89 8f       	std	Y+25, r24	; 0x19
    1128:	9a 8f       	std	Y+26, r25	; 0x1a
    112a:	ab 8f       	std	Y+27, r26	; 0x1b
    112c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112e:	69 8d       	ldd	r22, Y+25	; 0x19
    1130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	4a ef       	ldi	r20, 0xFA	; 250
    113c:	54 e4       	ldi	r21, 0x44	; 68
    113e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	8d 8b       	std	Y+21, r24	; 0x15
    1148:	9e 8b       	std	Y+22, r25	; 0x16
    114a:	af 8b       	std	Y+23, r26	; 0x17
    114c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1162:	88 23       	and	r24, r24
    1164:	2c f4       	brge	.+10     	; 0x1170 <lcd_displayCharacter+0x24c>
		__ticks = 1;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c 8b       	std	Y+20, r25	; 0x14
    116c:	8b 8b       	std	Y+19, r24	; 0x13
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <lcd_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1170:	6d 89       	ldd	r22, Y+21	; 0x15
    1172:	7e 89       	ldd	r23, Y+22	; 0x16
    1174:	8f 89       	ldd	r24, Y+23	; 0x17
    1176:	98 8d       	ldd	r25, Y+24	; 0x18
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	3f ef       	ldi	r19, 0xFF	; 255
    117c:	4f e7       	ldi	r20, 0x7F	; 127
    117e:	57 e4       	ldi	r21, 0x47	; 71
    1180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1184:	18 16       	cp	r1, r24
    1186:	4c f5       	brge	.+82     	; 0x11da <lcd_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1188:	69 8d       	ldd	r22, Y+25	; 0x19
    118a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e2       	ldi	r20, 0x20	; 32
    1196:	51 e4       	ldi	r21, 0x41	; 65
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9c 8b       	std	Y+20, r25	; 0x14
    11ae:	8b 8b       	std	Y+19, r24	; 0x13
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <lcd_displayCharacter+0x2ac>
    11b2:	88 ec       	ldi	r24, 0xC8	; 200
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9a 8b       	std	Y+18, r25	; 0x12
    11b8:	89 8b       	std	Y+17, r24	; 0x11
    11ba:	89 89       	ldd	r24, Y+17	; 0x11
    11bc:	9a 89       	ldd	r25, Y+18	; 0x12
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <lcd_displayCharacter+0x29a>
    11c2:	9a 8b       	std	Y+18, r25	; 0x12
    11c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	8b 89       	ldd	r24, Y+19	; 0x13
    11c8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	9c 8b       	std	Y+20, r25	; 0x14
    11ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d0:	8b 89       	ldd	r24, Y+19	; 0x13
    11d2:	9c 89       	ldd	r25, Y+20	; 0x14
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	69 f7       	brne	.-38     	; 0x11b2 <lcd_displayCharacter+0x28e>
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <lcd_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11da:	6d 89       	ldd	r22, Y+21	; 0x15
    11dc:	7e 89       	ldd	r23, Y+22	; 0x16
    11de:	8f 89       	ldd	r24, Y+23	; 0x17
    11e0:	98 8d       	ldd	r25, Y+24	; 0x18
    11e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9c 8b       	std	Y+20, r25	; 0x14
    11ec:	8b 8b       	std	Y+19, r24	; 0x13
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	98 8b       	std	Y+16, r25	; 0x10
    11f4:	8f 87       	std	Y+15, r24	; 0x0f
    11f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f8:	98 89       	ldd	r25, Y+16	; 0x10
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <lcd_displayCharacter+0x2d6>
    11fe:	98 8b       	std	Y+16, r25	; 0x10
    1200:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	64 e0       	ldi	r22, 0x04	; 4
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a0 e8       	ldi	r26, 0x80	; 128
    1212:	bf e3       	ldi	r27, 0x3F	; 63
    1214:	8b 87       	std	Y+11, r24	; 0x0b
    1216:	9c 87       	std	Y+12, r25	; 0x0c
    1218:	ad 87       	std	Y+13, r26	; 0x0d
    121a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121c:	6b 85       	ldd	r22, Y+11	; 0x0b
    121e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4a ef       	ldi	r20, 0xFA	; 250
    122a:	54 e4       	ldi	r21, 0x44	; 68
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8f 83       	std	Y+7, r24	; 0x07
    1236:	98 87       	std	Y+8, r25	; 0x08
    1238:	a9 87       	std	Y+9, r26	; 0x09
    123a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123c:	6f 81       	ldd	r22, Y+7	; 0x07
    123e:	78 85       	ldd	r23, Y+8	; 0x08
    1240:	89 85       	ldd	r24, Y+9	; 0x09
    1242:	9a 85       	ldd	r25, Y+10	; 0x0a
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1250:	88 23       	and	r24, r24
    1252:	2c f4       	brge	.+10     	; 0x125e <lcd_displayCharacter+0x33a>
		__ticks = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9e 83       	std	Y+6, r25	; 0x06
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	3f c0       	rjmp	.+126    	; 0x12dc <lcd_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    125e:	6f 81       	ldd	r22, Y+7	; 0x07
    1260:	78 85       	ldd	r23, Y+8	; 0x08
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	3f ef       	ldi	r19, 0xFF	; 255
    126a:	4f e7       	ldi	r20, 0x7F	; 127
    126c:	57 e4       	ldi	r21, 0x47	; 71
    126e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1272:	18 16       	cp	r1, r24
    1274:	4c f5       	brge	.+82     	; 0x12c8 <lcd_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1276:	6b 85       	ldd	r22, Y+11	; 0x0b
    1278:	7c 85       	ldd	r23, Y+12	; 0x0c
    127a:	8d 85       	ldd	r24, Y+13	; 0x0d
    127c:	9e 85       	ldd	r25, Y+14	; 0x0e
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e2       	ldi	r20, 0x20	; 32
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	0f c0       	rjmp	.+30     	; 0x12be <lcd_displayCharacter+0x39a>
    12a0:	88 ec       	ldi	r24, 0xC8	; 200
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <lcd_displayCharacter+0x388>
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	69 f7       	brne	.-38     	; 0x12a0 <lcd_displayCharacter+0x37c>
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <lcd_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <lcd_displayCharacter+0x3c4>
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    12f0:	e9 96       	adiw	r28, 0x39	; 57
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <lcd_init>:


void lcd_init(void){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2e 97       	sbiw	r28, 0x0e	; 14
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	41 e0       	ldi	r20, 0x01	; 1
    131c:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	64 e0       	ldi	r22, 0x04	; 4
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a0 ea       	ldi	r26, 0xA0	; 160
    1330:	b1 e4       	ldi	r27, 0x41	; 65
    1332:	8b 87       	std	Y+11, r24	; 0x0b
    1334:	9c 87       	std	Y+12, r25	; 0x0c
    1336:	ad 87       	std	Y+13, r26	; 0x0d
    1338:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133a:	6b 85       	ldd	r22, Y+11	; 0x0b
    133c:	7c 85       	ldd	r23, Y+12	; 0x0c
    133e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1340:	9e 85       	ldd	r25, Y+14	; 0x0e
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	4a ef       	ldi	r20, 0xFA	; 250
    1348:	54 e4       	ldi	r21, 0x44	; 68
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	8f 83       	std	Y+7, r24	; 0x07
    1354:	98 87       	std	Y+8, r25	; 0x08
    1356:	a9 87       	std	Y+9, r26	; 0x09
    1358:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135a:	6f 81       	ldd	r22, Y+7	; 0x07
    135c:	78 85       	ldd	r23, Y+8	; 0x08
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136e:	88 23       	and	r24, r24
    1370:	2c f4       	brge	.+10     	; 0x137c <lcd_init+0x7a>
		__ticks = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	3f c0       	rjmp	.+126    	; 0x13fa <lcd_init+0xf8>
	else if (__tmp > 65535)
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	57 e4       	ldi	r21, 0x47	; 71
    138c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	4c f5       	brge	.+82     	; 0x13e6 <lcd_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	6b 85       	ldd	r22, Y+11	; 0x0b
    1396:	7c 85       	ldd	r23, Y+12	; 0x0c
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e2       	ldi	r20, 0x20	; 32
    13a2:	51 e4       	ldi	r21, 0x41	; 65
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	bc 01       	movw	r22, r24
    13ae:	cd 01       	movw	r24, r26
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	0f c0       	rjmp	.+30     	; 0x13dc <lcd_init+0xda>
    13be:	88 ec       	ldi	r24, 0xC8	; 200
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <lcd_init+0xc8>
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	69 f7       	brne	.-38     	; 0x13be <lcd_init+0xbc>
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <lcd_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e6:	6f 81       	ldd	r22, Y+7	; 0x07
    13e8:	78 85       	ldd	r23, Y+8	; 0x08
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <lcd_init+0x104>
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	lcd_sendCommand(0X28);

#elif(lcdbits == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_setupPortDirection>
	lcd_sendCommand(0X38);
    1416:	88 e3       	ldi	r24, 0x38	; 56
    1418:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>

#endif
	lcd_sendCommand(0X0C);
    141c:	8c e0       	ldi	r24, 0x0C	; 12
    141e:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
	lcd_sendCommand(0X01);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
}
    1428:	2e 96       	adiw	r28, 0x0e	; 14
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <lcd_displaystring>:
void lcd_displaystring(uint8 *str)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <lcd_displaystring+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <lcd_displaystring+0x8>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9c 83       	std	Y+4, r25	; 0x04
    1448:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;str[i]!='\0';i++)
    144a:	1a 82       	std	Y+2, r1	; 0x02
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	0f c0       	rjmp	.+30     	; 0x146e <lcd_displaystring+0x34>
	{
		lcd_displayCharacter(str[i]);
    1450:	29 81       	ldd	r18, Y+1	; 0x01
    1452:	3a 81       	ldd	r19, Y+2	; 0x02
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	fc 01       	movw	r30, r24
    145a:	e2 0f       	add	r30, r18
    145c:	f3 1f       	adc	r31, r19
    145e:	80 81       	ld	r24, Z
    1460:	0e 94 92 07 	call	0xf24	; 0xf24 <lcd_displayCharacter>
	lcd_sendCommand(0X0C);
	lcd_sendCommand(0X01);
}
void lcd_displaystring(uint8 *str)
{
	for(int i=0;str[i]!='\0';i++)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	29 81       	ldd	r18, Y+1	; 0x01
    1470:	3a 81       	ldd	r19, Y+2	; 0x02
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	fc 01       	movw	r30, r24
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	39 f7       	brne	.-50     	; 0x1450 <lcd_displaystring+0x16>
	{
		lcd_displayCharacter(str[i]);
	}
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <LCD_movecursor>:

void LCD_movecursor(uint8 row,uint8 col)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <LCD_movecursor+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <LCD_movecursor+0x8>
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memoryaddress;
	switch(row)
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3d 83       	std	Y+5, r19	; 0x05
    14aa:	2c 83       	std	Y+4, r18	; 0x04
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	c1 f0       	breq	.+48     	; 0x14e6 <LCD_movecursor+0x56>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_movecursor+0x3a>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <LCD_movecursor+0x50>
    14c8:	19 c0       	rjmp	.+50     	; 0x14fc <LCD_movecursor+0x6c>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	69 f0       	breq	.+26     	; 0x14ee <LCD_movecursor+0x5e>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	61 f0       	breq	.+24     	; 0x14f6 <LCD_movecursor+0x66>
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <LCD_movecursor+0x6c>
	{
	case 0:
		lcd_memoryaddress=col;
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	0b c0       	rjmp	.+22     	; 0x14fc <LCD_movecursor+0x6c>
		break;
	case 1:
		lcd_memoryaddress=col+0x40;
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	80 5c       	subi	r24, 0xC0	; 192
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <LCD_movecursor+0x6c>
		break;
	case 2:
		lcd_memoryaddress=col+0x10;
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	80 5f       	subi	r24, 0xF0	; 240
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <LCD_movecursor+0x6c>
		break;
	case 3:
		lcd_memoryaddress=col+0x50;
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	80 5b       	subi	r24, 0xB0	; 176
    14fa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	lcd_sendCommand(lcd_memoryaddress | 0X80);
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>

}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <lcd_displayrowcolumn>:
void lcd_displayrowcolumn(uint8 *str,uint8 row,uint8 col)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <lcd_displayrowcolumn+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <lcd_displayrowcolumn+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6b 83       	std	Y+3, r22	; 0x03
    1526:	4c 83       	std	Y+4, r20	; 0x04
	LCD_movecursor(row,col);
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	6c 81       	ldd	r22, Y+4	; 0x04
    152c:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_movecursor>
	lcd_displaystring(str);
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <lcd_clearscreen>:
void lcd_clearscreen()
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	lcd_sendCommand(0X01);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <lcd_intgertostring>:

void lcd_intgertostring(int data)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	62 97       	sbiw	r28, 0x12	; 18
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	9a 8b       	std	Y+18, r25	; 0x12
    1570:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    1572:	89 89       	ldd	r24, Y+17	; 0x11
    1574:	9a 89       	ldd	r25, Y+18	; 0x12
    1576:	9e 01       	movw	r18, r28
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	b9 01       	movw	r22, r18
    157e:	4a e0       	ldi	r20, 0x0A	; 10
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <itoa>
	lcd_displaystring(buffer);
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
}
    158e:	62 96       	adiw	r28, 0x12	; 18
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	lcd_sendCommand(0x01);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <BUZZER_init>:
/*
 * Function Name: BUZZER_init
 * Description: Setup Buzzer_pin as output pin  and turn off the buzzer
 */
void BUZZER_init(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	/* Make BuzzerPin as output pin*/
	GPIO_setupPinDirection(BUZZER_PORT , BUZZER_PIN , PIN_OUTPUT);
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	63 e0       	ldi	r22, 0x03	; 3
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
	/* Buzzer of at first*/
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_LOW);
    15c6:	83 e0       	ldi	r24, 0x03	; 3
    15c8:	63 e0       	ldi	r22, 0x03	; 3
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <BUZZER_On>:
/*
 * Function Name: BUZZER_On()
 * Description :  enable the Buzzer through the GPIO
 */
void BUZZER_On(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_HIGH);
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	63 e0       	ldi	r22, 0x03	; 3
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <BUZZER_Off>:
/*
 * Function Name: BUZZER_Off()
 * Description:  disable the Buzzer through the GPIO.
 */
void BUZZER_Off(void)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_LOW);
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <PWM_Timer0_Init>:
#include "dc_motor.h"
#include "gpio.h"
#include <avr/io.h>

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1612:	e2 e5       	ldi	r30, 0x52	; 82
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    1618:	ec e5       	ldi	r30, 0x5C	; 92
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1620:	a7 e3       	ldi	r26, 0x37	; 55
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e7 e3       	ldi	r30, 0x37	; 55
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    162e:	e3 e5       	ldi	r30, 0x53	; 83
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a e6       	ldi	r24, 0x6A	; 106
    1634:	80 83       	st	Z, r24
}
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <DcMotor_init>:
 * 	The Function responsible for setup the direction for the two
 *	motor pins through the GPIO driver.
 *	Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_init(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	/* Make Motor which connected to motor O/P pins*/
	GPIO_setupPinDirection(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,PIN_OUTPUT);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,PIN_OUTPUT);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	62 e0       	ldi	r22, 0x02	; 2
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
	/*	Write LOW to make motor in Stop mode*/
	GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
	GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	62 e0       	ldi	r22, 0x02	; 2
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DcMotor_Rotate>:
 *	stop the motor based on the state input state value.
 *	Send the required duty cycle to the PWM driver based on the
 *  required speed value.
 */
void DcMotor_Rotate(DcMotor_State  state ,uint8 speed)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <DcMotor_Rotate+0x6>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * 1.Fast PWM MODE
	 * 2.Non Inverting
	 * 3.Prescaler 8
	 */
	PWM_Timer0_Init(speed);
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	0e 94 03 0b 	call	0x1606	; 0x1606 <PWM_Timer0_Init>
	/*Choose How DC_Motor Rotate CCW , CW ,Stop*/
	if(state==Stop)
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	88 23       	and	r24, r24
    168c:	59 f4       	brne	.+22     	; 0x16a4 <DcMotor_Rotate+0x30>
	{
		/*Stop A=0  , B=0*/
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    16a2:	1b c0       	rjmp	.+54     	; 0x16da <DcMotor_Rotate+0x66>
	}
	else if(state==Clock_Wise)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	59 f4       	brne	.+22     	; 0x16c0 <DcMotor_Rotate+0x4c>
	{
		/* CW A=1 ,B=0*/
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_HIGH);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    16be:	0d c0       	rjmp	.+26     	; 0x16da <DcMotor_Rotate+0x66>
	}
	else if(state==Anti_Clock_Wise)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	51 f4       	brne	.+20     	; 0x16da <DcMotor_Rotate+0x66>
	{
		/*Anti CCW A=0 ,B=1 */
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_HIGH);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <EEPROM_writeByte+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <EEPROM_writeByte+0x8>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16f6:	0e 94 41 13 	call	0x2682	; 0x2682 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16fa:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	11 f0       	breq	.+4      	; 0x1706 <EEPROM_writeByte+0x22>
        return ERROR;
    1702:	1c 82       	std	Y+4, r1	; 0x04
    1704:	28 c0       	rjmp	.+80     	; 0x1756 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	80 70       	andi	r24, 0x00	; 0
    170c:	97 70       	andi	r25, 0x07	; 7
    170e:	88 0f       	add	r24, r24
    1710:	89 2f       	mov	r24, r25
    1712:	88 1f       	adc	r24, r24
    1714:	99 0b       	sbc	r25, r25
    1716:	91 95       	neg	r25
    1718:	80 6a       	ori	r24, 0xA0	; 160
    171a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    171e:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    1722:	88 31       	cpi	r24, 0x18	; 24
    1724:	11 f0       	breq	.+4      	; 0x172a <EEPROM_writeByte+0x46>
        return ERROR; 
    1726:	1c 82       	std	Y+4, r1	; 0x04
    1728:	16 c0       	rjmp	.+44     	; 0x1756 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1730:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    1734:	88 32       	cpi	r24, 0x28	; 40
    1736:	11 f0       	breq	.+4      	; 0x173c <EEPROM_writeByte+0x58>
        return ERROR;
    1738:	1c 82       	std	Y+4, r1	; 0x04
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1742:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    1746:	88 32       	cpi	r24, 0x28	; 40
    1748:	11 f0       	breq	.+4      	; 0x174e <EEPROM_writeByte+0x6a>
        return ERROR;
    174a:	1c 82       	std	Y+4, r1	; 0x04
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    174e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <TWI_stop>
	
    return SUCCESS;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	8c 83       	std	Y+4, r24	; 0x04
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <EEPROM_readByte+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <EEPROM_readByte+0x8>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	7c 83       	std	Y+4, r23	; 0x04
    177a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    177c:	0e 94 41 13 	call	0x2682	; 0x2682 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1780:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    1784:	88 30       	cpi	r24, 0x08	; 8
    1786:	11 f0       	breq	.+4      	; 0x178c <EEPROM_readByte+0x26>
        return ERROR;
    1788:	1d 82       	std	Y+5, r1	; 0x05
    178a:	44 c0       	rjmp	.+136    	; 0x1814 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	80 70       	andi	r24, 0x00	; 0
    1792:	97 70       	andi	r25, 0x07	; 7
    1794:	88 0f       	add	r24, r24
    1796:	89 2f       	mov	r24, r25
    1798:	88 1f       	adc	r24, r24
    179a:	99 0b       	sbc	r25, r25
    179c:	91 95       	neg	r25
    179e:	80 6a       	ori	r24, 0xA0	; 160
    17a0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17a4:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    17a8:	88 31       	cpi	r24, 0x18	; 24
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <EEPROM_readByte+0x4a>
        return ERROR;
    17ac:	1d 82       	std	Y+5, r1	; 0x05
    17ae:	32 c0       	rjmp	.+100    	; 0x1814 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17b6:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    17ba:	88 32       	cpi	r24, 0x28	; 40
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <EEPROM_readByte+0x5c>
        return ERROR;
    17be:	1d 82       	std	Y+5, r1	; 0x05
    17c0:	29 c0       	rjmp	.+82     	; 0x1814 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    17c2:	0e 94 41 13 	call	0x2682	; 0x2682 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    17c6:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    17ca:	80 31       	cpi	r24, 0x10	; 16
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <EEPROM_readByte+0x6c>
        return ERROR;
    17ce:	1d 82       	std	Y+5, r1	; 0x05
    17d0:	21 c0       	rjmp	.+66     	; 0x1814 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	80 70       	andi	r24, 0x00	; 0
    17d8:	97 70       	andi	r25, 0x07	; 7
    17da:	88 0f       	add	r24, r24
    17dc:	89 2f       	mov	r24, r25
    17de:	88 1f       	adc	r24, r24
    17e0:	99 0b       	sbc	r25, r25
    17e2:	91 95       	neg	r25
    17e4:	81 6a       	ori	r24, 0xA1	; 161
    17e6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17ea:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    17ee:	80 34       	cpi	r24, 0x40	; 64
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <EEPROM_readByte+0x90>
        return ERROR;
    17f2:	1d 82       	std	Y+5, r1	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    17f6:	0e 94 86 13 	call	0x270c	; 0x270c <TWI_readByteWithNACK>
    17fa:	eb 81       	ldd	r30, Y+3	; 0x03
    17fc:	fc 81       	ldd	r31, Y+4	; 0x04
    17fe:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1800:	0e 94 99 13 	call	0x2732	; 0x2732 <TWI_getStatus>
    1804:	88 35       	cpi	r24, 0x58	; 88
    1806:	11 f0       	breq	.+4      	; 0x180c <EEPROM_readByte+0xa6>
        return ERROR;
    1808:	1d 82       	std	Y+5, r1	; 0x05
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    180c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <TWI_stop>

    return SUCCESS;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_setupPinDirection+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_setupPinDirection+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6a 83       	std	Y+2, r22	; 0x02
    1838:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <GPIO_setupPinDirection+0x1c>
    1840:	d5 c0       	rjmp	.+426    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	08 f0       	brcs	.+2      	; 0x184a <GPIO_setupPinDirection+0x24>
    1848:	d1 c0       	rjmp	.+418    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3d 83       	std	Y+5, r19	; 0x05
    1852:	2c 83       	std	Y+4, r18	; 0x04
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <GPIO_setupPinDirection+0x3a>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <GPIO_setupPinDirection+0xc0>
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <GPIO_setupPinDirection+0x4e>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	71 f0       	breq	.+28     	; 0x188e <GPIO_setupPinDirection+0x68>
    1872:	bc c0       	rjmp	.+376    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <GPIO_setupPinDirection+0x5a>
    187e:	5f c0       	rjmp	.+190    	; 0x193e <GPIO_setupPinDirection+0x118>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <GPIO_setupPinDirection+0x66>
    188a:	85 c0       	rjmp	.+266    	; 0x1996 <GPIO_setupPinDirection+0x170>
    188c:	af c0       	rjmp	.+350    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	a1 f4       	brne	.+40     	; 0x18bc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1894:	aa e3       	ldi	r26, 0x3A	; 58
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ea e3       	ldi	r30, 0x3A	; 58
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_setupPinDirection+0x8c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_setupPinDirection+0x88>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	98 c0       	rjmp	.+304    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18bc:	aa e3       	ldi	r26, 0x3A	; 58
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ea e3       	ldi	r30, 0x3A	; 58
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_setupPinDirection+0xb4>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_setupPinDirection+0xb0>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	83 c0       	rjmp	.+262    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a1 f4       	brne	.+40     	; 0x1914 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_setupPinDirection+0xe4>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_setupPinDirection+0xe0>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	6c c0       	rjmp	.+216    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1914:	a7 e3       	ldi	r26, 0x37	; 55
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e7 e3       	ldi	r30, 0x37	; 55
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_setupPinDirection+0x10c>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_setupPinDirection+0x108>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	57 c0       	rjmp	.+174    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	a1 f4       	brne	.+40     	; 0x196c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1944:	a4 e3       	ldi	r26, 0x34	; 52
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e4 e3       	ldi	r30, 0x34	; 52
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_setupPinDirection+0x13c>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_setupPinDirection+0x138>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	40 c0       	rjmp	.+128    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    196c:	a4 e3       	ldi	r26, 0x34	; 52
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e4 e3       	ldi	r30, 0x34	; 52
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_setupPinDirection+0x164>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_setupPinDirection+0x160>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	2b c0       	rjmp	.+86     	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	a1 f4       	brne	.+40     	; 0x19c4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    199c:	a1 e3       	ldi	r26, 0x31	; 49
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e1 e3       	ldi	r30, 0x31	; 49
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_setupPinDirection+0x194>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_setupPinDirection+0x190>
    19be:	84 2b       	or	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19c4:	a1 e3       	ldi	r26, 0x31	; 49
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e1 e3       	ldi	r30, 0x31	; 49
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <GPIO_setupPinDirection+0x1bc>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <GPIO_setupPinDirection+0x1b8>
    19e6:	80 95       	com	r24
    19e8:	84 23       	and	r24, r20
    19ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <GPIO_writePin+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <GPIO_writePin+0x8>
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	6a 83       	std	Y+2, r22	; 0x02
    1a0e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	88 30       	cpi	r24, 0x08	; 8
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <GPIO_writePin+0x1c>
    1a16:	d5 c0       	rjmp	.+426    	; 0x1bc2 <GPIO_writePin+0x1c6>
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	84 30       	cpi	r24, 0x04	; 4
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <GPIO_writePin+0x24>
    1a1e:	d1 c0       	rjmp	.+418    	; 0x1bc2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3d 83       	std	Y+5, r19	; 0x05
    1a28:	2c 83       	std	Y+4, r18	; 0x04
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <GPIO_writePin+0x3a>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <GPIO_writePin+0xc0>
    1a36:	2c 81       	ldd	r18, Y+4	; 0x04
    1a38:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <GPIO_writePin+0x4e>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <GPIO_writePin+0x68>
    1a48:	bc c0       	rjmp	.+376    	; 0x1bc2 <GPIO_writePin+0x1c6>
    1a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <GPIO_writePin+0x5a>
    1a54:	5f c0       	rjmp	.+190    	; 0x1b14 <GPIO_writePin+0x118>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <GPIO_writePin+0x66>
    1a60:	85 c0       	rjmp	.+266    	; 0x1b6c <GPIO_writePin+0x170>
    1a62:	af c0       	rjmp	.+350    	; 0x1bc2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	a1 f4       	brne	.+40     	; 0x1a92 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_writePin+0x8c>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_writePin+0x88>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	98 c0       	rjmp	.+304    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a92:	ab e3       	ldi	r26, 0x3B	; 59
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <GPIO_writePin+0xb4>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <GPIO_writePin+0xb0>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	83 c0       	rjmp	.+262    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	a1 f4       	brne	.+40     	; 0x1aea <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ac2:	a8 e3       	ldi	r26, 0x38	; 56
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e8 e3       	ldi	r30, 0x38	; 56
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_writePin+0xe4>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_writePin+0xe0>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	6c c0       	rjmp	.+216    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_writePin+0x10c>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_writePin+0x108>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	57 c0       	rjmp	.+174    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	a1 f4       	brne	.+40     	; 0x1b42 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_writePin+0x13c>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_writePin+0x138>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	40 c0       	rjmp	.+128    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b42:	a5 e3       	ldi	r26, 0x35	; 53
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e3       	ldi	r30, 0x35	; 53
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <GPIO_writePin+0x164>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <GPIO_writePin+0x160>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	2b c0       	rjmp	.+86     	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	a1 f4       	brne	.+40     	; 0x1b9a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b72:	a2 e3       	ldi	r26, 0x32	; 50
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e2 e3       	ldi	r30, 0x32	; 50
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_writePin+0x194>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_writePin+0x190>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b9a:	a2 e3       	ldi	r26, 0x32	; 50
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <GPIO_writePin+0x1bc>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <GPIO_writePin+0x1b8>
    1bbc:	80 95       	com	r24
    1bbe:	84 23       	and	r24, r20
    1bc0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_readPin+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <GPIO_readPin+0x8>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	8a 83       	std	Y+2, r24	; 0x02
    1be2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1be4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 30       	cpi	r24, 0x08	; 8
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <GPIO_readPin+0x1c>
    1bec:	84 c0       	rjmp	.+264    	; 0x1cf6 <GPIO_readPin+0x124>
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <GPIO_readPin+0x24>
    1bf4:	80 c0       	rjmp	.+256    	; 0x1cf6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3d 83       	std	Y+5, r19	; 0x05
    1bfe:	2c 83       	std	Y+4, r18	; 0x04
    1c00:	4c 81       	ldd	r20, Y+4	; 0x04
    1c02:	5d 81       	ldd	r21, Y+5	; 0x05
    1c04:	41 30       	cpi	r20, 0x01	; 1
    1c06:	51 05       	cpc	r21, r1
    1c08:	79 f1       	breq	.+94     	; 0x1c68 <GPIO_readPin+0x96>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	82 30       	cpi	r24, 0x02	; 2
    1c10:	91 05       	cpc	r25, r1
    1c12:	34 f4       	brge	.+12     	; 0x1c20 <GPIO_readPin+0x4e>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	21 15       	cp	r18, r1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	69 f0       	breq	.+26     	; 0x1c38 <GPIO_readPin+0x66>
    1c1e:	6b c0       	rjmp	.+214    	; 0x1cf6 <GPIO_readPin+0x124>
    1c20:	4c 81       	ldd	r20, Y+4	; 0x04
    1c22:	5d 81       	ldd	r21, Y+5	; 0x05
    1c24:	42 30       	cpi	r20, 0x02	; 2
    1c26:	51 05       	cpc	r21, r1
    1c28:	b9 f1       	breq	.+110    	; 0x1c98 <GPIO_readPin+0xc6>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	91 05       	cpc	r25, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <GPIO_readPin+0x64>
    1c34:	49 c0       	rjmp	.+146    	; 0x1cc8 <GPIO_readPin+0xf6>
    1c36:	5f c0       	rjmp	.+190    	; 0x1cf6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c38:	e9 e3       	ldi	r30, 0x39	; 57
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a9 01       	movw	r20, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GPIO_readPin+0x7e>
    1c4c:	55 95       	asr	r21
    1c4e:	47 95       	ror	r20
    1c50:	8a 95       	dec	r24
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <GPIO_readPin+0x7a>
    1c54:	ca 01       	movw	r24, r20
    1c56:	81 70       	andi	r24, 0x01	; 1
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	88 23       	and	r24, r24
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	49 c0       	rjmp	.+146    	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c64:	19 82       	std	Y+1, r1	; 0x01
    1c66:	47 c0       	rjmp	.+142    	; 0x1cf6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c68:	e6 e3       	ldi	r30, 0x36	; 54
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a9 01       	movw	r20, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_readPin+0xae>
    1c7c:	55 95       	asr	r21
    1c7e:	47 95       	ror	r20
    1c80:	8a 95       	dec	r24
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_readPin+0xaa>
    1c84:	ca 01       	movw	r24, r20
    1c86:	81 70       	andi	r24, 0x01	; 1
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	88 23       	and	r24, r24
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	31 c0       	rjmp	.+98     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c94:	19 82       	std	Y+1, r1	; 0x01
    1c96:	2f c0       	rjmp	.+94     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c98:	e3 e3       	ldi	r30, 0x33	; 51
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a9 01       	movw	r20, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <GPIO_readPin+0xde>
    1cac:	55 95       	asr	r21
    1cae:	47 95       	ror	r20
    1cb0:	8a 95       	dec	r24
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <GPIO_readPin+0xda>
    1cb4:	ca 01       	movw	r24, r20
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	90 70       	andi	r25, 0x00	; 0
    1cba:	88 23       	and	r24, r24
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	19 c0       	rjmp	.+50     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1cc8:	e0 e3       	ldi	r30, 0x30	; 48
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a9 01       	movw	r20, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <GPIO_readPin+0x10e>
    1cdc:	55 95       	asr	r21
    1cde:	47 95       	ror	r20
    1ce0:	8a 95       	dec	r24
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <GPIO_readPin+0x10a>
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	81 70       	andi	r24, 0x01	; 1
    1ce8:	90 70       	andi	r25, 0x00	; 0
    1cea:	88 23       	and	r24, r24
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <GPIO_setupPortDirection+0x6>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <GPIO_setupPortDirection+0x8>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	84 30       	cpi	r24, 0x04	; 4
    1d1c:	90 f5       	brcc	.+100    	; 0x1d82 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3c 83       	std	Y+4, r19	; 0x04
    1d26:	2b 83       	std	Y+3, r18	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	d1 f0       	breq	.+52     	; 0x1d66 <GPIO_setupPortDirection+0x5e>
    1d32:	2b 81       	ldd	r18, Y+3	; 0x03
    1d34:	3c 81       	ldd	r19, Y+4	; 0x04
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <GPIO_setupPortDirection+0x3e>
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	61 f0       	breq	.+24     	; 0x1d5c <GPIO_setupPortDirection+0x54>
    1d44:	1e c0       	rjmp	.+60     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
    1d46:	2b 81       	ldd	r18, Y+3	; 0x03
    1d48:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	81 f0       	breq	.+32     	; 0x1d70 <GPIO_setupPortDirection+0x68>
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <GPIO_setupPortDirection+0x72>
    1d5a:	13 c0       	rjmp	.+38     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d5c:	ea e3       	ldi	r30, 0x3A	; 58
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	80 83       	st	Z, r24
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d66:	e7 e3       	ldi	r30, 0x37	; 55
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	80 83       	st	Z, r24
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d70:	e4 e3       	ldi	r30, 0x34	; 52
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	80 83       	st	Z, r24
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d7a:	e1 e3       	ldi	r30, 0x31	; 49
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <GPIO_writePort+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <GPIO_writePort+0x8>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	90 f5       	brcc	.+100    	; 0x1e0a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3c 83       	std	Y+4, r19	; 0x04
    1dae:	2b 83       	std	Y+3, r18	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	d1 f0       	breq	.+52     	; 0x1dee <GPIO_writePort+0x5e>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <GPIO_writePort+0x3e>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <GPIO_writePort+0x54>
    1dcc:	1e c0       	rjmp	.+60     	; 0x1e0a <GPIO_writePort+0x7a>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <GPIO_writePort+0x68>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	83 30       	cpi	r24, 0x03	; 3
    1dde:	91 05       	cpc	r25, r1
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <GPIO_writePort+0x72>
    1de2:	13 c0       	rjmp	.+38     	; 0x1e0a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1de4:	eb e3       	ldi	r30, 0x3B	; 59
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	80 83       	st	Z, r24
    1dec:	0e c0       	rjmp	.+28     	; 0x1e0a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dee:	e8 e3       	ldi	r30, 0x38	; 56
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	09 c0       	rjmp	.+18     	; 0x1e0a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1df8:	e5 e3       	ldi	r30, 0x35	; 53
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
    1e00:	04 c0       	rjmp	.+8      	; 0x1e0a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e02:	e2 e3       	ldi	r30, 0x32	; 50
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_readPort+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_readPort+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e26:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	90 f5       	brcc	.+100    	; 0x1e92 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3c 83       	std	Y+4, r19	; 0x04
    1e36:	2b 83       	std	Y+3, r18	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	d1 f0       	breq	.+52     	; 0x1e76 <GPIO_readPort+0x5e>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <GPIO_readPort+0x3e>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <GPIO_readPort+0x54>
    1e54:	1e c0       	rjmp	.+60     	; 0x1e92 <GPIO_readPort+0x7a>
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	22 30       	cpi	r18, 0x02	; 2
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	81 f0       	breq	.+32     	; 0x1e80 <GPIO_readPort+0x68>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	83 30       	cpi	r24, 0x03	; 3
    1e66:	91 05       	cpc	r25, r1
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <GPIO_readPort+0x72>
    1e6a:	13 c0       	rjmp	.+38     	; 0x1e92 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e6c:	e9 e3       	ldi	r30, 0x39	; 57
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e76:	e6 e3       	ldi	r30, 0x36	; 54
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e80:	e3 e3       	ldi	r30, 0x33	; 51
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e8a:	e0 e3       	ldi	r30, 0x30	; 48
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <timerCounter>:
char received_pass[10];
char current_pass[10];
static volatile uint8 tick = 0;

void timerCounter(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1eaa:	80 91 ae 00 	lds	r24, 0x00AE
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	80 93 ae 00 	sts	0x00AE, r24
}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <myOwnDelay>:

void myOwnDelay(uint16 numofoverflows)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	99 87       	std	Y+9, r25	; 0x09
    1ed0:	88 87       	std	Y+8, r24	; 0x08
	tick=0;
    1ed2:	10 92 ae 00 	sts	0x00AE, r1
	/*
	 * T overflow = 65.5 ms
	 * so 15 overflows to count 1 sec
	 */
	uint8 num=numofoverflows*15;
    1ed6:	28 85       	ldd	r18, Y+8	; 0x08
    1ed8:	39 85       	ldd	r19, Y+9	; 0x09
    1eda:	c9 01       	movw	r24, r18
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	22 0f       	add	r18, r18
    1eec:	33 1f       	adc	r19, r19
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	89 83       	std	Y+1, r24	; 0x01

	Timer1_ConfigType timer_Configuration = {0, 0, prescalar_8, normal};
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	02 96       	adiw	r24, 0x02	; 2
    1ef8:	9b 87       	std	Y+11, r25	; 0x0b
    1efa:	8a 87       	std	Y+10, r24	; 0x0a
    1efc:	e7 ea       	ldi	r30, 0xA7	; 167
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	fd 87       	std	Y+13, r31	; 0x0d
    1f02:	ec 87       	std	Y+12, r30	; 0x0c
    1f04:	f6 e0       	ldi	r31, 0x06	; 6
    1f06:	fe 87       	std	Y+14, r31	; 0x0e
    1f08:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f0a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f0c:	00 80       	ld	r0, Z
    1f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	9d 87       	std	Y+13, r25	; 0x0d
    1f16:	8c 87       	std	Y+12, r24	; 0x0c
    1f18:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f1a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f1c:	00 82       	st	Z, r0
    1f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	9b 87       	std	Y+11, r25	; 0x0b
    1f26:	8a 87       	std	Y+10, r24	; 0x0a
    1f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2a:	91 50       	subi	r25, 0x01	; 1
    1f2c:	9e 87       	std	Y+14, r25	; 0x0e
    1f2e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f30:	ee 23       	and	r30, r30
    1f32:	51 f7       	brne	.-44     	; 0x1f08 <myOwnDelay+0x4e>
	Timer1_init(&timer_Configuration);
    1f34:	ce 01       	movw	r24, r28
    1f36:	02 96       	adiw	r24, 0x02	; 2
    1f38:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <Timer1_init>
	/* Used call back which call in ISR for time1*/
	Timer1_setCallBack(timerCounter);
    1f3c:	81 e5       	ldi	r24, 0x51	; 81
    1f3e:	9f e0       	ldi	r25, 0x0F	; 15
    1f40:	0e 94 07 13 	call	0x260e	; 0x260e <Timer1_setCallBack>
	/* Delay*/
	while(tick != num);
    1f44:	90 91 ae 00 	lds	r25, 0x00AE
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	98 17       	cp	r25, r24
    1f4c:	d9 f7       	brne	.-10     	; 0x1f44 <myOwnDelay+0x8a>
	/* Deinitialization of timer1*/
	Timer1_deInit();
    1f4e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <Timer1_deInit>

}
    1f52:	2e 96       	adiw	r28, 0x0e	; 14
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <check_pass>:

void check_pass(void)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	EEPROM_readByte(0x0311, &val);
    1f6c:	2f ec       	ldi	r18, 0xCF	; 207
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e1       	ldi	r24, 0x11	; 17
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	b9 01       	movw	r22, r18
    1f76:	0e 94 b3 0b 	call	0x1766	; 0x1766 <EEPROM_readByte>
	UART_sendByte(MC2_READY);
    1f7a:	80 e1       	ldi	r24, 0x10	; 16
    1f7c:	0e 94 bc 14 	call	0x2978	; 0x2978 <UART_sendByte>
	UART_receiveString(received_pass);
    1f80:	81 eb       	ldi	r24, 0xB1	; 177
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <UART_receiveString>
	itoa(val, current_pass, 10);
    1f88:	80 91 cf 00 	lds	r24, 0x00CF
    1f8c:	88 2f       	mov	r24, r24
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	21 ed       	ldi	r18, 0xD1	; 209
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	b9 01       	movw	r22, r18
    1f96:	4a e0       	ldi	r20, 0x0A	; 10
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <itoa>

	if(strcmp(current_pass,received_pass) == 0)
    1f9e:	81 ed       	ldi	r24, 0xD1	; 209
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	21 eb       	ldi	r18, 0xB1	; 177
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strcmp>
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	29 f4       	brne	.+10     	; 0x1fba <check_pass+0x56>
	{

		UART_sendString("matched#");
    1fb0:	80 e6       	ldi	r24, 0x60	; 96
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <UART_sendString>
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <check_pass+0x5e>

	}else
	{
		UART_sendString("unmatched#");
    1fba:	89 e6       	ldi	r24, 0x69	; 105
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <UART_sendString>
	}
	UART_sendByte(MC2_READY);
    1fc2:	80 e1       	ldi	r24, 0x10	; 16
    1fc4:	0e 94 bc 14 	call	0x2978	; 0x2978 <UART_sendByte>
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <receivesetpass>:

void receivesetpass(void)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	2e 97       	sbiw	r28, 0x0e	; 14
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
	UART_receiveString(password1);
    1fe2:	8b ed       	ldi	r24, 0xDB	; 219
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <UART_receiveString>
	UART_receiveString(password2);
    1fea:	86 ec       	ldi	r24, 0xC6	; 198
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <UART_receiveString>

	if(strcmp(password1,password2) == 0)
    1ff2:	8b ed       	ldi	r24, 0xDB	; 219
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	26 ec       	ldi	r18, 0xC6	; 198
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	b9 01       	movw	r22, r18
    1ffc:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strcmp>
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	09 f0       	breq	.+2      	; 0x2006 <receivesetpass+0x38>
    2004:	89 c0       	rjmp	.+274    	; 0x2118 <receivesetpass+0x14a>
	{
		pass=atoi(password1);
    2006:	8b ed       	ldi	r24, 0xDB	; 219
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <atoi>
    200e:	80 93 c5 00 	sts	0x00C5, r24
		EEPROM_writeByte(0x0311, pass);
    2012:	80 91 c5 00 	lds	r24, 0x00C5
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e1       	ldi	r24, 0x11	; 17
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	b9 01       	movw	r22, r18
    2020:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <EEPROM_writeByte>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e2       	ldi	r26, 0x20	; 32
    202a:	b1 e4       	ldi	r27, 0x41	; 65
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	ad 87       	std	Y+13, r26	; 0x0d
    2032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <receivesetpass+0xa8>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <receivesetpass+0x126>
	else if (__tmp > 65535)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <receivesetpass+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <receivesetpass+0x108>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <receivesetpass+0xf6>
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <receivesetpass+0xea>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <receivesetpass+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <receivesetpass+0x132>
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		//EEPROM_readByte(0x0311, &val);
		UART_sendByte(MC2_READY);
    2108:	80 e1       	ldi	r24, 0x10	; 16
    210a:	0e 94 bc 14 	call	0x2978	; 0x2978 <UART_sendByte>
		UART_sendString("matched#");
    210e:	80 e6       	ldi	r24, 0x60	; 96
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <UART_sendString>
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <receivesetpass+0x152>
	}else
	{
		UART_sendString("no_match#");
    2118:	84 e7       	ldi	r24, 0x74	; 116
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <UART_sendString>
	}
}
    2120:	2e 96       	adiw	r28, 0x0e	; 14
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <main>:

int main(void)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <main+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <main+0x8>
    213a:	00 d0       	rcall	.+0      	; 0x213c <main+0xa>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);
    2140:	af e5       	ldi	r26, 0x5F	; 95
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ef e5       	ldi	r30, 0x5F	; 95
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 68       	ori	r24, 0x80	; 128
    214c:	8c 93       	st	X, r24
	UART_ConfigType properties={eightbit,Disabled,one_bit,bd9600};
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	1a 82       	std	Y+2, r1	; 0x02
    2154:	1b 82       	std	Y+3, r1	; 0x03
    2156:	1c 82       	std	Y+4, r1	; 0x04
	UART_init(&properties);
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	0e 94 a8 13 	call	0x2750	; 0x2750 <UART_init>
	TWI_ConfigType twi_configurations={0x02,0x04};
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	84 e0       	ldi	r24, 0x04	; 4
    2166:	8e 83       	std	Y+6, r24	; 0x06
	TWI_init(&twi_configurations);
    2168:	ce 01       	movw	r24, r28
    216a:	05 96       	adiw	r24, 0x05	; 5
    216c:	0e 94 19 13 	call	0x2632	; 0x2632 <TWI_init>
	lcd_init();
    2170:	0e 94 81 09 	call	0x1302	; 0x1302 <lcd_init>
	BUZZER_init();
    2174:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <BUZZER_init>
	DcMotor_init();
    2178:	0e 94 1f 0b 	call	0x163e	; 0x163e <DcMotor_init>

	UART_sendByte(MC2_READY);
    217c:	80 e1       	ldi	r24, 0x10	; 16
    217e:	0e 94 bc 14 	call	0x2978	; 0x2978 <UART_sendByte>



	while(1)
	{
		UART_receiveString(p);
    2182:	8b eb       	ldi	r24, 0xBB	; 187
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <UART_receiveString>
		if(strcmp(p,"setpass") == 0)
    218a:	8b eb       	ldi	r24, 0xBB	; 187
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	2e e7       	ldi	r18, 0x7E	; 126
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	b9 01       	movw	r22, r18
    2194:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strcmp>
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	19 f4       	brne	.+6      	; 0x21a2 <main+0x70>
		{
			receivesetpass();
    219c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <receivesetpass>
    21a0:	f0 cf       	rjmp	.-32     	; 0x2182 <main+0x50>
		}
		else if(strcmp(p,"checkpass") == 0)
    21a2:	8b eb       	ldi	r24, 0xBB	; 187
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	26 e8       	ldi	r18, 0x86	; 134
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	b9 01       	movw	r22, r18
    21ac:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strcmp>
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	19 f4       	brne	.+6      	; 0x21ba <main+0x88>
		{
			check_pass();
    21b4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <check_pass>
    21b8:	e4 cf       	rjmp	.-56     	; 0x2182 <main+0x50>

		}else if(strcmp(p,"error") == 0)
    21ba:	8b eb       	ldi	r24, 0xBB	; 187
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	20 e9       	ldi	r18, 0x90	; 144
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	b9 01       	movw	r22, r18
    21c4:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strcmp>
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	49 f4       	brne	.+18     	; 0x21de <main+0xac>
		{
			BUZZER_On();
    21cc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BUZZER_On>
			myOwnDelay(60);
    21d0:	8c e3       	ldi	r24, 0x3C	; 60
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <myOwnDelay>
			BUZZER_Off();
    21d8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <BUZZER_Off>
    21dc:	d2 cf       	rjmp	.-92     	; 0x2182 <main+0x50>
		}else if(strcmp(p,"opendoor") == 0)
    21de:	8b eb       	ldi	r24, 0xBB	; 187
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	26 e9       	ldi	r18, 0x96	; 150
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	b9 01       	movw	r22, r18
    21e8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strcmp>
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	49 f6       	brne	.-110    	; 0x2182 <main+0x50>
		{
			DcMotor_Rotate(Clock_Wise ,255);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	6f ef       	ldi	r22, 0xFF	; 255
    21f4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DcMotor_Rotate>
			myOwnDelay(15);
    21f8:	8f e0       	ldi	r24, 0x0F	; 15
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <myOwnDelay>
			DcMotor_Rotate(Stop ,0);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DcMotor_Rotate>
			myOwnDelay(3);
    2208:	83 e0       	ldi	r24, 0x03	; 3
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <myOwnDelay>
			DcMotor_Rotate(Anti_Clock_Wise ,255);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	6f ef       	ldi	r22, 0xFF	; 255
    2214:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DcMotor_Rotate>
			myOwnDelay(15);
    2218:	8f e0       	ldi	r24, 0x0F	; 15
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <myOwnDelay>
			DcMotor_Rotate(Stop ,0);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DcMotor_Rotate>
    2228:	ac cf       	rjmp	.-168    	; 0x2182 <main+0x50>

0000222a <__vector_7>:
#include "common_macros.h"
#define CPU_FREQ 8000000
static volatile void (*timer1CB)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    222a:	1f 92       	push	r1
    222c:	0f 92       	push	r0
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	0f 92       	push	r0
    2232:	11 24       	eor	r1, r1
    2234:	2f 93       	push	r18
    2236:	3f 93       	push	r19
    2238:	4f 93       	push	r20
    223a:	5f 93       	push	r21
    223c:	6f 93       	push	r22
    223e:	7f 93       	push	r23
    2240:	8f 93       	push	r24
    2242:	9f 93       	push	r25
    2244:	af 93       	push	r26
    2246:	bf 93       	push	r27
    2248:	ef 93       	push	r30
    224a:	ff 93       	push	r31
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	if(timer1CB != NULL_PTR)
    2254:	80 91 af 00 	lds	r24, 0x00AF
    2258:	90 91 b0 00 	lds	r25, 0x00B0
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	29 f0       	breq	.+10     	; 0x226a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1CB)();
    2260:	e0 91 af 00 	lds	r30, 0x00AF
    2264:	f0 91 b0 00 	lds	r31, 0x00B0
    2268:	09 95       	icall
	}
}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	ff 91       	pop	r31
    2270:	ef 91       	pop	r30
    2272:	bf 91       	pop	r27
    2274:	af 91       	pop	r26
    2276:	9f 91       	pop	r25
    2278:	8f 91       	pop	r24
    227a:	7f 91       	pop	r23
    227c:	6f 91       	pop	r22
    227e:	5f 91       	pop	r21
    2280:	4f 91       	pop	r20
    2282:	3f 91       	pop	r19
    2284:	2f 91       	pop	r18
    2286:	0f 90       	pop	r0
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	0f 90       	pop	r0
    228c:	1f 90       	pop	r1
    228e:	18 95       	reti

00002290 <__vector_9>:
ISR (TIMER1_OVF_vect){
    2290:	1f 92       	push	r1
    2292:	0f 92       	push	r0
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	0f 92       	push	r0
    2298:	11 24       	eor	r1, r1
    229a:	2f 93       	push	r18
    229c:	3f 93       	push	r19
    229e:	4f 93       	push	r20
    22a0:	5f 93       	push	r21
    22a2:	6f 93       	push	r22
    22a4:	7f 93       	push	r23
    22a6:	8f 93       	push	r24
    22a8:	9f 93       	push	r25
    22aa:	af 93       	push	r26
    22ac:	bf 93       	push	r27
    22ae:	ef 93       	push	r30
    22b0:	ff 93       	push	r31
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	if(timer1CB!=NULL_PTR){
    22ba:	80 91 af 00 	lds	r24, 0x00AF
    22be:	90 91 b0 00 	lds	r25, 0x00B0
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <__vector_9+0x40>

		(*timer1CB)();
    22c6:	e0 91 af 00 	lds	r30, 0x00AF
    22ca:	f0 91 b0 00 	lds	r31, 0x00B0
    22ce:	09 95       	icall

	}
}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	ff 91       	pop	r31
    22d6:	ef 91       	pop	r30
    22d8:	bf 91       	pop	r27
    22da:	af 91       	pop	r26
    22dc:	9f 91       	pop	r25
    22de:	8f 91       	pop	r24
    22e0:	7f 91       	pop	r23
    22e2:	6f 91       	pop	r22
    22e4:	5f 91       	pop	r21
    22e6:	4f 91       	pop	r20
    22e8:	3f 91       	pop	r19
    22ea:	2f 91       	pop	r18
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	28 97       	sbiw	r28, 0x08	; 8
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;    // Set Timer initial value to 0
    2312:	ac e4       	ldi	r26, 0x4C	; 76
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e9 81       	ldd	r30, Y+1	; 0x01
    2318:	fa 81       	ldd	r31, Y+2	; 0x02
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	11 96       	adiw	r26, 0x01	; 1
    2320:	9c 93       	st	X, r25
    2322:	8e 93       	st	-X, r24

	/*
	 * Selecting precaler
	 */
	switch(Config_Ptr->prescaler)
    2324:	e9 81       	ldd	r30, Y+1	; 0x01
    2326:	fa 81       	ldd	r31, Y+2	; 0x02
    2328:	84 81       	ldd	r24, Z+4	; 0x04
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	38 87       	std	Y+8, r19	; 0x08
    2330:	2f 83       	std	Y+7, r18	; 0x07
    2332:	8f 81       	ldd	r24, Y+7	; 0x07
    2334:	98 85       	ldd	r25, Y+8	; 0x08
    2336:	83 30       	cpi	r24, 0x03	; 3
    2338:	91 05       	cpc	r25, r1
    233a:	b9 f1       	breq	.+110    	; 0x23aa <Timer1_init+0xb4>
    233c:	ef 81       	ldd	r30, Y+7	; 0x07
    233e:	f8 85       	ldd	r31, Y+8	; 0x08
    2340:	e4 30       	cpi	r30, 0x04	; 4
    2342:	f1 05       	cpc	r31, r1
    2344:	7c f4       	brge	.+30     	; 0x2364 <Timer1_init+0x6e>
    2346:	2f 81       	ldd	r18, Y+7	; 0x07
    2348:	38 85       	ldd	r19, Y+8	; 0x08
    234a:	21 30       	cpi	r18, 0x01	; 1
    234c:	31 05       	cpc	r19, r1
    234e:	19 f1       	breq	.+70     	; 0x2396 <Timer1_init+0xa0>
    2350:	8f 81       	ldd	r24, Y+7	; 0x07
    2352:	98 85       	ldd	r25, Y+8	; 0x08
    2354:	82 30       	cpi	r24, 0x02	; 2
    2356:	91 05       	cpc	r25, r1
    2358:	1c f5       	brge	.+70     	; 0x23a0 <Timer1_init+0xaa>
    235a:	ef 81       	ldd	r30, Y+7	; 0x07
    235c:	f8 85       	ldd	r31, Y+8	; 0x08
    235e:	30 97       	sbiw	r30, 0x00	; 0
    2360:	b1 f0       	breq	.+44     	; 0x238e <Timer1_init+0x98>
    2362:	3b c0       	rjmp	.+118    	; 0x23da <Timer1_init+0xe4>
    2364:	2f 81       	ldd	r18, Y+7	; 0x07
    2366:	38 85       	ldd	r19, Y+8	; 0x08
    2368:	25 30       	cpi	r18, 0x05	; 5
    236a:	31 05       	cpc	r19, r1
    236c:	41 f1       	breq	.+80     	; 0x23be <Timer1_init+0xc8>
    236e:	8f 81       	ldd	r24, Y+7	; 0x07
    2370:	98 85       	ldd	r25, Y+8	; 0x08
    2372:	85 30       	cpi	r24, 0x05	; 5
    2374:	91 05       	cpc	r25, r1
    2376:	f4 f0       	brlt	.+60     	; 0x23b4 <Timer1_init+0xbe>
    2378:	ef 81       	ldd	r30, Y+7	; 0x07
    237a:	f8 85       	ldd	r31, Y+8	; 0x08
    237c:	e6 30       	cpi	r30, 0x06	; 6
    237e:	f1 05       	cpc	r31, r1
    2380:	19 f1       	breq	.+70     	; 0x23c8 <Timer1_init+0xd2>
    2382:	2f 81       	ldd	r18, Y+7	; 0x07
    2384:	38 85       	ldd	r19, Y+8	; 0x08
    2386:	27 30       	cpi	r18, 0x07	; 7
    2388:	31 05       	cpc	r19, r1
    238a:	19 f1       	breq	.+70     	; 0x23d2 <Timer1_init+0xdc>
    238c:	26 c0       	rjmp	.+76     	; 0x23da <Timer1_init+0xe4>
	{
	case 0:
		TCCR1B=0;
    238e:	ee e4       	ldi	r30, 0x4E	; 78
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	10 82       	st	Z, r1
    2394:	22 c0       	rjmp	.+68     	; 0x23da <Timer1_init+0xe4>
		break;
	case 1:
		TCCR1B=(1<<CS10);
    2396:	ee e4       	ldi	r30, 0x4E	; 78
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 83       	st	Z, r24
    239e:	1d c0       	rjmp	.+58     	; 0x23da <Timer1_init+0xe4>
		break;
	case 2:
		TCCR1B=(1<<CS11);
    23a0:	ee e4       	ldi	r30, 0x4E	; 78
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	80 83       	st	Z, r24
    23a8:	18 c0       	rjmp	.+48     	; 0x23da <Timer1_init+0xe4>
		break;
	case 3:
		TCCR1B=(1<<CS10) | (1<<CS11);
    23aa:	ee e4       	ldi	r30, 0x4E	; 78
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	80 83       	st	Z, r24
    23b2:	13 c0       	rjmp	.+38     	; 0x23da <Timer1_init+0xe4>
		break;
	case 4:
		TCCR1B=(1<<CS12);
    23b4:	ee e4       	ldi	r30, 0x4E	; 78
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	84 e0       	ldi	r24, 0x04	; 4
    23ba:	80 83       	st	Z, r24
    23bc:	0e c0       	rjmp	.+28     	; 0x23da <Timer1_init+0xe4>
		break;
	case 5:
		TCCR1B=(1<<CS10) | (1<<CS12);
    23be:	ee e4       	ldi	r30, 0x4E	; 78
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	85 e0       	ldi	r24, 0x05	; 5
    23c4:	80 83       	st	Z, r24
    23c6:	09 c0       	rjmp	.+18     	; 0x23da <Timer1_init+0xe4>
		break;
	case 6:
		TCCR1B=(1<<CS11) | (1<<CS12);
    23c8:	ee e4       	ldi	r30, 0x4E	; 78
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	86 e0       	ldi	r24, 0x06	; 6
    23ce:	80 83       	st	Z, r24
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <Timer1_init+0xe4>
		break;
	case 7:
		TCCR1B=(1<<CS10) | (1<<CS11) | (1<<CS12);
    23d2:	ee e4       	ldi	r30, 0x4E	; 78
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	87 e0       	ldi	r24, 0x07	; 7
    23d8:	80 83       	st	Z, r24
		break;

	}

	switch(Config_Ptr->mode)
    23da:	e9 81       	ldd	r30, Y+1	; 0x01
    23dc:	fa 81       	ldd	r31, Y+2	; 0x02
    23de:	85 81       	ldd	r24, Z+5	; 0x05
    23e0:	e8 2f       	mov	r30, r24
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	fe 83       	std	Y+6, r31	; 0x06
    23e6:	ed 83       	std	Y+5, r30	; 0x05
    23e8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ea:	3e 81       	ldd	r19, Y+6	; 0x06
    23ec:	21 15       	cp	r18, r1
    23ee:	31 05       	cpc	r19, r1
    23f0:	31 f0       	breq	.+12     	; 0x23fe <Timer1_init+0x108>
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	11 f1       	breq	.+68     	; 0x2440 <Timer1_init+0x14a>
    23fc:	e9 c0       	rjmp	.+466    	; 0x25d0 <Timer1_init+0x2da>
	{

	case 0:

		CLEAR_BIT(TCCR1A,WGM13);
    23fe:	af e4       	ldi	r26, 0x4F	; 79
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	ef e4       	ldi	r30, 0x4F	; 79
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8f 7e       	andi	r24, 0xEF	; 239
    240a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM12);
    240c:	af e4       	ldi	r26, 0x4F	; 79
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ef e4       	ldi	r30, 0x4F	; 79
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	87 7f       	andi	r24, 0xF7	; 247
    2418:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    241a:	af e4       	ldi	r26, 0x4F	; 79
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	ef e4       	ldi	r30, 0x4F	; 79
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8d 7f       	andi	r24, 0xFD	; 253
    2426:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM10);
    2428:	af e4       	ldi	r26, 0x4F	; 79
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	ef e4       	ldi	r30, 0x4F	; 79
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	8e 7f       	andi	r24, 0xFE	; 254
    2434:	8c 93       	st	X, r24

		TIMSK=(1<<TOIE1); //Overflow interrupt enable
    2436:	e9 e5       	ldi	r30, 0x59	; 89
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	84 e0       	ldi	r24, 0x04	; 4
    243c:	80 83       	st	Z, r24
    243e:	c8 c0       	rjmp	.+400    	; 0x25d0 <Timer1_init+0x2da>
		break;

	case 1:
		CLEAR_BIT(TCCR1A,WGM13);
    2440:	af e4       	ldi	r26, 0x4F	; 79
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ef e4       	ldi	r30, 0x4F	; 79
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	8f 7e       	andi	r24, 0xEF	; 239
    244c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM12);
    244e:	af e4       	ldi	r26, 0x4F	; 79
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ef e4       	ldi	r30, 0x4F	; 79
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	88 60       	ori	r24, 0x08	; 8
    245a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    245c:	af e4       	ldi	r26, 0x4F	; 79
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ef e4       	ldi	r30, 0x4F	; 79
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	8d 7f       	andi	r24, 0xFD	; 253
    2468:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM10);
    246a:	af e4       	ldi	r26, 0x4F	; 79
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ef e4       	ldi	r30, 0x4F	; 79
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8e 7f       	andi	r24, 0xFE	; 254
    2476:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE1A);
    2478:	a9 e5       	ldi	r26, 0x59	; 89
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e9 e5       	ldi	r30, 0x59	; 89
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	80 61       	ori	r24, 0x10	; 16
    2484:	8c 93       	st	X, r24


		switch(Config_Ptr->prescaler)
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	84 81       	ldd	r24, Z+4	; 0x04
    248c:	e8 2f       	mov	r30, r24
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	fc 83       	std	Y+4, r31	; 0x04
    2492:	eb 83       	std	Y+3, r30	; 0x03
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	d1 f1       	breq	.+116    	; 0x2512 <Timer1_init+0x21c>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	83 30       	cpi	r24, 0x03	; 3
    24a4:	91 05       	cpc	r25, r1
    24a6:	5c f4       	brge	.+22     	; 0x24be <Timer1_init+0x1c8>
    24a8:	eb 81       	ldd	r30, Y+3	; 0x03
    24aa:	fc 81       	ldd	r31, Y+4	; 0x04
    24ac:	30 97       	sbiw	r30, 0x00	; 0
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <Timer1_init+0x1bc>
    24b0:	8f c0       	rjmp	.+286    	; 0x25d0 <Timer1_init+0x2da>
    24b2:	2b 81       	ldd	r18, Y+3	; 0x03
    24b4:	3c 81       	ldd	r19, Y+4	; 0x04
    24b6:	21 30       	cpi	r18, 0x01	; 1
    24b8:	31 05       	cpc	r19, r1
    24ba:	99 f0       	breq	.+38     	; 0x24e2 <Timer1_init+0x1ec>
    24bc:	89 c0       	rjmp	.+274    	; 0x25d0 <Timer1_init+0x2da>
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	84 30       	cpi	r24, 0x04	; 4
    24c4:	91 05       	cpc	r25, r1
    24c6:	09 f4       	brne	.+2      	; 0x24ca <Timer1_init+0x1d4>
    24c8:	54 c0       	rjmp	.+168    	; 0x2572 <Timer1_init+0x27c>
    24ca:	eb 81       	ldd	r30, Y+3	; 0x03
    24cc:	fc 81       	ldd	r31, Y+4	; 0x04
    24ce:	e4 30       	cpi	r30, 0x04	; 4
    24d0:	f1 05       	cpc	r31, r1
    24d2:	bc f1       	brlt	.+110    	; 0x2542 <Timer1_init+0x24c>
    24d4:	2b 81       	ldd	r18, Y+3	; 0x03
    24d6:	3c 81       	ldd	r19, Y+4	; 0x04
    24d8:	25 30       	cpi	r18, 0x05	; 5
    24da:	31 05       	cpc	r19, r1
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <Timer1_init+0x1ea>
    24de:	61 c0       	rjmp	.+194    	; 0x25a2 <Timer1_init+0x2ac>
    24e0:	77 c0       	rjmp	.+238    	; 0x25d0 <Timer1_init+0x2da>
		{
		case no_clock:
			break;

		case prescalar_1:
			OCR1A = ( (CPU_FREQ / 1) * (Config_Ptr ->compare_value) - 1);
    24e2:	0a e4       	ldi	r16, 0x4A	; 74
    24e4:	10 e0       	ldi	r17, 0x00	; 0
    24e6:	e9 81       	ldd	r30, Y+1	; 0x01
    24e8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	cc 01       	movw	r24, r24
    24f0:	a0 e0       	ldi	r26, 0x00	; 0
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	32 e1       	ldi	r19, 0x12	; 18
    24f8:	4a e7       	ldi	r20, 0x7A	; 122
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsi3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f8 01       	movw	r30, r16
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	5f c0       	rjmp	.+190    	; 0x25d0 <Timer1_init+0x2da>
			break;

		case prescalar_8:
			OCR1A = ( (CPU_FREQ / 8) * (Config_Ptr ->compare_value) - 1);
    2512:	0a e4       	ldi	r16, 0x4A	; 74
    2514:	10 e0       	ldi	r17, 0x00	; 0
    2516:	e9 81       	ldd	r30, Y+1	; 0x01
    2518:	fa 81       	ldd	r31, Y+2	; 0x02
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	cc 01       	movw	r24, r24
    2520:	a0 e0       	ldi	r26, 0x00	; 0
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	20 e4       	ldi	r18, 0x40	; 64
    2526:	32 e4       	ldi	r19, 0x42	; 66
    2528:	4f e0       	ldi	r20, 0x0F	; 15
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsi3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f8 01       	movw	r30, r16
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	80 83       	st	Z, r24
    2540:	47 c0       	rjmp	.+142    	; 0x25d0 <Timer1_init+0x2da>
			break;

		case prescalar_64:
			OCR1A = ( (CPU_FREQ / 64) * (Config_Ptr ->compare_value) - 1);
    2542:	0a e4       	ldi	r16, 0x4A	; 74
    2544:	10 e0       	ldi	r17, 0x00	; 0
    2546:	e9 81       	ldd	r30, Y+1	; 0x01
    2548:	fa 81       	ldd	r31, Y+2	; 0x02
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	cc 01       	movw	r24, r24
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	28 e4       	ldi	r18, 0x48	; 72
    2556:	38 ee       	ldi	r19, 0xE8	; 232
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	50 e0       	ldi	r21, 0x00	; 0
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsi3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f8 01       	movw	r30, r16
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	2f c0       	rjmp	.+94     	; 0x25d0 <Timer1_init+0x2da>
			break;

		case prescalar_256:
			OCR1A = ( (CPU_FREQ / 256) * (Config_Ptr ->compare_value) - 1);
    2572:	0a e4       	ldi	r16, 0x4A	; 74
    2574:	10 e0       	ldi	r17, 0x00	; 0
    2576:	e9 81       	ldd	r30, Y+1	; 0x01
    2578:	fa 81       	ldd	r31, Y+2	; 0x02
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	cc 01       	movw	r24, r24
    2580:	a0 e0       	ldi	r26, 0x00	; 0
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	22 e1       	ldi	r18, 0x12	; 18
    2586:	3a e7       	ldi	r19, 0x7A	; 122
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsi3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f8 01       	movw	r30, r16
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	17 c0       	rjmp	.+46     	; 0x25d0 <Timer1_init+0x2da>
			break;

		case prescalar_1024:
			OCR1A = ( (CPU_FREQ / 1024) * (Config_Ptr ->compare_value) - 1);
    25a2:	0a e4       	ldi	r16, 0x4A	; 74
    25a4:	10 e0       	ldi	r17, 0x00	; 0
    25a6:	e9 81       	ldd	r30, Y+1	; 0x01
    25a8:	fa 81       	ldd	r31, Y+2	; 0x02
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	cc 01       	movw	r24, r24
    25b0:	a0 e0       	ldi	r26, 0x00	; 0
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	24 e8       	ldi	r18, 0x84	; 132
    25b6:	3e e1       	ldi	r19, 0x1E	; 30
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__mulsi3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
		case Ext_on_rising:
			break;
		}
		break;
	}
}
    25d0:	28 96       	adiw	r28, 0x08	; 8
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <Timer1_deInit>:

void Timer1_deInit(void)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer1
	TCCR1A = 0;  // Clear all bits in TCCR1A
    25ee:	ef e4       	ldi	r30, 0x4F	; 79
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	10 82       	st	Z, r1
	TCCR1B = 0;  // Clear all bits in TCCR1B
    25f4:	ee e4       	ldi	r30, 0x4E	; 78
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	10 82       	st	Z, r1
	TIMSK &= ~(1 << OCIE1A); // Disable Timer1 compare match interrupt
    25fa:	a9 e5       	ldi	r26, 0x59	; 89
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e9 e5       	ldi	r30, 0x59	; 89
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8f 7e       	andi	r24, 0xEF	; 239
    2606:	8c 93       	st	X, r24



}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <Timer1_setCallBack+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
	timer1CB = a_ptr;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	90 93 b0 00 	sts	0x00B0, r25
    2624:	80 93 af 00 	sts	0x00AF, r24
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <TWI_init+0x6>
    2638:	0f 92       	push	r0
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
	/* Select Baud Rate*/
	TWBR = Config_Ptr->BAUD_RATE;
    2642:	a0 e2       	ldi	r26, 0x20	; 32
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	80 81       	ld	r24, Z
    264c:	8c 93       	st	X, r24
	TWSR = 0x00;
    264e:	e1 e2       	ldi	r30, 0x21	; 33
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	10 82       	st	Z, r1
	
    /**********************************************************************************
	 * 1.Select address , Note 7-bit address in the seven most significant bits of TWAR
	 * 2.Disable recognition of the general call address
	 **********************************************************************************/
	TWAR = (TWAR & 0x00) | (Config_Ptr->Address << 1);
    2654:	e2 e2       	ldi	r30, 0x22	; 34
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	a2 e2       	ldi	r26, 0x22	; 34
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e9 81       	ldd	r30, Y+1	; 0x01
    2660:	fa 81       	ldd	r31, Y+2	; 0x02
    2662:	81 81       	ldd	r24, Z+1	; 0x01
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	8c 93       	st	X, r24
	
	/* enable TWI */
    TWCR = (1<<TWEN);
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	80 83       	st	Z, r24
}
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <TWI_start>:

void TWI_start(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    268a:	e6 e5       	ldi	r30, 0x56	; 86
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	84 ea       	ldi	r24, 0xA4	; 164
    2690:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2692:	e6 e5       	ldi	r30, 0x56	; 86
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	88 23       	and	r24, r24
    269a:	dc f7       	brge	.-10     	; 0x2692 <TWI_start+0x10>
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <TWI_stop>:

void TWI_stop(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    26aa:	e6 e5       	ldi	r30, 0x56	; 86
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	84 e9       	ldi	r24, 0x94	; 148
    26b0:	80 83       	st	Z, r24
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    26c4:	e3 e2       	ldi	r30, 0x23	; 35
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    26cc:	e6 e5       	ldi	r30, 0x56	; 86
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	84 e8       	ldi	r24, 0x84	; 132
    26d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26d4:	e6 e5       	ldi	r30, 0x56	; 86
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	88 23       	and	r24, r24
    26dc:	dc f7       	brge	.-10     	; 0x26d4 <TWI_writeByte+0x1c>
}
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    26ee:	e6 e5       	ldi	r30, 0x56	; 86
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	84 ec       	ldi	r24, 0xC4	; 196
    26f4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26f6:	e6 e5       	ldi	r30, 0x56	; 86
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	88 23       	and	r24, r24
    26fe:	dc f7       	brge	.-10     	; 0x26f6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2700:	e3 e2       	ldi	r30, 0x23	; 35
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
}
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2714:	e6 e5       	ldi	r30, 0x56	; 86
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	84 e8       	ldi	r24, 0x84	; 132
    271a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    271c:	e6 e5       	ldi	r30, 0x56	; 86
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	88 23       	and	r24, r24
    2724:	dc f7       	brge	.-10     	; 0x271c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2726:	e3 e2       	ldi	r30, 0x23	; 35
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
}
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	0f 92       	push	r0
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    273c:	e1 e2       	ldi	r30, 0x21	; 33
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	88 7f       	andi	r24, 0xF8	; 248
    2744:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2746:	89 81       	ldd	r24, Y+1	; 0x01
}
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	2c 97       	sbiw	r28, 0x0c	; 12
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2768:	1a 82       	std	Y+2, r1	; 0x02
    276a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    276c:	eb e2       	ldi	r30, 0x2B	; 43
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2774:	ea e2       	ldi	r30, 0x2A	; 42
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	88 e1       	ldi	r24, 0x18	; 24
    277a:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * parity bit,bit_data,stop_bit,baud_rate is selected
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    277c:	e0 e4       	ldi	r30, 0x40	; 64
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 e8       	ldi	r24, 0x80	; 128
    2782:	80 83       	st	Z, r24
	switch(Config_Ptr->parity)
    2784:	eb 81       	ldd	r30, Y+3	; 0x03
    2786:	fc 81       	ldd	r31, Y+4	; 0x04
    2788:	81 81       	ldd	r24, Z+1	; 0x01
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	3c 87       	std	Y+12, r19	; 0x0c
    2790:	2b 87       	std	Y+11, r18	; 0x0b
    2792:	8b 85       	ldd	r24, Y+11	; 0x0b
    2794:	9c 85       	ldd	r25, Y+12	; 0x0c
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	91 05       	cpc	r25, r1
    279a:	81 f0       	breq	.+32     	; 0x27bc <UART_init+0x6c>
    279c:	2b 85       	ldd	r18, Y+11	; 0x0b
    279e:	3c 85       	ldd	r19, Y+12	; 0x0c
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	14 f1       	brlt	.+68     	; 0x27ea <UART_init+0x9a>
    27a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	91 05       	cpc	r25, r1
    27ae:	71 f0       	breq	.+28     	; 0x27cc <UART_init+0x7c>
    27b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    27b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    27b4:	23 30       	cpi	r18, 0x03	; 3
    27b6:	31 05       	cpc	r19, r1
    27b8:	89 f0       	breq	.+34     	; 0x27dc <UART_init+0x8c>
    27ba:	17 c0       	rjmp	.+46     	; 0x27ea <UART_init+0x9a>
	{
	case 0:

		break;
	case 1:
		UCSRC |= (1<<UPM0);
    27bc:	a0 e4       	ldi	r26, 0x40	; 64
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e0 e4       	ldi	r30, 0x40	; 64
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	80 61       	ori	r24, 0x10	; 16
    27c8:	8c 93       	st	X, r24
    27ca:	0f c0       	rjmp	.+30     	; 0x27ea <UART_init+0x9a>
		break;
	case 2:
		UCSRC |= (1<<UPM1);
    27cc:	a0 e4       	ldi	r26, 0x40	; 64
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e0 e4       	ldi	r30, 0x40	; 64
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 62       	ori	r24, 0x20	; 32
    27d8:	8c 93       	st	X, r24
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <UART_init+0x9a>
		break;
	case 3:
		UCSRC |= (1<<UPM1) | (1<<UPM0);
    27dc:	a0 e4       	ldi	r26, 0x40	; 64
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e0 e4       	ldi	r30, 0x40	; 64
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	80 63       	ori	r24, 0x30	; 48
    27e8:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr->stop_bit)
    27ea:	eb 81       	ldd	r30, Y+3	; 0x03
    27ec:	fc 81       	ldd	r31, Y+4	; 0x04
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	3a 87       	std	Y+10, r19	; 0x0a
    27f6:	29 87       	std	Y+9, r18	; 0x09
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	61 f0       	breq	.+24     	; 0x2818 <UART_init+0xc8>
    2800:	29 85       	ldd	r18, Y+9	; 0x09
    2802:	3a 85       	ldd	r19, Y+10	; 0x0a
    2804:	21 30       	cpi	r18, 0x01	; 1
    2806:	31 05       	cpc	r19, r1
    2808:	39 f4       	brne	.+14     	; 0x2818 <UART_init+0xc8>
	{
	case 0:
		break;
	case 1:
		UCSRC |= (1<<USBS);
    280a:	a0 e4       	ldi	r26, 0x40	; 64
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e0 e4       	ldi	r30, 0x40	; 64
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	88 60       	ori	r24, 0x08	; 8
    2816:	8c 93       	st	X, r24
		break;
	}


	switch(Config_Ptr->bit_data)
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	80 81       	ld	r24, Z
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	38 87       	std	Y+8, r19	; 0x08
    2824:	2f 83       	std	Y+7, r18	; 0x07
    2826:	8f 81       	ldd	r24, Y+7	; 0x07
    2828:	98 85       	ldd	r25, Y+8	; 0x08
    282a:	83 30       	cpi	r24, 0x03	; 3
    282c:	91 05       	cpc	r25, r1
    282e:	a9 f1       	breq	.+106    	; 0x289a <UART_init+0x14a>
    2830:	2f 81       	ldd	r18, Y+7	; 0x07
    2832:	38 85       	ldd	r19, Y+8	; 0x08
    2834:	24 30       	cpi	r18, 0x04	; 4
    2836:	31 05       	cpc	r19, r1
    2838:	5c f4       	brge	.+22     	; 0x2850 <UART_init+0x100>
    283a:	8f 81       	ldd	r24, Y+7	; 0x07
    283c:	98 85       	ldd	r25, Y+8	; 0x08
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	91 05       	cpc	r25, r1
    2842:	d9 f0       	breq	.+54     	; 0x287a <UART_init+0x12a>
    2844:	2f 81       	ldd	r18, Y+7	; 0x07
    2846:	38 85       	ldd	r19, Y+8	; 0x08
    2848:	22 30       	cpi	r18, 0x02	; 2
    284a:	31 05       	cpc	r19, r1
    284c:	f4 f4       	brge	.+60     	; 0x288a <UART_init+0x13a>
    284e:	4c c0       	rjmp	.+152    	; 0x28e8 <UART_init+0x198>
    2850:	8f 81       	ldd	r24, Y+7	; 0x07
    2852:	98 85       	ldd	r25, Y+8	; 0x08
    2854:	85 30       	cpi	r24, 0x05	; 5
    2856:	91 05       	cpc	r25, r1
    2858:	81 f1       	breq	.+96     	; 0x28ba <UART_init+0x16a>
    285a:	2f 81       	ldd	r18, Y+7	; 0x07
    285c:	38 85       	ldd	r19, Y+8	; 0x08
    285e:	25 30       	cpi	r18, 0x05	; 5
    2860:	31 05       	cpc	r19, r1
    2862:	1c f1       	brlt	.+70     	; 0x28aa <UART_init+0x15a>
    2864:	8f 81       	ldd	r24, Y+7	; 0x07
    2866:	98 85       	ldd	r25, Y+8	; 0x08
    2868:	86 30       	cpi	r24, 0x06	; 6
    286a:	91 05       	cpc	r25, r1
    286c:	71 f1       	breq	.+92     	; 0x28ca <UART_init+0x17a>
    286e:	2f 81       	ldd	r18, Y+7	; 0x07
    2870:	38 85       	ldd	r19, Y+8	; 0x08
    2872:	27 30       	cpi	r18, 0x07	; 7
    2874:	31 05       	cpc	r19, r1
    2876:	89 f1       	breq	.+98     	; 0x28da <UART_init+0x18a>
    2878:	37 c0       	rjmp	.+110    	; 0x28e8 <UART_init+0x198>
	{
	case 0:
		break;
	case 1:
		UCSRC |= (1<<UCSZ0);
    287a:	a0 e4       	ldi	r26, 0x40	; 64
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e0 e4       	ldi	r30, 0x40	; 64
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	82 60       	ori	r24, 0x02	; 2
    2886:	8c 93       	st	X, r24
    2888:	2f c0       	rjmp	.+94     	; 0x28e8 <UART_init+0x198>
		break;
	case 2:
		UCSRC |= (1<<UCSZ1);
    288a:	a0 e4       	ldi	r26, 0x40	; 64
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e0 e4       	ldi	r30, 0x40	; 64
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	84 60       	ori	r24, 0x04	; 4
    2896:	8c 93       	st	X, r24
    2898:	27 c0       	rjmp	.+78     	; 0x28e8 <UART_init+0x198>
		break;
	case 3:
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    289a:	a0 e4       	ldi	r26, 0x40	; 64
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e0 e4       	ldi	r30, 0x40	; 64
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	86 60       	ori	r24, 0x06	; 6
    28a6:	8c 93       	st	X, r24
    28a8:	1f c0       	rjmp	.+62     	; 0x28e8 <UART_init+0x198>
		break;
	case 4:
		UCSRC |= (1<<UCSZ2);
    28aa:	a0 e4       	ldi	r26, 0x40	; 64
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e0 e4       	ldi	r30, 0x40	; 64
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	84 60       	ori	r24, 0x04	; 4
    28b6:	8c 93       	st	X, r24
    28b8:	17 c0       	rjmp	.+46     	; 0x28e8 <UART_init+0x198>
		break;
	case 5:
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ2);
    28ba:	a0 e4       	ldi	r26, 0x40	; 64
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e0 e4       	ldi	r30, 0x40	; 64
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	86 60       	ori	r24, 0x06	; 6
    28c6:	8c 93       	st	X, r24
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <UART_init+0x198>
		break;
	case 6:
		UCSRC |= (1<<UCSZ1) | (1<<UCSZ2);
    28ca:	a0 e4       	ldi	r26, 0x40	; 64
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e0 e4       	ldi	r30, 0x40	; 64
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	84 60       	ori	r24, 0x04	; 4
    28d6:	8c 93       	st	X, r24
    28d8:	07 c0       	rjmp	.+14     	; 0x28e8 <UART_init+0x198>
		break;
	case 7:
		UCSRC |= (1<<UCSZ1) | (1<<UCSZ2);
    28da:	a0 e4       	ldi	r26, 0x40	; 64
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e0 e4       	ldi	r30, 0x40	; 64
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	84 60       	ori	r24, 0x04	; 4
    28e6:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr->baud_rate)
    28e8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ea:	fc 81       	ldd	r31, Y+4	; 0x04
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	3e 83       	std	Y+6, r19	; 0x06
    28f4:	2d 83       	std	Y+5, r18	; 0x05
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	9e 81       	ldd	r25, Y+6	; 0x06
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	91 05       	cpc	r25, r1
    28fe:	d1 f0       	breq	.+52     	; 0x2934 <UART_init+0x1e4>
    2900:	2d 81       	ldd	r18, Y+5	; 0x05
    2902:	3e 81       	ldd	r19, Y+6	; 0x06
    2904:	22 30       	cpi	r18, 0x02	; 2
    2906:	31 05       	cpc	r19, r1
    2908:	2c f4       	brge	.+10     	; 0x2914 <UART_init+0x1c4>
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	61 f0       	breq	.+24     	; 0x292a <UART_init+0x1da>
    2912:	1e c0       	rjmp	.+60     	; 0x2950 <UART_init+0x200>
    2914:	2d 81       	ldd	r18, Y+5	; 0x05
    2916:	3e 81       	ldd	r19, Y+6	; 0x06
    2918:	22 30       	cpi	r18, 0x02	; 2
    291a:	31 05       	cpc	r19, r1
    291c:	81 f0       	breq	.+32     	; 0x293e <UART_init+0x1ee>
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	83 30       	cpi	r24, 0x03	; 3
    2924:	91 05       	cpc	r25, r1
    2926:	81 f0       	breq	.+32     	; 0x2948 <UART_init+0x1f8>
    2928:	13 c0       	rjmp	.+38     	; 0x2950 <UART_init+0x200>
	{
	case 0:
		ubrr_value = (uint16)(((F_CPU / (9600 * 8UL))) - 1);
    292a:	87 e6       	ldi	r24, 0x67	; 103
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <UART_init+0x200>
		break;
	case 1:
		ubrr_value = (uint32)(((F_CPU / (19200 * 8UL))) - 1);
    2934:	83 e3       	ldi	r24, 0x33	; 51
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	09 c0       	rjmp	.+18     	; 0x2950 <UART_init+0x200>
		break;
	case 2:
		ubrr_value = (uint32)(((F_CPU / (38400 * 8UL))) - 1);
    293e:	89 e1       	ldi	r24, 0x19	; 25
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9a 83       	std	Y+2, r25	; 0x02
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <UART_init+0x200>
		break;
	case 3:
		ubrr_value = (uint32)(((F_CPU / (115200 * 8UL))) - 1);
    2948:	87 e0       	ldi	r24, 0x07	; 7
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2950:	e0 e4       	ldi	r30, 0x40	; 64
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	89 2f       	mov	r24, r25
    295a:	99 27       	eor	r25, r25
    295c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    295e:	e9 e2       	ldi	r30, 0x29	; 41
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	80 83       	st	Z, r24
}
    2966:	2c 96       	adiw	r28, 0x0c	; 12
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	0f 92       	push	r0
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2984:	eb e2       	ldi	r30, 0x2B	; 43
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	80 72       	andi	r24, 0x20	; 32
    2990:	90 70       	andi	r25, 0x00	; 0
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	b9 f3       	breq	.-18     	; 0x2984 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2996:	ec e2       	ldi	r30, 0x2C	; 44
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    29ae:	eb e2       	ldi	r30, 0x2B	; 43
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	88 23       	and	r24, r24
    29b6:	dc f7       	brge	.-10     	; 0x29ae <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    29b8:	ec e2       	ldi	r30, 0x2C	; 44
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
}
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <UART_sendString+0x6>
    29ca:	0f 92       	push	r0
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	9b 83       	std	Y+3, r25	; 0x03
    29d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29d4:	19 82       	std	Y+1, r1	; 0x01
    29d6:	0e c0       	rjmp	.+28     	; 0x29f4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	9b 81       	ldd	r25, Y+3	; 0x03
    29e2:	fc 01       	movw	r30, r24
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	80 81       	ld	r24, Z
    29ea:	0e 94 bc 14 	call	0x2978	; 0x2978 <UART_sendByte>
		i++;
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	9b 81       	ldd	r25, Y+3	; 0x03
    29fe:	fc 01       	movw	r30, r24
    2a00:	e2 0f       	add	r30, r18
    2a02:	f3 1f       	adc	r31, r19
    2a04:	80 81       	ld	r24, Z
    2a06:	88 23       	and	r24, r24
    2a08:	39 f7       	brne	.-50     	; 0x29d8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <UART_receiveString+0xa>
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	9b 83       	std	Y+3, r25	; 0x03
    2a28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a2a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	9b 81       	ldd	r25, Y+3	; 0x03
    2a36:	8c 01       	movw	r16, r24
    2a38:	02 0f       	add	r16, r18
    2a3a:	13 1f       	adc	r17, r19
    2a3c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_recieveByte>
    2a40:	f8 01       	movw	r30, r16
    2a42:	80 83       	st	Z, r24
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	9b 81       	ldd	r25, Y+3	; 0x03
    2a56:	8c 01       	movw	r16, r24
    2a58:	02 0f       	add	r16, r18
    2a5a:	13 1f       	adc	r17, r19
    2a5c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_recieveByte>
    2a60:	f8 01       	movw	r30, r16
    2a62:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e2 0f       	add	r30, r18
    2a72:	f3 1f       	adc	r31, r19
    2a74:	80 81       	ld	r24, Z
    2a76:	83 32       	cpi	r24, 0x23	; 35
    2a78:	31 f7       	brne	.-52     	; 0x2a46 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	9b 81       	ldd	r25, Y+3	; 0x03
    2a84:	fc 01       	movw	r30, r24
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	10 82       	st	Z, r1
}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <__mulsi3>:
    2a9c:	62 9f       	mul	r22, r18
    2a9e:	d0 01       	movw	r26, r0
    2aa0:	73 9f       	mul	r23, r19
    2aa2:	f0 01       	movw	r30, r0
    2aa4:	82 9f       	mul	r24, r18
    2aa6:	e0 0d       	add	r30, r0
    2aa8:	f1 1d       	adc	r31, r1
    2aaa:	64 9f       	mul	r22, r20
    2aac:	e0 0d       	add	r30, r0
    2aae:	f1 1d       	adc	r31, r1
    2ab0:	92 9f       	mul	r25, r18
    2ab2:	f0 0d       	add	r31, r0
    2ab4:	83 9f       	mul	r24, r19
    2ab6:	f0 0d       	add	r31, r0
    2ab8:	74 9f       	mul	r23, r20
    2aba:	f0 0d       	add	r31, r0
    2abc:	65 9f       	mul	r22, r21
    2abe:	f0 0d       	add	r31, r0
    2ac0:	99 27       	eor	r25, r25
    2ac2:	72 9f       	mul	r23, r18
    2ac4:	b0 0d       	add	r27, r0
    2ac6:	e1 1d       	adc	r30, r1
    2ac8:	f9 1f       	adc	r31, r25
    2aca:	63 9f       	mul	r22, r19
    2acc:	b0 0d       	add	r27, r0
    2ace:	e1 1d       	adc	r30, r1
    2ad0:	f9 1f       	adc	r31, r25
    2ad2:	bd 01       	movw	r22, r26
    2ad4:	cf 01       	movw	r24, r30
    2ad6:	11 24       	eor	r1, r1
    2ad8:	08 95       	ret

00002ada <__prologue_saves__>:
    2ada:	2f 92       	push	r2
    2adc:	3f 92       	push	r3
    2ade:	4f 92       	push	r4
    2ae0:	5f 92       	push	r5
    2ae2:	6f 92       	push	r6
    2ae4:	7f 92       	push	r7
    2ae6:	8f 92       	push	r8
    2ae8:	9f 92       	push	r9
    2aea:	af 92       	push	r10
    2aec:	bf 92       	push	r11
    2aee:	cf 92       	push	r12
    2af0:	df 92       	push	r13
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	ca 1b       	sub	r28, r26
    2b04:	db 0b       	sbc	r29, r27
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	09 94       	ijmp

00002b12 <__epilogue_restores__>:
    2b12:	2a 88       	ldd	r2, Y+18	; 0x12
    2b14:	39 88       	ldd	r3, Y+17	; 0x11
    2b16:	48 88       	ldd	r4, Y+16	; 0x10
    2b18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b24:	b9 84       	ldd	r11, Y+9	; 0x09
    2b26:	c8 84       	ldd	r12, Y+8	; 0x08
    2b28:	df 80       	ldd	r13, Y+7	; 0x07
    2b2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b30:	1b 81       	ldd	r17, Y+3	; 0x03
    2b32:	aa 81       	ldd	r26, Y+2	; 0x02
    2b34:	b9 81       	ldd	r27, Y+1	; 0x01
    2b36:	ce 0f       	add	r28, r30
    2b38:	d1 1d       	adc	r29, r1
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	ed 01       	movw	r28, r26
    2b46:	08 95       	ret

00002b48 <atoi>:
    2b48:	fc 01       	movw	r30, r24
    2b4a:	88 27       	eor	r24, r24
    2b4c:	99 27       	eor	r25, r25
    2b4e:	e8 94       	clt
    2b50:	21 91       	ld	r18, Z+
    2b52:	20 32       	cpi	r18, 0x20	; 32
    2b54:	e9 f3       	breq	.-6      	; 0x2b50 <atoi+0x8>
    2b56:	29 30       	cpi	r18, 0x09	; 9
    2b58:	10 f0       	brcs	.+4      	; 0x2b5e <atoi+0x16>
    2b5a:	2e 30       	cpi	r18, 0x0E	; 14
    2b5c:	c8 f3       	brcs	.-14     	; 0x2b50 <atoi+0x8>
    2b5e:	2b 32       	cpi	r18, 0x2B	; 43
    2b60:	41 f0       	breq	.+16     	; 0x2b72 <atoi+0x2a>
    2b62:	2d 32       	cpi	r18, 0x2D	; 45
    2b64:	39 f4       	brne	.+14     	; 0x2b74 <atoi+0x2c>
    2b66:	68 94       	set
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <atoi+0x2a>
    2b6a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__mulhi_const_10>
    2b6e:	82 0f       	add	r24, r18
    2b70:	91 1d       	adc	r25, r1
    2b72:	21 91       	ld	r18, Z+
    2b74:	20 53       	subi	r18, 0x30	; 48
    2b76:	2a 30       	cpi	r18, 0x0A	; 10
    2b78:	c0 f3       	brcs	.-16     	; 0x2b6a <atoi+0x22>
    2b7a:	1e f4       	brtc	.+6      	; 0x2b82 <atoi+0x3a>
    2b7c:	90 95       	com	r25
    2b7e:	81 95       	neg	r24
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	08 95       	ret

00002b84 <strcmp>:
    2b84:	fb 01       	movw	r30, r22
    2b86:	dc 01       	movw	r26, r24
    2b88:	8d 91       	ld	r24, X+
    2b8a:	01 90       	ld	r0, Z+
    2b8c:	80 19       	sub	r24, r0
    2b8e:	01 10       	cpse	r0, r1
    2b90:	d9 f3       	breq	.-10     	; 0x2b88 <strcmp+0x4>
    2b92:	99 0b       	sbc	r25, r25
    2b94:	08 95       	ret

00002b96 <itoa>:
    2b96:	fb 01       	movw	r30, r22
    2b98:	9f 01       	movw	r18, r30
    2b9a:	e8 94       	clt
    2b9c:	42 30       	cpi	r20, 0x02	; 2
    2b9e:	c4 f0       	brlt	.+48     	; 0x2bd0 <itoa+0x3a>
    2ba0:	45 32       	cpi	r20, 0x25	; 37
    2ba2:	b4 f4       	brge	.+44     	; 0x2bd0 <itoa+0x3a>
    2ba4:	4a 30       	cpi	r20, 0x0A	; 10
    2ba6:	29 f4       	brne	.+10     	; 0x2bb2 <itoa+0x1c>
    2ba8:	97 fb       	bst	r25, 7
    2baa:	1e f4       	brtc	.+6      	; 0x2bb2 <itoa+0x1c>
    2bac:	90 95       	com	r25
    2bae:	81 95       	neg	r24
    2bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb2:	64 2f       	mov	r22, r20
    2bb4:	77 27       	eor	r23, r23
    2bb6:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__udivmodhi4>
    2bba:	80 5d       	subi	r24, 0xD0	; 208
    2bbc:	8a 33       	cpi	r24, 0x3A	; 58
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <itoa+0x2c>
    2bc0:	89 5d       	subi	r24, 0xD9	; 217
    2bc2:	81 93       	st	Z+, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	a1 f7       	brne	.-24     	; 0x2bb2 <itoa+0x1c>
    2bca:	16 f4       	brtc	.+4      	; 0x2bd0 <itoa+0x3a>
    2bcc:	5d e2       	ldi	r21, 0x2D	; 45
    2bce:	51 93       	st	Z+, r21
    2bd0:	10 82       	st	Z, r1
    2bd2:	c9 01       	movw	r24, r18
    2bd4:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <strrev>

00002bd8 <__mulhi_const_10>:
    2bd8:	7a e0       	ldi	r23, 0x0A	; 10
    2bda:	97 9f       	mul	r25, r23
    2bdc:	90 2d       	mov	r25, r0
    2bde:	87 9f       	mul	r24, r23
    2be0:	80 2d       	mov	r24, r0
    2be2:	91 0d       	add	r25, r1
    2be4:	11 24       	eor	r1, r1
    2be6:	08 95       	ret

00002be8 <strrev>:
    2be8:	dc 01       	movw	r26, r24
    2bea:	fc 01       	movw	r30, r24
    2bec:	67 2f       	mov	r22, r23
    2bee:	71 91       	ld	r23, Z+
    2bf0:	77 23       	and	r23, r23
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <strrev+0x4>
    2bf4:	32 97       	sbiw	r30, 0x02	; 2
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <strrev+0x18>
    2bf8:	7c 91       	ld	r23, X
    2bfa:	6d 93       	st	X+, r22
    2bfc:	70 83       	st	Z, r23
    2bfe:	62 91       	ld	r22, -Z
    2c00:	ae 17       	cp	r26, r30
    2c02:	bf 07       	cpc	r27, r31
    2c04:	c8 f3       	brcs	.-14     	; 0x2bf8 <strrev+0x10>
    2c06:	08 95       	ret

00002c08 <__udivmodhi4>:
    2c08:	aa 1b       	sub	r26, r26
    2c0a:	bb 1b       	sub	r27, r27
    2c0c:	51 e1       	ldi	r21, 0x11	; 17
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <__udivmodhi4_ep>

00002c10 <__udivmodhi4_loop>:
    2c10:	aa 1f       	adc	r26, r26
    2c12:	bb 1f       	adc	r27, r27
    2c14:	a6 17       	cp	r26, r22
    2c16:	b7 07       	cpc	r27, r23
    2c18:	10 f0       	brcs	.+4      	; 0x2c1e <__udivmodhi4_ep>
    2c1a:	a6 1b       	sub	r26, r22
    2c1c:	b7 0b       	sbc	r27, r23

00002c1e <__udivmodhi4_ep>:
    2c1e:	88 1f       	adc	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	5a 95       	dec	r21
    2c24:	a9 f7       	brne	.-22     	; 0x2c10 <__udivmodhi4_loop>
    2c26:	80 95       	com	r24
    2c28:	90 95       	com	r25
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	08 95       	ret

00002c30 <_exit>:
    2c30:	f8 94       	cli

00002c32 <__stop_program>:
    2c32:	ff cf       	rjmp	.-2      	; 0x2c32 <__stop_program>
