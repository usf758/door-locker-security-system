
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fe  00800060  00003784  00003818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080015e  0080015e  00003916  2**0
                  ALLOC
  3 .stab         000030fc  00000000  00000000  00003918  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001273  00000000  00000000  00006a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b818  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 35       	cpi	r26, 0x5E	; 94
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e5       	ldi	r26, 0x5E	; 94
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 17 	call	0x2e82	; 0x2e82 <main>
      8a:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e5       	ldi	r26, 0x50	; 80
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e5       	ldi	r24, 0x50	; 80
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <lcd_sendCommand>:
#include"Lcd_driver.h"
#include"common_macros.h"
#include"gpio.h"
#include <util/delay.h>

void lcd_sendCommand(uint8 command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e9 97       	sbiw	r28, 0x39	; 57
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e8       	ldi	r26, 0x80	; 128
     b6c:	bf e3       	ldi	r27, 0x3F	; 63
     b6e:	8d ab       	std	Y+53, r24	; 0x35
     b70:	9e ab       	std	Y+54, r25	; 0x36
     b72:	af ab       	std	Y+55, r26	; 0x37
     b74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	6d a9       	ldd	r22, Y+53	; 0x35
     b78:	7e a9       	ldd	r23, Y+54	; 0x36
     b7a:	8f a9       	ldd	r24, Y+55	; 0x37
     b7c:	98 ad       	ldd	r25, Y+56	; 0x38
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4a ef       	ldi	r20, 0xFA	; 250
     b84:	54 e4       	ldi	r21, 0x44	; 68
     b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	89 ab       	std	Y+49, r24	; 0x31
     b90:	9a ab       	std	Y+50, r25	; 0x32
     b92:	ab ab       	std	Y+51, r26	; 0x33
     b94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     b96:	69 a9       	ldd	r22, Y+49	; 0x31
     b98:	7a a9       	ldd	r23, Y+50	; 0x32
     b9a:	8b a9       	ldd	r24, Y+51	; 0x33
     b9c:	9c a9       	ldd	r25, Y+52	; 0x34
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <lcd_sendCommand+0x72>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	98 ab       	std	Y+48, r25	; 0x30
     bb4:	8f a7       	std	Y+47, r24	; 0x2f
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <lcd_sendCommand+0xf0>
	else if (__tmp > 65535)
     bb8:	69 a9       	ldd	r22, Y+49	; 0x31
     bba:	7a a9       	ldd	r23, Y+50	; 0x32
     bbc:	8b a9       	ldd	r24, Y+51	; 0x33
     bbe:	9c a9       	ldd	r25, Y+52	; 0x34
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bcc:	18 16       	cp	r1, r24
     bce:	4c f5       	brge	.+82     	; 0xc22 <lcd_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd0:	6d a9       	ldd	r22, Y+53	; 0x35
     bd2:	7e a9       	ldd	r23, Y+54	; 0x36
     bd4:	8f a9       	ldd	r24, Y+55	; 0x37
     bd6:	98 ad       	ldd	r25, Y+56	; 0x38
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	98 ab       	std	Y+48, r25	; 0x30
     bf6:	8f a7       	std	Y+47, r24	; 0x2f
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <lcd_sendCommand+0xd2>
     bfa:	88 ec       	ldi	r24, 0xC8	; 200
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9e a7       	std	Y+46, r25	; 0x2e
     c00:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c02:	8d a5       	ldd	r24, Y+45	; 0x2d
     c04:	9e a5       	ldd	r25, Y+46	; 0x2e
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <lcd_sendCommand+0xc0>
     c0a:	9e a7       	std	Y+46, r25	; 0x2e
     c0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c10:	98 a9       	ldd	r25, Y+48	; 0x30
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	98 ab       	std	Y+48, r25	; 0x30
     c16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1a:	98 a9       	ldd	r25, Y+48	; 0x30
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	69 f7       	brne	.-38     	; 0xbfa <lcd_sendCommand+0xb4>
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <lcd_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	69 a9       	ldd	r22, Y+49	; 0x31
     c24:	7a a9       	ldd	r23, Y+50	; 0x32
     c26:	8b a9       	ldd	r24, Y+51	; 0x33
     c28:	9c a9       	ldd	r25, Y+52	; 0x34
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	98 ab       	std	Y+48, r25	; 0x30
     c34:	8f a7       	std	Y+47, r24	; 0x2f
     c36:	8f a5       	ldd	r24, Y+47	; 0x2f
     c38:	98 a9       	ldd	r25, Y+48	; 0x30
     c3a:	9c a7       	std	Y+44, r25	; 0x2c
     c3c:	8b a7       	std	Y+43, r24	; 0x2b
     c3e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c40:	9c a5       	ldd	r25, Y+44	; 0x2c
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_sendCommand+0xfc>
     c46:	9c a7       	std	Y+44, r25	; 0x2c
     c48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e8       	ldi	r26, 0x80	; 128
     c5a:	bf e3       	ldi	r27, 0x3F	; 63
     c5c:	8f a3       	std	Y+39, r24	; 0x27
     c5e:	98 a7       	std	Y+40, r25	; 0x28
     c60:	a9 a7       	std	Y+41, r26	; 0x29
     c62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c64:	6f a1       	ldd	r22, Y+39	; 0x27
     c66:	78 a5       	ldd	r23, Y+40	; 0x28
     c68:	89 a5       	ldd	r24, Y+41	; 0x29
     c6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a ef       	ldi	r20, 0xFA	; 250
     c72:	54 e4       	ldi	r21, 0x44	; 68
     c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	8b a3       	std	Y+35, r24	; 0x23
     c7e:	9c a3       	std	Y+36, r25	; 0x24
     c80:	ad a3       	std	Y+37, r26	; 0x25
     c82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c84:	6b a1       	ldd	r22, Y+35	; 0x23
     c86:	7c a1       	ldd	r23, Y+36	; 0x24
     c88:	8d a1       	ldd	r24, Y+37	; 0x25
     c8a:	9e a1       	ldd	r25, Y+38	; 0x26
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c98:	88 23       	and	r24, r24
     c9a:	2c f4       	brge	.+10     	; 0xca6 <lcd_sendCommand+0x160>
		__ticks = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9a a3       	std	Y+34, r25	; 0x22
     ca2:	89 a3       	std	Y+33, r24	; 0x21
     ca4:	3f c0       	rjmp	.+126    	; 0xd24 <lcd_sendCommand+0x1de>
	else if (__tmp > 65535)
     ca6:	6b a1       	ldd	r22, Y+35	; 0x23
     ca8:	7c a1       	ldd	r23, Y+36	; 0x24
     caa:	8d a1       	ldd	r24, Y+37	; 0x25
     cac:	9e a1       	ldd	r25, Y+38	; 0x26
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	3f ef       	ldi	r19, 0xFF	; 255
     cb2:	4f e7       	ldi	r20, 0x7F	; 127
     cb4:	57 e4       	ldi	r21, 0x47	; 71
     cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cba:	18 16       	cp	r1, r24
     cbc:	4c f5       	brge	.+82     	; 0xd10 <lcd_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbe:	6f a1       	ldd	r22, Y+39	; 0x27
     cc0:	78 a5       	ldd	r23, Y+40	; 0x28
     cc2:	89 a5       	ldd	r24, Y+41	; 0x29
     cc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e2       	ldi	r20, 0x20	; 32
     ccc:	51 e4       	ldi	r21, 0x41	; 65
     cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9a a3       	std	Y+34, r25	; 0x22
     ce4:	89 a3       	std	Y+33, r24	; 0x21
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <lcd_sendCommand+0x1c0>
     ce8:	88 ec       	ldi	r24, 0xC8	; 200
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	98 a3       	std	Y+32, r25	; 0x20
     cee:	8f 8f       	std	Y+31, r24	; 0x1f
     cf0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cf2:	98 a1       	ldd	r25, Y+32	; 0x20
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <lcd_sendCommand+0x1ae>
     cf8:	98 a3       	std	Y+32, r25	; 0x20
     cfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfc:	89 a1       	ldd	r24, Y+33	; 0x21
     cfe:	9a a1       	ldd	r25, Y+34	; 0x22
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	9a a3       	std	Y+34, r25	; 0x22
     d04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d06:	89 a1       	ldd	r24, Y+33	; 0x21
     d08:	9a a1       	ldd	r25, Y+34	; 0x22
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f7       	brne	.-38     	; 0xce8 <lcd_sendCommand+0x1a2>
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <lcd_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d10:	6b a1       	ldd	r22, Y+35	; 0x23
     d12:	7c a1       	ldd	r23, Y+36	; 0x24
     d14:	8d a1       	ldd	r24, Y+37	; 0x25
     d16:	9e a1       	ldd	r25, Y+38	; 0x26
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9a a3       	std	Y+34, r25	; 0x22
     d22:	89 a3       	std	Y+33, r24	; 0x21
     d24:	89 a1       	ldd	r24, Y+33	; 0x21
     d26:	9a a1       	ldd	r25, Y+34	; 0x22
     d28:	9e 8f       	std	Y+30, r25	; 0x1e
     d2a:	8d 8f       	std	Y+29, r24	; 0x1d
     d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <lcd_sendCommand+0x1ea>
     d34:	9e 8f       	std	Y+30, r25	; 0x1e
     d36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(lcdbits == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	69 ad       	ldd	r22, Y+57	; 0x39
     d3c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_writePort>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf e3       	ldi	r27, 0x3F	; 63
     d48:	89 8f       	std	Y+25, r24	; 0x19
     d4a:	9a 8f       	std	Y+26, r25	; 0x1a
     d4c:	ab 8f       	std	Y+27, r26	; 0x1b
     d4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	69 8d       	ldd	r22, Y+25	; 0x19
     d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a ef       	ldi	r20, 0xFA	; 250
     d5e:	54 e4       	ldi	r21, 0x44	; 68
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8d 8b       	std	Y+21, r24	; 0x15
     d6a:	9e 8b       	std	Y+22, r25	; 0x16
     d6c:	af 8b       	std	Y+23, r26	; 0x17
     d6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d70:	6d 89       	ldd	r22, Y+21	; 0x15
     d72:	7e 89       	ldd	r23, Y+22	; 0x16
     d74:	8f 89       	ldd	r24, Y+23	; 0x17
     d76:	98 8d       	ldd	r25, Y+24	; 0x18
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	2c f4       	brge	.+10     	; 0xd92 <lcd_sendCommand+0x24c>
		__ticks = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <lcd_sendCommand+0x2ca>
	else if (__tmp > 65535)
     d92:	6d 89       	ldd	r22, Y+21	; 0x15
     d94:	7e 89       	ldd	r23, Y+22	; 0x16
     d96:	8f 89       	ldd	r24, Y+23	; 0x17
     d98:	98 8d       	ldd	r25, Y+24	; 0x18
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	4c f5       	brge	.+82     	; 0xdfc <lcd_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	69 8d       	ldd	r22, Y+25	; 0x19
     dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9c 8b       	std	Y+20, r25	; 0x14
     dd0:	8b 8b       	std	Y+19, r24	; 0x13
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <lcd_sendCommand+0x2ac>
     dd4:	88 ec       	ldi	r24, 0xC8	; 200
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9a 8b       	std	Y+18, r25	; 0x12
     dda:	89 8b       	std	Y+17, r24	; 0x11
     ddc:	89 89       	ldd	r24, Y+17	; 0x11
     dde:	9a 89       	ldd	r25, Y+18	; 0x12
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <lcd_sendCommand+0x29a>
     de4:	9a 8b       	std	Y+18, r25	; 0x12
     de6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8b 89       	ldd	r24, Y+19	; 0x13
     df4:	9c 89       	ldd	r25, Y+20	; 0x14
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <lcd_sendCommand+0x28e>
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <lcd_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6d 89       	ldd	r22, Y+21	; 0x15
     dfe:	7e 89       	ldd	r23, Y+22	; 0x16
     e00:	8f 89       	ldd	r24, Y+23	; 0x17
     e02:	98 8d       	ldd	r25, Y+24	; 0x18
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9c 8b       	std	Y+20, r25	; 0x14
     e0e:	8b 8b       	std	Y+19, r24	; 0x13
     e10:	8b 89       	ldd	r24, Y+19	; 0x13
     e12:	9c 89       	ldd	r25, Y+20	; 0x14
     e14:	98 8b       	std	Y+16, r25	; 0x10
     e16:	8f 87       	std	Y+15, r24	; 0x0f
     e18:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <lcd_sendCommand+0x2d6>
     e20:	98 8b       	std	Y+16, r25	; 0x10
     e22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 e8       	ldi	r26, 0x80	; 128
     e34:	bf e3       	ldi	r27, 0x3F	; 63
     e36:	8b 87       	std	Y+11, r24	; 0x0b
     e38:	9c 87       	std	Y+12, r25	; 0x0c
     e3a:	ad 87       	std	Y+13, r26	; 0x0d
     e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a ef       	ldi	r20, 0xFA	; 250
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	98 87       	std	Y+8, r25	; 0x08
     e5a:	a9 87       	std	Y+9, r26	; 0x09
     e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <lcd_sendCommand+0x33a>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <lcd_sendCommand+0x3b8>
	else if (__tmp > 65535)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <lcd_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <lcd_sendCommand+0x39a>
     ec2:	88 ec       	ldi	r24, 0xC8	; 200
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <lcd_sendCommand+0x388>
     ed2:	9c 83       	std	Y+4, r25	; 0x04
     ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <lcd_sendCommand+0x37c>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <lcd_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <lcd_sendCommand+0x3c4>
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
     f12:	e9 96       	adiw	r28, 0x39	; 57
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <lcd_displayCharacter>:

void lcd_displayCharacter(uint8 data){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	e9 97       	sbiw	r28, 0x39	; 57
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e8       	ldi	r26, 0x80	; 128
     f4a:	bf e3       	ldi	r27, 0x3F	; 63
     f4c:	8d ab       	std	Y+53, r24	; 0x35
     f4e:	9e ab       	std	Y+54, r25	; 0x36
     f50:	af ab       	std	Y+55, r26	; 0x37
     f52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f54:	6d a9       	ldd	r22, Y+53	; 0x35
     f56:	7e a9       	ldd	r23, Y+54	; 0x36
     f58:	8f a9       	ldd	r24, Y+55	; 0x37
     f5a:	98 ad       	ldd	r25, Y+56	; 0x38
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a ef       	ldi	r20, 0xFA	; 250
     f62:	54 e4       	ldi	r21, 0x44	; 68
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	89 ab       	std	Y+49, r24	; 0x31
     f6e:	9a ab       	std	Y+50, r25	; 0x32
     f70:	ab ab       	std	Y+51, r26	; 0x33
     f72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f74:	69 a9       	ldd	r22, Y+49	; 0x31
     f76:	7a a9       	ldd	r23, Y+50	; 0x32
     f78:	8b a9       	ldd	r24, Y+51	; 0x33
     f7a:	9c a9       	ldd	r25, Y+52	; 0x34
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f88:	88 23       	and	r24, r24
     f8a:	2c f4       	brge	.+10     	; 0xf96 <lcd_displayCharacter+0x72>
		__ticks = 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	98 ab       	std	Y+48, r25	; 0x30
     f92:	8f a7       	std	Y+47, r24	; 0x2f
     f94:	3f c0       	rjmp	.+126    	; 0x1014 <lcd_displayCharacter+0xf0>
	else if (__tmp > 65535)
     f96:	69 a9       	ldd	r22, Y+49	; 0x31
     f98:	7a a9       	ldd	r23, Y+50	; 0x32
     f9a:	8b a9       	ldd	r24, Y+51	; 0x33
     f9c:	9c a9       	ldd	r25, Y+52	; 0x34
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     faa:	18 16       	cp	r1, r24
     fac:	4c f5       	brge	.+82     	; 0x1000 <lcd_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fae:	6d a9       	ldd	r22, Y+53	; 0x35
     fb0:	7e a9       	ldd	r23, Y+54	; 0x36
     fb2:	8f a9       	ldd	r24, Y+55	; 0x37
     fb4:	98 ad       	ldd	r25, Y+56	; 0x38
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	98 ab       	std	Y+48, r25	; 0x30
     fd4:	8f a7       	std	Y+47, r24	; 0x2f
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <lcd_displayCharacter+0xd2>
     fd8:	88 ec       	ldi	r24, 0xC8	; 200
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e a7       	std	Y+46, r25	; 0x2e
     fde:	8d a7       	std	Y+45, r24	; 0x2d
     fe0:	8d a5       	ldd	r24, Y+45	; 0x2d
     fe2:	9e a5       	ldd	r25, Y+46	; 0x2e
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_displayCharacter+0xc0>
     fe8:	9e a7       	std	Y+46, r25	; 0x2e
     fea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	8f a5       	ldd	r24, Y+47	; 0x2f
     fee:	98 a9       	ldd	r25, Y+48	; 0x30
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	98 ab       	std	Y+48, r25	; 0x30
     ff4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff8:	98 a9       	ldd	r25, Y+48	; 0x30
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <lcd_displayCharacter+0xb4>
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <lcd_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	69 a9       	ldd	r22, Y+49	; 0x31
    1002:	7a a9       	ldd	r23, Y+50	; 0x32
    1004:	8b a9       	ldd	r24, Y+51	; 0x33
    1006:	9c a9       	ldd	r25, Y+52	; 0x34
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	98 ab       	std	Y+48, r25	; 0x30
    1012:	8f a7       	std	Y+47, r24	; 0x2f
    1014:	8f a5       	ldd	r24, Y+47	; 0x2f
    1016:	98 a9       	ldd	r25, Y+48	; 0x30
    1018:	9c a7       	std	Y+44, r25	; 0x2c
    101a:	8b a7       	std	Y+43, r24	; 0x2b
    101c:	8b a5       	ldd	r24, Y+43	; 0x2b
    101e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <lcd_displayCharacter+0xfc>
    1024:	9c a7       	std	Y+44, r25	; 0x2c
    1026:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e8       	ldi	r26, 0x80	; 128
    1038:	bf e3       	ldi	r27, 0x3F	; 63
    103a:	8f a3       	std	Y+39, r24	; 0x27
    103c:	98 a7       	std	Y+40, r25	; 0x28
    103e:	a9 a7       	std	Y+41, r26	; 0x29
    1040:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1042:	6f a1       	ldd	r22, Y+39	; 0x27
    1044:	78 a5       	ldd	r23, Y+40	; 0x28
    1046:	89 a5       	ldd	r24, Y+41	; 0x29
    1048:	9a a5       	ldd	r25, Y+42	; 0x2a
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a ef       	ldi	r20, 0xFA	; 250
    1050:	54 e4       	ldi	r21, 0x44	; 68
    1052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	8b a3       	std	Y+35, r24	; 0x23
    105c:	9c a3       	std	Y+36, r25	; 0x24
    105e:	ad a3       	std	Y+37, r26	; 0x25
    1060:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1062:	6b a1       	ldd	r22, Y+35	; 0x23
    1064:	7c a1       	ldd	r23, Y+36	; 0x24
    1066:	8d a1       	ldd	r24, Y+37	; 0x25
    1068:	9e a1       	ldd	r25, Y+38	; 0x26
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1076:	88 23       	and	r24, r24
    1078:	2c f4       	brge	.+10     	; 0x1084 <lcd_displayCharacter+0x160>
		__ticks = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9a a3       	std	Y+34, r25	; 0x22
    1080:	89 a3       	std	Y+33, r24	; 0x21
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <lcd_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1084:	6b a1       	ldd	r22, Y+35	; 0x23
    1086:	7c a1       	ldd	r23, Y+36	; 0x24
    1088:	8d a1       	ldd	r24, Y+37	; 0x25
    108a:	9e a1       	ldd	r25, Y+38	; 0x26
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	4c f5       	brge	.+82     	; 0x10ee <lcd_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	6f a1       	ldd	r22, Y+39	; 0x27
    109e:	78 a5       	ldd	r23, Y+40	; 0x28
    10a0:	89 a5       	ldd	r24, Y+41	; 0x29
    10a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9a a3       	std	Y+34, r25	; 0x22
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <lcd_displayCharacter+0x1c0>
    10c6:	88 ec       	ldi	r24, 0xC8	; 200
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	98 a3       	std	Y+32, r25	; 0x20
    10cc:	8f 8f       	std	Y+31, r24	; 0x1f
    10ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d0:	98 a1       	ldd	r25, Y+32	; 0x20
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <lcd_displayCharacter+0x1ae>
    10d6:	98 a3       	std	Y+32, r25	; 0x20
    10d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	89 a1       	ldd	r24, Y+33	; 0x21
    10dc:	9a a1       	ldd	r25, Y+34	; 0x22
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	9a a3       	std	Y+34, r25	; 0x22
    10e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e4:	89 a1       	ldd	r24, Y+33	; 0x21
    10e6:	9a a1       	ldd	r25, Y+34	; 0x22
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <lcd_displayCharacter+0x1a2>
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <lcd_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	6b a1       	ldd	r22, Y+35	; 0x23
    10f0:	7c a1       	ldd	r23, Y+36	; 0x24
    10f2:	8d a1       	ldd	r24, Y+37	; 0x25
    10f4:	9e a1       	ldd	r25, Y+38	; 0x26
    10f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	9a a3       	std	Y+34, r25	; 0x22
    1100:	89 a3       	std	Y+33, r24	; 0x21
    1102:	89 a1       	ldd	r24, Y+33	; 0x21
    1104:	9a a1       	ldd	r25, Y+34	; 0x22
    1106:	9e 8f       	std	Y+30, r25	; 0x1e
    1108:	8d 8f       	std	Y+29, r24	; 0x1d
    110a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <lcd_displayCharacter+0x1ea>
    1112:	9e 8f       	std	Y+30, r25	; 0x1e
    1114:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(lcdbits == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	69 ad       	ldd	r22, Y+57	; 0x39
    111a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_writePort>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e8       	ldi	r26, 0x80	; 128
    1124:	bf e3       	ldi	r27, 0x3F	; 63
    1126:	89 8f       	std	Y+25, r24	; 0x19
    1128:	9a 8f       	std	Y+26, r25	; 0x1a
    112a:	ab 8f       	std	Y+27, r26	; 0x1b
    112c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112e:	69 8d       	ldd	r22, Y+25	; 0x19
    1130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	4a ef       	ldi	r20, 0xFA	; 250
    113c:	54 e4       	ldi	r21, 0x44	; 68
    113e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	8d 8b       	std	Y+21, r24	; 0x15
    1148:	9e 8b       	std	Y+22, r25	; 0x16
    114a:	af 8b       	std	Y+23, r26	; 0x17
    114c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1162:	88 23       	and	r24, r24
    1164:	2c f4       	brge	.+10     	; 0x1170 <lcd_displayCharacter+0x24c>
		__ticks = 1;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c 8b       	std	Y+20, r25	; 0x14
    116c:	8b 8b       	std	Y+19, r24	; 0x13
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <lcd_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1170:	6d 89       	ldd	r22, Y+21	; 0x15
    1172:	7e 89       	ldd	r23, Y+22	; 0x16
    1174:	8f 89       	ldd	r24, Y+23	; 0x17
    1176:	98 8d       	ldd	r25, Y+24	; 0x18
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	3f ef       	ldi	r19, 0xFF	; 255
    117c:	4f e7       	ldi	r20, 0x7F	; 127
    117e:	57 e4       	ldi	r21, 0x47	; 71
    1180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1184:	18 16       	cp	r1, r24
    1186:	4c f5       	brge	.+82     	; 0x11da <lcd_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1188:	69 8d       	ldd	r22, Y+25	; 0x19
    118a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e2       	ldi	r20, 0x20	; 32
    1196:	51 e4       	ldi	r21, 0x41	; 65
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9c 8b       	std	Y+20, r25	; 0x14
    11ae:	8b 8b       	std	Y+19, r24	; 0x13
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <lcd_displayCharacter+0x2ac>
    11b2:	88 ec       	ldi	r24, 0xC8	; 200
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9a 8b       	std	Y+18, r25	; 0x12
    11b8:	89 8b       	std	Y+17, r24	; 0x11
    11ba:	89 89       	ldd	r24, Y+17	; 0x11
    11bc:	9a 89       	ldd	r25, Y+18	; 0x12
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <lcd_displayCharacter+0x29a>
    11c2:	9a 8b       	std	Y+18, r25	; 0x12
    11c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	8b 89       	ldd	r24, Y+19	; 0x13
    11c8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	9c 8b       	std	Y+20, r25	; 0x14
    11ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d0:	8b 89       	ldd	r24, Y+19	; 0x13
    11d2:	9c 89       	ldd	r25, Y+20	; 0x14
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	69 f7       	brne	.-38     	; 0x11b2 <lcd_displayCharacter+0x28e>
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <lcd_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11da:	6d 89       	ldd	r22, Y+21	; 0x15
    11dc:	7e 89       	ldd	r23, Y+22	; 0x16
    11de:	8f 89       	ldd	r24, Y+23	; 0x17
    11e0:	98 8d       	ldd	r25, Y+24	; 0x18
    11e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9c 8b       	std	Y+20, r25	; 0x14
    11ec:	8b 8b       	std	Y+19, r24	; 0x13
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	98 8b       	std	Y+16, r25	; 0x10
    11f4:	8f 87       	std	Y+15, r24	; 0x0f
    11f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f8:	98 89       	ldd	r25, Y+16	; 0x10
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <lcd_displayCharacter+0x2d6>
    11fe:	98 8b       	std	Y+16, r25	; 0x10
    1200:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a0 e8       	ldi	r26, 0x80	; 128
    1212:	bf e3       	ldi	r27, 0x3F	; 63
    1214:	8b 87       	std	Y+11, r24	; 0x0b
    1216:	9c 87       	std	Y+12, r25	; 0x0c
    1218:	ad 87       	std	Y+13, r26	; 0x0d
    121a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121c:	6b 85       	ldd	r22, Y+11	; 0x0b
    121e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4a ef       	ldi	r20, 0xFA	; 250
    122a:	54 e4       	ldi	r21, 0x44	; 68
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8f 83       	std	Y+7, r24	; 0x07
    1236:	98 87       	std	Y+8, r25	; 0x08
    1238:	a9 87       	std	Y+9, r26	; 0x09
    123a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123c:	6f 81       	ldd	r22, Y+7	; 0x07
    123e:	78 85       	ldd	r23, Y+8	; 0x08
    1240:	89 85       	ldd	r24, Y+9	; 0x09
    1242:	9a 85       	ldd	r25, Y+10	; 0x0a
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1250:	88 23       	and	r24, r24
    1252:	2c f4       	brge	.+10     	; 0x125e <lcd_displayCharacter+0x33a>
		__ticks = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9e 83       	std	Y+6, r25	; 0x06
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	3f c0       	rjmp	.+126    	; 0x12dc <lcd_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    125e:	6f 81       	ldd	r22, Y+7	; 0x07
    1260:	78 85       	ldd	r23, Y+8	; 0x08
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	3f ef       	ldi	r19, 0xFF	; 255
    126a:	4f e7       	ldi	r20, 0x7F	; 127
    126c:	57 e4       	ldi	r21, 0x47	; 71
    126e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1272:	18 16       	cp	r1, r24
    1274:	4c f5       	brge	.+82     	; 0x12c8 <lcd_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1276:	6b 85       	ldd	r22, Y+11	; 0x0b
    1278:	7c 85       	ldd	r23, Y+12	; 0x0c
    127a:	8d 85       	ldd	r24, Y+13	; 0x0d
    127c:	9e 85       	ldd	r25, Y+14	; 0x0e
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e2       	ldi	r20, 0x20	; 32
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	0f c0       	rjmp	.+30     	; 0x12be <lcd_displayCharacter+0x39a>
    12a0:	88 ec       	ldi	r24, 0xC8	; 200
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <lcd_displayCharacter+0x388>
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	69 f7       	brne	.-38     	; 0x12a0 <lcd_displayCharacter+0x37c>
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <lcd_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <lcd_displayCharacter+0x3c4>
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    12f0:	e9 96       	adiw	r28, 0x39	; 57
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <lcd_init>:


void lcd_init(void){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2e 97       	sbiw	r28, 0x0e	; 14
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	41 e0       	ldi	r20, 0x01	; 1
    131c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a0 ea       	ldi	r26, 0xA0	; 160
    1330:	b1 e4       	ldi	r27, 0x41	; 65
    1332:	8b 87       	std	Y+11, r24	; 0x0b
    1334:	9c 87       	std	Y+12, r25	; 0x0c
    1336:	ad 87       	std	Y+13, r26	; 0x0d
    1338:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133a:	6b 85       	ldd	r22, Y+11	; 0x0b
    133c:	7c 85       	ldd	r23, Y+12	; 0x0c
    133e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1340:	9e 85       	ldd	r25, Y+14	; 0x0e
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	4a ef       	ldi	r20, 0xFA	; 250
    1348:	54 e4       	ldi	r21, 0x44	; 68
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	8f 83       	std	Y+7, r24	; 0x07
    1354:	98 87       	std	Y+8, r25	; 0x08
    1356:	a9 87       	std	Y+9, r26	; 0x09
    1358:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135a:	6f 81       	ldd	r22, Y+7	; 0x07
    135c:	78 85       	ldd	r23, Y+8	; 0x08
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136e:	88 23       	and	r24, r24
    1370:	2c f4       	brge	.+10     	; 0x137c <lcd_init+0x7a>
		__ticks = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	3f c0       	rjmp	.+126    	; 0x13fa <lcd_init+0xf8>
	else if (__tmp > 65535)
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	57 e4       	ldi	r21, 0x47	; 71
    138c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	4c f5       	brge	.+82     	; 0x13e6 <lcd_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	6b 85       	ldd	r22, Y+11	; 0x0b
    1396:	7c 85       	ldd	r23, Y+12	; 0x0c
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e2       	ldi	r20, 0x20	; 32
    13a2:	51 e4       	ldi	r21, 0x41	; 65
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	bc 01       	movw	r22, r24
    13ae:	cd 01       	movw	r24, r26
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	0f c0       	rjmp	.+30     	; 0x13dc <lcd_init+0xda>
    13be:	88 ec       	ldi	r24, 0xC8	; 200
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <lcd_init+0xc8>
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	69 f7       	brne	.-38     	; 0x13be <lcd_init+0xbc>
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <lcd_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e6:	6f 81       	ldd	r22, Y+7	; 0x07
    13e8:	78 85       	ldd	r23, Y+8	; 0x08
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <lcd_init+0x104>
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	lcd_sendCommand(0X28);

#elif(lcdbits == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPortDirection>
	lcd_sendCommand(0X38);
    1416:	88 e3       	ldi	r24, 0x38	; 56
    1418:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>

#endif
	lcd_sendCommand(0X0C);
    141c:	8c e0       	ldi	r24, 0x0C	; 12
    141e:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
	lcd_sendCommand(0X01);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
}
    1428:	2e 96       	adiw	r28, 0x0e	; 14
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <lcd_displaystring>:
void lcd_displaystring(uint8 *str)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <lcd_displaystring+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <lcd_displaystring+0x8>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9c 83       	std	Y+4, r25	; 0x04
    1448:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;str[i]!='\0';i++)
    144a:	1a 82       	std	Y+2, r1	; 0x02
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	0f c0       	rjmp	.+30     	; 0x146e <lcd_displaystring+0x34>
	{
		lcd_displayCharacter(str[i]);
    1450:	29 81       	ldd	r18, Y+1	; 0x01
    1452:	3a 81       	ldd	r19, Y+2	; 0x02
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	fc 01       	movw	r30, r24
    145a:	e2 0f       	add	r30, r18
    145c:	f3 1f       	adc	r31, r19
    145e:	80 81       	ld	r24, Z
    1460:	0e 94 92 07 	call	0xf24	; 0xf24 <lcd_displayCharacter>
	lcd_sendCommand(0X0C);
	lcd_sendCommand(0X01);
}
void lcd_displaystring(uint8 *str)
{
	for(int i=0;str[i]!='\0';i++)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	29 81       	ldd	r18, Y+1	; 0x01
    1470:	3a 81       	ldd	r19, Y+2	; 0x02
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	fc 01       	movw	r30, r24
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	39 f7       	brne	.-50     	; 0x1450 <lcd_displaystring+0x16>
	{
		lcd_displayCharacter(str[i]);
	}
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <LCD_movecursor>:

void LCD_movecursor(uint8 row,uint8 col)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <LCD_movecursor+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <LCD_movecursor+0x8>
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memoryaddress;
	switch(row)
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3d 83       	std	Y+5, r19	; 0x05
    14aa:	2c 83       	std	Y+4, r18	; 0x04
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	c1 f0       	breq	.+48     	; 0x14e6 <LCD_movecursor+0x56>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_movecursor+0x3a>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <LCD_movecursor+0x50>
    14c8:	19 c0       	rjmp	.+50     	; 0x14fc <LCD_movecursor+0x6c>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	69 f0       	breq	.+26     	; 0x14ee <LCD_movecursor+0x5e>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	61 f0       	breq	.+24     	; 0x14f6 <LCD_movecursor+0x66>
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <LCD_movecursor+0x6c>
	{
	case 0:
		lcd_memoryaddress=col;
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	0b c0       	rjmp	.+22     	; 0x14fc <LCD_movecursor+0x6c>
		break;
	case 1:
		lcd_memoryaddress=col+0x40;
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	80 5c       	subi	r24, 0xC0	; 192
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <LCD_movecursor+0x6c>
		break;
	case 2:
		lcd_memoryaddress=col+0x10;
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	80 5f       	subi	r24, 0xF0	; 240
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <LCD_movecursor+0x6c>
		break;
	case 3:
		lcd_memoryaddress=col+0x50;
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	80 5b       	subi	r24, 0xB0	; 176
    14fa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	lcd_sendCommand(lcd_memoryaddress | 0X80);
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>

}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <lcd_displayrowcolumn>:
void lcd_displayrowcolumn(uint8 *str,uint8 row,uint8 col)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <lcd_displayrowcolumn+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <lcd_displayrowcolumn+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6b 83       	std	Y+3, r22	; 0x03
    1526:	4c 83       	std	Y+4, r20	; 0x04
	LCD_movecursor(row,col);
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	6c 81       	ldd	r22, Y+4	; 0x04
    152c:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_movecursor>
	lcd_displaystring(str);
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <lcd_clearscreen>:
void lcd_clearscreen()
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	lcd_sendCommand(0X01);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <lcd_intgertostring>:

void lcd_intgertostring(int data)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	62 97       	sbiw	r28, 0x12	; 18
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	9a 8b       	std	Y+18, r25	; 0x12
    1570:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    1572:	89 89       	ldd	r24, Y+17	; 0x11
    1574:	9a 89       	ldd	r25, Y+18	; 0x12
    1576:	9e 01       	movw	r18, r28
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	b9 01       	movw	r22, r18
    157e:	4a e0       	ldi	r20, 0x0A	; 10
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <itoa>
	lcd_displaystring(buffer);
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
}
    158e:	62 96       	adiw	r28, 0x12	; 18
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	lcd_sendCommand(0x01);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcd_sendCommand>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <GPIO_setupPinDirection+0x6>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <GPIO_setupPinDirection+0x8>
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
    15c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	88 30       	cpi	r24, 0x08	; 8
    15cc:	08 f0       	brcs	.+2      	; 0x15d0 <GPIO_setupPinDirection+0x1c>
    15ce:	d5 c0       	rjmp	.+426    	; 0x177a <GPIO_setupPinDirection+0x1c6>
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <GPIO_setupPinDirection+0x24>
    15d6:	d1 c0       	rjmp	.+418    	; 0x177a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	3d 83       	std	Y+5, r19	; 0x05
    15e0:	2c 83       	std	Y+4, r18	; 0x04
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <GPIO_setupPinDirection+0x3a>
    15ec:	43 c0       	rjmp	.+134    	; 0x1674 <GPIO_setupPinDirection+0xc0>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <GPIO_setupPinDirection+0x4e>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	71 f0       	breq	.+28     	; 0x161c <GPIO_setupPinDirection+0x68>
    1600:	bc c0       	rjmp	.+376    	; 0x177a <GPIO_setupPinDirection+0x1c6>
    1602:	2c 81       	ldd	r18, Y+4	; 0x04
    1604:	3d 81       	ldd	r19, Y+5	; 0x05
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <GPIO_setupPinDirection+0x5a>
    160c:	5f c0       	rjmp	.+190    	; 0x16cc <GPIO_setupPinDirection+0x118>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <GPIO_setupPinDirection+0x66>
    1618:	85 c0       	rjmp	.+266    	; 0x1724 <GPIO_setupPinDirection+0x170>
    161a:	af c0       	rjmp	.+350    	; 0x177a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	a1 f4       	brne	.+40     	; 0x164a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1622:	aa e3       	ldi	r26, 0x3A	; 58
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ea e3       	ldi	r30, 0x3A	; 58
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_setupPinDirection+0x8c>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_setupPinDirection+0x88>
    1644:	84 2b       	or	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	98 c0       	rjmp	.+304    	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    164a:	aa e3       	ldi	r26, 0x3A	; 58
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ea e3       	ldi	r30, 0x3A	; 58
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_setupPinDirection+0xb4>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_setupPinDirection+0xb0>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	83 c0       	rjmp	.+262    	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	a1 f4       	brne	.+40     	; 0x16a2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    167a:	a7 e3       	ldi	r26, 0x37	; 55
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_setupPinDirection+0xe4>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_setupPinDirection+0xe0>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	6c c0       	rjmp	.+216    	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16a2:	a7 e3       	ldi	r26, 0x37	; 55
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e3       	ldi	r30, 0x37	; 55
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_setupPinDirection+0x10c>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_setupPinDirection+0x108>
    16c4:	80 95       	com	r24
    16c6:	84 23       	and	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	57 c0       	rjmp	.+174    	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	a1 f4       	brne	.+40     	; 0x16fa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16d2:	a4 e3       	ldi	r26, 0x34	; 52
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x13c>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x138>
    16f4:	84 2b       	or	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	40 c0       	rjmp	.+128    	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16fa:	a4 e3       	ldi	r26, 0x34	; 52
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e4 e3       	ldi	r30, 0x34	; 52
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <GPIO_setupPinDirection+0x164>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <GPIO_setupPinDirection+0x160>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	2b c0       	rjmp	.+86     	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	a1 f4       	brne	.+40     	; 0x1752 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    172a:	a1 e3       	ldi	r26, 0x31	; 49
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e1 e3       	ldi	r30, 0x31	; 49
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0x194>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0x190>
    174c:	84 2b       	or	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	14 c0       	rjmp	.+40     	; 0x177a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1752:	a1 e3       	ldi	r26, 0x31	; 49
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e1 e3       	ldi	r30, 0x31	; 49
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_setupPinDirection+0x1bc>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_setupPinDirection+0x1b8>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <GPIO_writePin+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <GPIO_writePin+0x8>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	6a 83       	std	Y+2, r22	; 0x02
    179c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	88 30       	cpi	r24, 0x08	; 8
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <GPIO_writePin+0x1c>
    17a4:	d5 c0       	rjmp	.+426    	; 0x1950 <GPIO_writePin+0x1c6>
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <GPIO_writePin+0x24>
    17ac:	d1 c0       	rjmp	.+418    	; 0x1950 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3d 83       	std	Y+5, r19	; 0x05
    17b6:	2c 83       	std	Y+4, r18	; 0x04
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <GPIO_writePin+0x3a>
    17c2:	43 c0       	rjmp	.+134    	; 0x184a <GPIO_writePin+0xc0>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <GPIO_writePin+0x4e>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	9d 81       	ldd	r25, Y+5	; 0x05
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	71 f0       	breq	.+28     	; 0x17f2 <GPIO_writePin+0x68>
    17d6:	bc c0       	rjmp	.+376    	; 0x1950 <GPIO_writePin+0x1c6>
    17d8:	2c 81       	ldd	r18, Y+4	; 0x04
    17da:	3d 81       	ldd	r19, Y+5	; 0x05
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <GPIO_writePin+0x5a>
    17e2:	5f c0       	rjmp	.+190    	; 0x18a2 <GPIO_writePin+0x118>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <GPIO_writePin+0x66>
    17ee:	85 c0       	rjmp	.+266    	; 0x18fa <GPIO_writePin+0x170>
    17f0:	af c0       	rjmp	.+350    	; 0x1950 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	a1 f4       	brne	.+40     	; 0x1820 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17f8:	ab e3       	ldi	r26, 0x3B	; 59
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	eb e3       	ldi	r30, 0x3B	; 59
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_writePin+0x8c>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_writePin+0x88>
    181a:	84 2b       	or	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	98 c0       	rjmp	.+304    	; 0x1950 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_writePin+0xb4>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_writePin+0xb0>
    1842:	80 95       	com	r24
    1844:	84 23       	and	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	83 c0       	rjmp	.+262    	; 0x1950 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	a1 f4       	brne	.+40     	; 0x1878 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1850:	a8 e3       	ldi	r26, 0x38	; 56
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e8 e3       	ldi	r30, 0x38	; 56
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_writePin+0xe4>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_writePin+0xe0>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	6c c0       	rjmp	.+216    	; 0x1950 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_writePin+0x10c>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_writePin+0x108>
    189a:	80 95       	com	r24
    189c:	84 23       	and	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	57 c0       	rjmp	.+174    	; 0x1950 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	a1 f4       	brne	.+40     	; 0x18d0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18a8:	a5 e3       	ldi	r26, 0x35	; 53
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e5 e3       	ldi	r30, 0x35	; 53
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x13c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x138>
    18ca:	84 2b       	or	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	40 c0       	rjmp	.+128    	; 0x1950 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_writePin+0x164>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_writePin+0x160>
    18f2:	80 95       	com	r24
    18f4:	84 23       	and	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	2b c0       	rjmp	.+86     	; 0x1950 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1900:	a2 e3       	ldi	r26, 0x32	; 50
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0x194>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0x190>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1928:	a2 e3       	ldi	r26, 0x32	; 50
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_writePin+0x1bc>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_writePin+0x1b8>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <GPIO_readPin+0x6>
    1966:	00 d0       	rcall	.+0      	; 0x1968 <GPIO_readPin+0x8>
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	8a 83       	std	Y+2, r24	; 0x02
    1970:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1972:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 30       	cpi	r24, 0x08	; 8
    1978:	08 f0       	brcs	.+2      	; 0x197c <GPIO_readPin+0x1c>
    197a:	84 c0       	rjmp	.+264    	; 0x1a84 <GPIO_readPin+0x124>
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	08 f0       	brcs	.+2      	; 0x1984 <GPIO_readPin+0x24>
    1982:	80 c0       	rjmp	.+256    	; 0x1a84 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3d 83       	std	Y+5, r19	; 0x05
    198c:	2c 83       	std	Y+4, r18	; 0x04
    198e:	4c 81       	ldd	r20, Y+4	; 0x04
    1990:	5d 81       	ldd	r21, Y+5	; 0x05
    1992:	41 30       	cpi	r20, 0x01	; 1
    1994:	51 05       	cpc	r21, r1
    1996:	79 f1       	breq	.+94     	; 0x19f6 <GPIO_readPin+0x96>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	91 05       	cpc	r25, r1
    19a0:	34 f4       	brge	.+12     	; 0x19ae <GPIO_readPin+0x4e>
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	21 15       	cp	r18, r1
    19a8:	31 05       	cpc	r19, r1
    19aa:	69 f0       	breq	.+26     	; 0x19c6 <GPIO_readPin+0x66>
    19ac:	6b c0       	rjmp	.+214    	; 0x1a84 <GPIO_readPin+0x124>
    19ae:	4c 81       	ldd	r20, Y+4	; 0x04
    19b0:	5d 81       	ldd	r21, Y+5	; 0x05
    19b2:	42 30       	cpi	r20, 0x02	; 2
    19b4:	51 05       	cpc	r21, r1
    19b6:	b9 f1       	breq	.+110    	; 0x1a26 <GPIO_readPin+0xc6>
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <GPIO_readPin+0x64>
    19c2:	49 c0       	rjmp	.+146    	; 0x1a56 <GPIO_readPin+0xf6>
    19c4:	5f c0       	rjmp	.+190    	; 0x1a84 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19c6:	e9 e3       	ldi	r30, 0x39	; 57
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <GPIO_readPin+0x7e>
    19da:	55 95       	asr	r21
    19dc:	47 95       	ror	r20
    19de:	8a 95       	dec	r24
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <GPIO_readPin+0x7a>
    19e2:	ca 01       	movw	r24, r20
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	90 70       	andi	r25, 0x00	; 0
    19e8:	88 23       	and	r24, r24
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	49 c0       	rjmp	.+146    	; 0x1a84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	47 c0       	rjmp	.+142    	; 0x1a84 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19f6:	e6 e3       	ldi	r30, 0x36	; 54
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a9 01       	movw	r20, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <GPIO_readPin+0xae>
    1a0a:	55 95       	asr	r21
    1a0c:	47 95       	ror	r20
    1a0e:	8a 95       	dec	r24
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <GPIO_readPin+0xaa>
    1a12:	ca 01       	movw	r24, r20
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	90 70       	andi	r25, 0x00	; 0
    1a18:	88 23       	and	r24, r24
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	31 c0       	rjmp	.+98     	; 0x1a84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	2f c0       	rjmp	.+94     	; 0x1a84 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a26:	e3 e3       	ldi	r30, 0x33	; 51
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a9 01       	movw	r20, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_readPin+0xde>
    1a3a:	55 95       	asr	r21
    1a3c:	47 95       	ror	r20
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_readPin+0xda>
    1a42:	ca 01       	movw	r24, r20
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	90 70       	andi	r25, 0x00	; 0
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	19 c0       	rjmp	.+50     	; 0x1a84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	17 c0       	rjmp	.+46     	; 0x1a84 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a56:	e0 e3       	ldi	r30, 0x30	; 48
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a9 01       	movw	r20, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <GPIO_readPin+0x10e>
    1a6a:	55 95       	asr	r21
    1a6c:	47 95       	ror	r20
    1a6e:	8a 95       	dec	r24
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <GPIO_readPin+0x10a>
    1a72:	ca 01       	movw	r24, r20
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	88 23       	and	r24, r24
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a82:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <GPIO_setupPortDirection+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_setupPortDirection+0x8>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	84 30       	cpi	r24, 0x04	; 4
    1aaa:	90 f5       	brcc	.+100    	; 0x1b10 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3c 83       	std	Y+4, r19	; 0x04
    1ab4:	2b 83       	std	Y+3, r18	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	d1 f0       	breq	.+52     	; 0x1af4 <GPIO_setupPortDirection+0x5e>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <GPIO_setupPortDirection+0x3e>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <GPIO_setupPortDirection+0x54>
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <GPIO_setupPortDirection+0x7a>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <GPIO_setupPortDirection+0x68>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	81 f0       	breq	.+32     	; 0x1b08 <GPIO_setupPortDirection+0x72>
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1aea:	ea e3       	ldi	r30, 0x3A	; 58
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1af4:	e7 e3       	ldi	r30, 0x37	; 55
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	80 83       	st	Z, r24
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1afe:	e4 e3       	ldi	r30, 0x34	; 52
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	80 83       	st	Z, r24
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b08:	e1 e3       	ldi	r30, 0x31	; 49
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <GPIO_writePort+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_writePort+0x8>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	90 f5       	brcc	.+100    	; 0x1b98 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3c 83       	std	Y+4, r19	; 0x04
    1b3c:	2b 83       	std	Y+3, r18	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	91 05       	cpc	r25, r1
    1b46:	d1 f0       	breq	.+52     	; 0x1b7c <GPIO_writePort+0x5e>
    1b48:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <GPIO_writePort+0x3e>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <GPIO_writePort+0x54>
    1b5a:	1e c0       	rjmp	.+60     	; 0x1b98 <GPIO_writePort+0x7a>
    1b5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <GPIO_writePort+0x68>
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	81 f0       	breq	.+32     	; 0x1b90 <GPIO_writePort+0x72>
    1b70:	13 c0       	rjmp	.+38     	; 0x1b98 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b72:	eb e3       	ldi	r30, 0x3B	; 59
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
    1b7a:	0e c0       	rjmp	.+28     	; 0x1b98 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b86:	e5 e3       	ldi	r30, 0x35	; 53
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b90:	e2 e3       	ldi	r30, 0x32	; 50
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <GPIO_readPort+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <GPIO_readPort+0x8>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bb4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	90 f5       	brcc	.+100    	; 0x1c20 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3c 83       	std	Y+4, r19	; 0x04
    1bc4:	2b 83       	std	Y+3, r18	; 0x03
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	d1 f0       	breq	.+52     	; 0x1c04 <GPIO_readPort+0x5e>
    1bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <GPIO_readPort+0x3e>
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <GPIO_readPort+0x54>
    1be2:	1e c0       	rjmp	.+60     	; 0x1c20 <GPIO_readPort+0x7a>
    1be4:	2b 81       	ldd	r18, Y+3	; 0x03
    1be6:	3c 81       	ldd	r19, Y+4	; 0x04
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <GPIO_readPort+0x68>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <GPIO_readPort+0x72>
    1bf8:	13 c0       	rjmp	.+38     	; 0x1c20 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bfa:	e9 e3       	ldi	r30, 0x39	; 57
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	0e c0       	rjmp	.+28     	; 0x1c20 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c04:	e6 e3       	ldi	r30, 0x36	; 54
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c0e:	e3 e3       	ldi	r30, 0x33	; 51
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c18:	e0 e3       	ldi	r30, 0x30	; 48
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	60 97       	sbiw	r28, 0x10	; 16
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	64 e0       	ldi	r22, 0x04	; 4
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	65 e0       	ldi	r22, 0x05	; 5
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	66 e0       	ldi	r22, 0x06	; 6
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	67 e0       	ldi	r22, 0x07	; 7
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	62 e0       	ldi	r22, 0x02	; 2
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	63 e0       	ldi	r22, 0x03	; 3
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c94:	1f 86       	std	Y+15, r1	; 0x0f
    1c96:	b1 c0       	rjmp	.+354    	; 0x1dfa <KEYPAD_getPressedKey+0x1ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	9c 5f       	subi	r25, 0xFC	; 252
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1caa:	98 2f       	mov	r25, r24
    1cac:	9c 5f       	subi	r25, 0xFC	; 252
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	69 2f       	mov	r22, r25
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1cb8:	18 8a       	std	Y+16, r1	; 0x10
    1cba:	1f c0       	rjmp	.+62     	; 0x1cfa <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	68 89       	ldd	r22, Y+16	; 0x10
    1cc0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <GPIO_readPin>
    1cc4:	88 23       	and	r24, r24
    1cc6:	b1 f4       	brne	.+44     	; 0x1cf4 <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	88 89       	ldd	r24, Y+16	; 0x10
    1cda:	89 0f       	add	r24, r25
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1ce2:	60 96       	adiw	r28, 0x10	; 16
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1cf4:	88 89       	ldd	r24, Y+16	; 0x10
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	88 8b       	std	Y+16, r24	; 0x10
    1cfa:	88 89       	ldd	r24, Y+16	; 0x10
    1cfc:	84 30       	cpi	r24, 0x04	; 4
    1cfe:	f0 f2       	brcs	.-68     	; 0x1cbc <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	98 2f       	mov	r25, r24
    1d04:	9c 5f       	subi	r25, 0xFC	; 252
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	69 2f       	mov	r22, r25
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GPIO_setupPinDirection>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 ea       	ldi	r26, 0xA0	; 160
    1d16:	b0 e4       	ldi	r27, 0x40	; 64
    1d18:	8b 87       	std	Y+11, r24	; 0x0b
    1d1a:	9c 87       	std	Y+12, r25	; 0x0c
    1d1c:	ad 87       	std	Y+13, r26	; 0x0d
    1d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a ef       	ldi	r20, 0xFA	; 250
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8f 83       	std	Y+7, r24	; 0x07
    1d3a:	98 87       	std	Y+8, r25	; 0x08
    1d3c:	a9 87       	std	Y+9, r26	; 0x09
    1d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <KEYPAD_getPressedKey+0x192>
    1da4:	88 ec       	ldi	r24, 0xC8	; 200
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <KEYPAD_getPressedKey+0x180>
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <KEYPAD_getPressedKey+0x174>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <KEYPAD_getPressedKey+0x1bc>
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	8f 87       	std	Y+15, r24	; 0x0f
    1dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfc:	84 30       	cpi	r24, 0x04	; 4
    1dfe:	08 f4       	brcc	.+2      	; 0x1e02 <KEYPAD_getPressedKey+0x1d2>
    1e00:	4b cf       	rjmp	.-362    	; 0x1c98 <KEYPAD_getPressedKey+0x68>
    1e02:	48 cf       	rjmp	.-368    	; 0x1c94 <KEYPAD_getPressedKey+0x64>

00001e04 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e12:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3c 83       	std	Y+4, r19	; 0x04
    1e1c:	2b 83       	std	Y+3, r18	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	88 30       	cpi	r24, 0x08	; 8
    1e24:	91 05       	cpc	r25, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e28:	70 c0       	rjmp	.+224    	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber+0x106>
    1e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2e:	29 30       	cpi	r18, 0x09	; 9
    1e30:	31 05       	cpc	r19, r1
    1e32:	5c f5       	brge	.+86     	; 0x1e8a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e3e:	59 c0       	rjmp	.+178    	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e40:	2b 81       	ldd	r18, Y+3	; 0x03
    1e42:	3c 81       	ldd	r19, Y+4	; 0x04
    1e44:	25 30       	cpi	r18, 0x05	; 5
    1e46:	31 05       	cpc	r19, r1
    1e48:	9c f4       	brge	.+38     	; 0x1e70 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	91 05       	cpc	r25, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e54:	48 c0       	rjmp	.+144    	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	23 30       	cpi	r18, 0x03	; 3
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e60:	45 c0       	rjmp	.+138    	; 0x1eec <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e6c:	39 c0       	rjmp	.+114    	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e6e:	67 c0       	rjmp	.+206    	; 0x1f3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e70:	2b 81       	ldd	r18, Y+3	; 0x03
    1e72:	3c 81       	ldd	r19, Y+4	; 0x04
    1e74:	26 30       	cpi	r18, 0x06	; 6
    1e76:	31 05       	cpc	r19, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e7a:	41 c0       	rjmp	.+130    	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	87 30       	cpi	r24, 0x07	; 7
    1e82:	91 05       	cpc	r25, r1
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e86:	3e c0       	rjmp	.+124    	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e88:	37 c0       	rjmp	.+110    	; 0x1ef8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8e:	2c 30       	cpi	r18, 0x0C	; 12
    1e90:	31 05       	cpc	r19, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e94:	46 c0       	rjmp	.+140    	; 0x1f22 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	8d 30       	cpi	r24, 0x0D	; 13
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	5c f4       	brge	.+22     	; 0x1eb6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	2a 30       	cpi	r18, 0x0A	; 10
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	b1 f1       	breq	.+108    	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	8b 30       	cpi	r24, 0x0B	; 11
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	a4 f5       	brge	.+104    	; 0x1f1c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1eb4:	2d c0       	rjmp	.+90     	; 0x1f10 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eba:	2e 30       	cpi	r18, 0x0E	; 14
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	b9 f1       	breq	.+110    	; 0x1f2e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	8e 30       	cpi	r24, 0x0E	; 14
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	7c f1       	brlt	.+94     	; 0x1f28 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	2f 30       	cpi	r18, 0x0F	; 15
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	79 f1       	breq	.+94     	; 0x1f32 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	80 31       	cpi	r24, 0x10	; 16
    1eda:	91 05       	cpc	r25, r1
    1edc:	69 f1       	breq	.+90     	; 0x1f38 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ede:	2f c0       	rjmp	.+94     	; 0x1f3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ee0:	87 e0       	ldi	r24, 0x07	; 7
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	2e c0       	rjmp	.+92     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ee6:	88 e0       	ldi	r24, 0x08	; 8
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	2b c0       	rjmp	.+86     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1eec:	89 e0       	ldi	r24, 0x09	; 9
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	28 c0       	rjmp	.+80     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ef2:	85 e2       	ldi	r24, 0x25	; 37
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	25 c0       	rjmp	.+74     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ef8:	84 e0       	ldi	r24, 0x04	; 4
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	22 c0       	rjmp	.+68     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	1f c0       	rjmp	.+62     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	1c c0       	rjmp	.+56     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f0a:	8a e2       	ldi	r24, 0x2A	; 42
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	19 c0       	rjmp	.+50     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	16 c0       	rjmp	.+44     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	10 c0       	rjmp	.+32     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1f22:	8d e2       	ldi	r24, 0x2D	; 45
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f28:	8d e0       	ldi	r24, 0x0D	; 13
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	0a c0       	rjmp	.+20     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f32:	8d e3       	ldi	r24, 0x3D	; 61
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f38:	8b e2       	ldi	r24, 0x2B	; 43
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <timerCounter>:
char main_choise;

static volatile uint8 tick = 0;

void timerCounter(void)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1f5a:	80 91 6c 01 	lds	r24, 0x016C
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	80 93 6c 01 	sts	0x016C, r24
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <myOwnDelay>:

void myOwnDelay(uint16 numofoverflows)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	2e 97       	sbiw	r28, 0x0e	; 14
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	99 87       	std	Y+9, r25	; 0x09
    1f80:	88 87       	std	Y+8, r24	; 0x08
	tick=0;
    1f82:	10 92 6c 01 	sts	0x016C, r1
	/*
	 * T overflow = 65.5 ms
	 * so 15 overflows to count 1 sec
	 */
	uint8 num=numofoverflows*15;
    1f86:	28 85       	ldd	r18, Y+8	; 0x08
    1f88:	39 85       	ldd	r19, Y+9	; 0x09
    1f8a:	c9 01       	movw	r24, r18
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	9c 01       	movw	r18, r24
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	22 0f       	add	r18, r18
    1f9c:	33 1f       	adc	r19, r19
    1f9e:	82 0f       	add	r24, r18
    1fa0:	93 1f       	adc	r25, r19
    1fa2:	89 83       	std	Y+1, r24	; 0x01

	Timer1_ConfigType timer_Configuration = {0, 0, prescalar_8, normal};
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	02 96       	adiw	r24, 0x02	; 2
    1fa8:	9b 87       	std	Y+11, r25	; 0x0b
    1faa:	8a 87       	std	Y+10, r24	; 0x0a
    1fac:	e8 e5       	ldi	r30, 0x58	; 88
    1fae:	f1 e0       	ldi	r31, 0x01	; 1
    1fb0:	fd 87       	std	Y+13, r31	; 0x0d
    1fb2:	ec 87       	std	Y+12, r30	; 0x0c
    1fb4:	f6 e0       	ldi	r31, 0x06	; 6
    1fb6:	fe 87       	std	Y+14, r31	; 0x0e
    1fb8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fba:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fbc:	00 80       	ld	r0, Z
    1fbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	9d 87       	std	Y+13, r25	; 0x0d
    1fc6:	8c 87       	std	Y+12, r24	; 0x0c
    1fc8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1fca:	fb 85       	ldd	r31, Y+11	; 0x0b
    1fcc:	00 82       	st	Z, r0
    1fce:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	9b 87       	std	Y+11, r25	; 0x0b
    1fd6:	8a 87       	std	Y+10, r24	; 0x0a
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	91 50       	subi	r25, 0x01	; 1
    1fdc:	9e 87       	std	Y+14, r25	; 0x0e
    1fde:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fe0:	ee 23       	and	r30, r30
    1fe2:	51 f7       	brne	.-44     	; 0x1fb8 <myOwnDelay+0x4e>
	Timer1_init(&timer_Configuration);
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	02 96       	adiw	r24, 0x02	; 2
    1fe8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <Timer1_init>
	/* Used call back which call in ISR for time1*/
	Timer1_setCallBack(timerCounter);
    1fec:	89 ea       	ldi	r24, 0xA9	; 169
    1fee:	9f e0       	ldi	r25, 0x0F	; 15
    1ff0:	0e 94 64 19 	call	0x32c8	; 0x32c8 <Timer1_setCallBack>
	/* Delay*/
	while(tick != num);
    1ff4:	90 91 6c 01 	lds	r25, 0x016C
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	98 17       	cp	r25, r24
    1ffc:	d9 f7       	brne	.-10     	; 0x1ff4 <myOwnDelay+0x8a>
	/* Deinitialization of timer1*/
	Timer1_deInit();
    1ffe:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Timer1_deInit>

}
    2002:	2e 96       	adiw	r28, 0x0e	; 14
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <checkpass>:

void checkpass(void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	6c 97       	sbiw	r28, 0x1c	; 28
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
	UART_sendString("checkpass#");
    2028:	80 e6       	ldi	r24, 0x60	; 96
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
	count3 = 0;
    2030:	10 92 69 01 	sts	0x0169, r1
    2034:	10 92 68 01 	sts	0x0168, r1
	pass3 = 0;
    2038:	10 92 63 01 	sts	0x0163, r1
    203c:	10 92 62 01 	sts	0x0162, r1
	key=0;
    2040:	10 92 77 01 	sts	0x0177, r1
    2044:	10 92 76 01 	sts	0x0176, r1
	LCD_clearScreen();
    2048:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
	lcd_displaystring("Plz enter pass:");
    204c:	8b e6       	ldi	r24, 0x6B	; 107
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
	LCD_movecursor(1,0);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_movecursor>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a8 e4       	ldi	r26, 0x48	; 72
    2066:	b3 e4       	ldi	r27, 0x43	; 67
    2068:	89 8f       	std	Y+25, r24	; 0x19
    206a:	9a 8f       	std	Y+26, r25	; 0x1a
    206c:	ab 8f       	std	Y+27, r26	; 0x1b
    206e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	69 8d       	ldd	r22, Y+25	; 0x19
    2072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a ef       	ldi	r20, 0xFA	; 250
    207e:	54 e4       	ldi	r21, 0x44	; 68
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8d 8b       	std	Y+21, r24	; 0x15
    208a:	9e 8b       	std	Y+22, r25	; 0x16
    208c:	af 8b       	std	Y+23, r26	; 0x17
    208e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2090:	6d 89       	ldd	r22, Y+21	; 0x15
    2092:	7e 89       	ldd	r23, Y+22	; 0x16
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <checkpass+0x9e>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 8b       	std	Y+20, r25	; 0x14
    20ae:	8b 8b       	std	Y+19, r24	; 0x13
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <checkpass+0x11c>
	else if (__tmp > 65535)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <checkpass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	69 8d       	ldd	r22, Y+25	; 0x19
    20cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <checkpass+0xfe>
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9a 8b       	std	Y+18, r25	; 0x12
    20fa:	89 8b       	std	Y+17, r24	; 0x11
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <checkpass+0xec>
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <checkpass+0xe0>
    211a:	bb c0       	rjmp	.+374    	; 0x2292 <checkpass+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	6d 89       	ldd	r22, Y+21	; 0x15
    211e:	7e 89       	ldd	r23, Y+22	; 0x16
    2120:	8f 89       	ldd	r24, Y+23	; 0x17
    2122:	98 8d       	ldd	r25, Y+24	; 0x18
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	98 8b       	std	Y+16, r25	; 0x10
    2136:	8f 87       	std	Y+15, r24	; 0x0f
    2138:	8f 85       	ldd	r24, Y+15	; 0x0f
    213a:	98 89       	ldd	r25, Y+16	; 0x10
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <checkpass+0x128>
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    2144:	a6 c0       	rjmp	.+332    	; 0x2292 <checkpass+0x27e>
	_delay_ms(200);
	while (count3 < 5) {
		key = KEYPAD_getPressedKey();
    2146:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <KEYPAD_getPressedKey>
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	90 93 77 01 	sts	0x0177, r25
    2152:	80 93 76 01 	sts	0x0176, r24
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a8 e4       	ldi	r26, 0x48	; 72
    215c:	b3 e4       	ldi	r27, 0x43	; 67
    215e:	8b 87       	std	Y+11, r24	; 0x0b
    2160:	9c 87       	std	Y+12, r25	; 0x0c
    2162:	ad 87       	std	Y+13, r26	; 0x0d
    2164:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	6b 85       	ldd	r22, Y+11	; 0x0b
    2168:	7c 85       	ldd	r23, Y+12	; 0x0c
    216a:	8d 85       	ldd	r24, Y+13	; 0x0d
    216c:	9e 85       	ldd	r25, Y+14	; 0x0e
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a ef       	ldi	r20, 0xFA	; 250
    2174:	54 e4       	ldi	r21, 0x44	; 68
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	8f 83       	std	Y+7, r24	; 0x07
    2180:	98 87       	std	Y+8, r25	; 0x08
    2182:	a9 87       	std	Y+9, r26	; 0x09
    2184:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <checkpass+0x194>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <checkpass+0x212>
	else if (__tmp > 65535)
    21a8:	6f 81       	ldd	r22, Y+7	; 0x07
    21aa:	78 85       	ldd	r23, Y+8	; 0x08
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <checkpass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <checkpass+0x1f4>
    21ea:	88 ec       	ldi	r24, 0xC8	; 200
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <checkpass+0x1e2>
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <checkpass+0x1d6>
    2210:	14 c0       	rjmp	.+40     	; 0x223a <checkpass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <checkpass+0x21e>
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		lcd_displayCharacter('*');
    223a:	8a e2       	ldi	r24, 0x2A	; 42
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 92 07 	call	0xf24	; 0xf24 <lcd_displayCharacter>

		if (key == '=')
    2242:	80 91 76 01 	lds	r24, 0x0176
    2246:	90 91 77 01 	lds	r25, 0x0177
    224a:	8d 33       	cpi	r24, 0x3D	; 61
    224c:	91 05       	cpc	r25, r1
    224e:	49 f1       	breq	.+82     	; 0x22a2 <checkpass+0x28e>
		{
			break;
		}
		pass3 = (pass3 * 10) + (key);
    2250:	80 91 62 01 	lds	r24, 0x0162
    2254:	90 91 63 01 	lds	r25, 0x0163
    2258:	9c 01       	movw	r18, r24
    225a:	22 0f       	add	r18, r18
    225c:	33 1f       	adc	r19, r19
    225e:	c9 01       	movw	r24, r18
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	28 0f       	add	r18, r24
    226a:	39 1f       	adc	r19, r25
    226c:	80 91 76 01 	lds	r24, 0x0176
    2270:	90 91 77 01 	lds	r25, 0x0177
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	90 93 63 01 	sts	0x0163, r25
    227c:	80 93 62 01 	sts	0x0162, r24
		count3++;
    2280:	80 91 68 01 	lds	r24, 0x0168
    2284:	90 91 69 01 	lds	r25, 0x0169
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	90 93 69 01 	sts	0x0169, r25
    228e:	80 93 68 01 	sts	0x0168, r24
	key=0;
	LCD_clearScreen();
	lcd_displaystring("Plz enter pass:");
	LCD_movecursor(1,0);
	_delay_ms(200);
	while (count3 < 5) {
    2292:	80 91 68 01 	lds	r24, 0x0168
    2296:	90 91 69 01 	lds	r25, 0x0169
    229a:	85 30       	cpi	r24, 0x05	; 5
    229c:	91 05       	cpc	r25, r1
    229e:	08 f4       	brcc	.+2      	; 0x22a2 <checkpass+0x28e>
    22a0:	52 cf       	rjmp	.-348    	; 0x2146 <checkpass+0x132>
		}
		pass3 = (pass3 * 10) + (key);
		count3++;

	}
	itoa(pass3, password3, 10);
    22a2:	80 91 62 01 	lds	r24, 0x0162
    22a6:	90 91 63 01 	lds	r25, 0x0163
    22aa:	20 e8       	ldi	r18, 0x80	; 128
    22ac:	31 e0       	ldi	r19, 0x01	; 1
    22ae:	b9 01       	movw	r22, r18
    22b0:	4a e0       	ldi	r20, 0x0A	; 10
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <itoa>
	password3[count3]='#';
    22b8:	80 91 68 01 	lds	r24, 0x0168
    22bc:	90 91 69 01 	lds	r25, 0x0169
    22c0:	fc 01       	movw	r30, r24
    22c2:	e0 58       	subi	r30, 0x80	; 128
    22c4:	fe 4f       	sbci	r31, 0xFE	; 254
    22c6:	83 e2       	ldi	r24, 0x23	; 35
    22c8:	80 83       	st	Z, r24
	password3[count3+1]='\0';
    22ca:	80 91 68 01 	lds	r24, 0x0168
    22ce:	90 91 69 01 	lds	r25, 0x0169
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	fc 01       	movw	r30, r24
    22d6:	e0 58       	subi	r30, 0x80	; 128
    22d8:	fe 4f       	sbci	r31, 0xFE	; 254
    22da:	10 82       	st	Z, r1
	while(UART_recieveByte() != MC2_READY){}
    22dc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <UART_recieveByte>
    22e0:	80 31       	cpi	r24, 0x10	; 16
    22e2:	e1 f7       	brne	.-8      	; 0x22dc <checkpass+0x2c8>
	UART_sendString(password3);
    22e4:	80 e8       	ldi	r24, 0x80	; 128
    22e6:	91 e0       	ldi	r25, 0x01	; 1
    22e8:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
}
    22ec:	6c 96       	adiw	r28, 0x1c	; 28
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <main_menu>:
void main_menu(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	c6 54       	subi	r28, 0x46	; 70
    2308:	d0 40       	sbci	r29, 0x00	; 0
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
	char g[10];
	LCD_clearScreen();
    2314:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
	lcd_displaystring("+ : Open the door");
    2318:	8b e7       	ldi	r24, 0x7B	; 123
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
	LCD_movecursor(1,0);
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_movecursor>
	lcd_displaystring("- : Change pass");
    232c:	8d e8       	ldi	r24, 0x8D	; 141
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
	key = KEYPAD_getPressedKey();
    2334:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <KEYPAD_getPressedKey>
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	90 93 77 01 	sts	0x0177, r25
    2340:	80 93 76 01 	sts	0x0176, r24

	if(key == '+')
    2344:	80 91 76 01 	lds	r24, 0x0176
    2348:	90 91 77 01 	lds	r25, 0x0177
    234c:	8b 32       	cpi	r24, 0x2B	; 43
    234e:	91 05       	cpc	r25, r1
    2350:	09 f0       	breq	.+2      	; 0x2354 <main_menu+0x56>
    2352:	e2 c0       	rjmp	.+452    	; 0x2518 <main_menu+0x21a>
	{

		for (int i = 1; i <= 3; i++)
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9c af       	std	Y+60, r25	; 0x3c
    235a:	8b af       	std	Y+59, r24	; 0x3b
    235c:	d6 c0       	rjmp	.+428    	; 0x250a <main_menu+0x20c>
		{
			checkpass();
    235e:	0e 94 0a 10 	call	0x2014	; 0x2014 <checkpass>
			UART_receiveString(g);
    2362:	ce 01       	movw	r24, r28
    2364:	cd 96       	adiw	r24, 0x3d	; 61
    2366:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <UART_receiveString>

			if(strcmp(g,"matched") == 0)
    236a:	ce 01       	movw	r24, r28
    236c:	cd 96       	adiw	r24, 0x3d	; 61
    236e:	2d e9       	ldi	r18, 0x9D	; 157
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	b9 01       	movw	r22, r18
    2374:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <strcmp>
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f5       	brne	.+90     	; 0x23d6 <main_menu+0xd8>
			{

				LCD_clearScreen();
    237c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>

				while(UART_recieveByte() != MC2_READY){}
    2380:	0e 94 a1 1a 	call	0x3542	; 0x3542 <UART_recieveByte>
    2384:	80 31       	cpi	r24, 0x10	; 16
    2386:	e1 f7       	brne	.-8      	; 0x2380 <main_menu+0x82>
				UART_sendString("opendoor#");
    2388:	85 ea       	ldi	r24, 0xA5	; 165
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
				lcd_displaystring("Door is Unlocking");
    2390:	8f ea       	ldi	r24, 0xAF	; 175
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
				myOwnDelay(15);
    2398:	8f e0       	ldi	r24, 0x0F	; 15
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <myOwnDelay>
				LCD_clearScreen();
    23a0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("Door is open");
    23a4:	81 ec       	ldi	r24, 0xC1	; 193
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
				myOwnDelay(3);
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <myOwnDelay>
				LCD_clearScreen();
    23b4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("Door is Locking");
    23b8:	8e ec       	ldi	r24, 0xCE	; 206
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
				myOwnDelay(15);
    23c0:	8f e0       	ldi	r24, 0x0F	; 15
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <myOwnDelay>

				swap=1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	90 93 6b 01 	sts	0x016B, r25
    23d0:	80 93 6a 01 	sts	0x016A, r24
    23d4:	4a c2       	rjmp	.+1172   	; 0x286a <main_menu+0x56c>
				break;
			}else if(strcmp(g,"unmatched") == 0)
    23d6:	ce 01       	movw	r24, r28
    23d8:	cd 96       	adiw	r24, 0x3d	; 61
    23da:	2e ed       	ldi	r18, 0xDE	; 222
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	b9 01       	movw	r22, r18
    23e0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <strcmp>
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	09 f0       	breq	.+2      	; 0x23ea <main_menu+0xec>
    23e8:	78 c0       	rjmp	.+240    	; 0x24da <main_menu+0x1dc>
			{

				LCD_clearScreen();
    23ea:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("incorrect pass");
    23ee:	88 ee       	ldi	r24, 0xE8	; 232
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	aa e7       	ldi	r26, 0x7A	; 122
    23fc:	b4 e4       	ldi	r27, 0x44	; 68
    23fe:	8d ab       	std	Y+53, r24	; 0x35
    2400:	9e ab       	std	Y+54, r25	; 0x36
    2402:	af ab       	std	Y+55, r26	; 0x37
    2404:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	6d a9       	ldd	r22, Y+53	; 0x35
    2408:	7e a9       	ldd	r23, Y+54	; 0x36
    240a:	8f a9       	ldd	r24, Y+55	; 0x37
    240c:	98 ad       	ldd	r25, Y+56	; 0x38
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a ef       	ldi	r20, 0xFA	; 250
    2414:	54 e4       	ldi	r21, 0x44	; 68
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	89 ab       	std	Y+49, r24	; 0x31
    2420:	9a ab       	std	Y+50, r25	; 0x32
    2422:	ab ab       	std	Y+51, r26	; 0x33
    2424:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2426:	69 a9       	ldd	r22, Y+49	; 0x31
    2428:	7a a9       	ldd	r23, Y+50	; 0x32
    242a:	8b a9       	ldd	r24, Y+51	; 0x33
    242c:	9c a9       	ldd	r25, Y+52	; 0x34
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <main_menu+0x14a>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	98 ab       	std	Y+48, r25	; 0x30
    2444:	8f a7       	std	Y+47, r24	; 0x2f
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <main_menu+0x1c8>
	else if (__tmp > 65535)
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <main_menu+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	6d a9       	ldd	r22, Y+53	; 0x35
    2462:	7e a9       	ldd	r23, Y+54	; 0x36
    2464:	8f a9       	ldd	r24, Y+55	; 0x37
    2466:	98 ad       	ldd	r25, Y+56	; 0x38
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <main_menu+0x1aa>
    248a:	88 ec       	ldi	r24, 0xC8	; 200
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9e a7       	std	Y+46, r25	; 0x2e
    2490:	8d a7       	std	Y+45, r24	; 0x2d
    2492:	8d a5       	ldd	r24, Y+45	; 0x2d
    2494:	9e a5       	ldd	r25, Y+46	; 0x2e
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <main_menu+0x198>
    249a:	9e a7       	std	Y+46, r25	; 0x2e
    249c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a0:	98 a9       	ldd	r25, Y+48	; 0x30
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	98 ab       	std	Y+48, r25	; 0x30
    24a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24aa:	98 a9       	ldd	r25, Y+48	; 0x30
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <main_menu+0x18c>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <main_menu+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	69 a9       	ldd	r22, Y+49	; 0x31
    24b4:	7a a9       	ldd	r23, Y+50	; 0x32
    24b6:	8b a9       	ldd	r24, Y+51	; 0x33
    24b8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	98 ab       	std	Y+48, r25	; 0x30
    24c4:	8f a7       	std	Y+47, r24	; 0x2f
    24c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ca:	9c a7       	std	Y+44, r25	; 0x2c
    24cc:	8b a7       	std	Y+43, r24	; 0x2b
    24ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <main_menu+0x1d4>
    24d6:	9c a7       	std	Y+44, r25	; 0x2c
    24d8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);

			}
			if(i==3)
    24da:	8b ad       	ldd	r24, Y+59	; 0x3b
    24dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    24de:	83 30       	cpi	r24, 0x03	; 3
    24e0:	91 05       	cpc	r25, r1
    24e2:	71 f4       	brne	.+28     	; 0x2500 <main_menu+0x202>
			{
				UART_sendString("error#");
    24e4:	87 ef       	ldi	r24, 0xF7	; 247
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
				LCD_clearScreen();
    24ec:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("error");
    24f0:	8e ef       	ldi	r24, 0xFE	; 254
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
				myOwnDelay(60);
    24f8:	8c e3       	ldi	r24, 0x3C	; 60
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <myOwnDelay>
	key = KEYPAD_getPressedKey();

	if(key == '+')
	{

		for (int i = 1; i <= 3; i++)
    2500:	8b ad       	ldd	r24, Y+59	; 0x3b
    2502:	9c ad       	ldd	r25, Y+60	; 0x3c
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	9c af       	std	Y+60, r25	; 0x3c
    2508:	8b af       	std	Y+59, r24	; 0x3b
    250a:	8b ad       	ldd	r24, Y+59	; 0x3b
    250c:	9c ad       	ldd	r25, Y+60	; 0x3c
    250e:	84 30       	cpi	r24, 0x04	; 4
    2510:	91 05       	cpc	r25, r1
    2512:	0c f4       	brge	.+2      	; 0x2516 <main_menu+0x218>
    2514:	24 cf       	rjmp	.-440    	; 0x235e <main_menu+0x60>
    2516:	a9 c1       	rjmp	.+850    	; 0x286a <main_menu+0x56c>
			}
		}


	}
	else if(key == '-')
    2518:	80 91 76 01 	lds	r24, 0x0176
    251c:	90 91 77 01 	lds	r25, 0x0177
    2520:	8d 32       	cpi	r24, 0x2D	; 45
    2522:	91 05       	cpc	r25, r1
    2524:	09 f0       	breq	.+2      	; 0x2528 <main_menu+0x22a>
    2526:	a1 c1       	rjmp	.+834    	; 0x286a <main_menu+0x56c>
	{
		for (int i = 1; i <= 3; i++)
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9a af       	std	Y+58, r25	; 0x3a
    252e:	89 af       	std	Y+57, r24	; 0x39
    2530:	96 c1       	rjmp	.+812    	; 0x285e <main_menu+0x560>
		{
			checkpass();
    2532:	0e 94 0a 10 	call	0x2014	; 0x2014 <checkpass>
			UART_receiveString(g);
    2536:	ce 01       	movw	r24, r28
    2538:	cd 96       	adiw	r24, 0x3d	; 61
    253a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <UART_receiveString>

			if(strcmp(g,"matched") == 0)
    253e:	ce 01       	movw	r24, r28
    2540:	cd 96       	adiw	r24, 0x3d	; 61
    2542:	2d e9       	ldi	r18, 0x9D	; 157
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	b9 01       	movw	r22, r18
    2548:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <strcmp>
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	09 f0       	breq	.+2      	; 0x2552 <main_menu+0x254>
    2550:	7d c0       	rjmp	.+250    	; 0x264c <main_menu+0x34e>
			{

				LCD_clearScreen();
    2552:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("correct pass");
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	aa e7       	ldi	r26, 0x7A	; 122
    2564:	b4 e4       	ldi	r27, 0x44	; 68
    2566:	8f a3       	std	Y+39, r24	; 0x27
    2568:	98 a7       	std	Y+40, r25	; 0x28
    256a:	a9 a7       	std	Y+41, r26	; 0x29
    256c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6f a1       	ldd	r22, Y+39	; 0x27
    2570:	78 a5       	ldd	r23, Y+40	; 0x28
    2572:	89 a5       	ldd	r24, Y+41	; 0x29
    2574:	9a a5       	ldd	r25, Y+42	; 0x2a
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a ef       	ldi	r20, 0xFA	; 250
    257c:	54 e4       	ldi	r21, 0x44	; 68
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8b a3       	std	Y+35, r24	; 0x23
    2588:	9c a3       	std	Y+36, r25	; 0x24
    258a:	ad a3       	std	Y+37, r26	; 0x25
    258c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    258e:	6b a1       	ldd	r22, Y+35	; 0x23
    2590:	7c a1       	ldd	r23, Y+36	; 0x24
    2592:	8d a1       	ldd	r24, Y+37	; 0x25
    2594:	9e a1       	ldd	r25, Y+38	; 0x26
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <main_menu+0x2b2>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <main_menu+0x330>
	else if (__tmp > 65535)
    25b0:	6b a1       	ldd	r22, Y+35	; 0x23
    25b2:	7c a1       	ldd	r23, Y+36	; 0x24
    25b4:	8d a1       	ldd	r24, Y+37	; 0x25
    25b6:	9e a1       	ldd	r25, Y+38	; 0x26
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <main_menu+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6f a1       	ldd	r22, Y+39	; 0x27
    25ca:	78 a5       	ldd	r23, Y+40	; 0x28
    25cc:	89 a5       	ldd	r24, Y+41	; 0x29
    25ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9a a3       	std	Y+34, r25	; 0x22
    25ee:	89 a3       	std	Y+33, r24	; 0x21
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <main_menu+0x312>
    25f2:	88 ec       	ldi	r24, 0xC8	; 200
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	98 a3       	std	Y+32, r25	; 0x20
    25f8:	8f 8f       	std	Y+31, r24	; 0x1f
    25fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25fc:	98 a1       	ldd	r25, Y+32	; 0x20
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <main_menu+0x300>
    2602:	98 a3       	std	Y+32, r25	; 0x20
    2604:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	89 a1       	ldd	r24, Y+33	; 0x21
    2608:	9a a1       	ldd	r25, Y+34	; 0x22
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9a a3       	std	Y+34, r25	; 0x22
    260e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	89 a1       	ldd	r24, Y+33	; 0x21
    2612:	9a a1       	ldd	r25, Y+34	; 0x22
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <main_menu+0x2f4>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <main_menu+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6b a1       	ldd	r22, Y+35	; 0x23
    261c:	7c a1       	ldd	r23, Y+36	; 0x24
    261e:	8d a1       	ldd	r24, Y+37	; 0x25
    2620:	9e a1       	ldd	r25, Y+38	; 0x26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9a a3       	std	Y+34, r25	; 0x22
    262c:	89 a3       	std	Y+33, r24	; 0x21
    262e:	89 a1       	ldd	r24, Y+33	; 0x21
    2630:	9a a1       	ldd	r25, Y+34	; 0x22
    2632:	9e 8f       	std	Y+30, r25	; 0x1e
    2634:	8d 8f       	std	Y+29, r24	; 0x1d
    2636:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2638:	9e 8d       	ldd	r25, Y+30	; 0x1e
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <main_menu+0x33c>
    263e:	9e 8f       	std	Y+30, r25	; 0x1e
    2640:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				swap=0;
    2642:	10 92 6b 01 	sts	0x016B, r1
    2646:	10 92 6a 01 	sts	0x016A, r1
    264a:	0f c1       	rjmp	.+542    	; 0x286a <main_menu+0x56c>
				break;
			}else if(strcmp(g,"unmatched") == 0)
    264c:	ce 01       	movw	r24, r28
    264e:	cd 96       	adiw	r24, 0x3d	; 61
    2650:	2e ed       	ldi	r18, 0xDE	; 222
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	b9 01       	movw	r22, r18
    2656:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <strcmp>
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	09 f0       	breq	.+2      	; 0x2660 <main_menu+0x362>
    265e:	78 c0       	rjmp	.+240    	; 0x2750 <main_menu+0x452>
			{

				LCD_clearScreen();
    2660:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("incorrect pass");
    2664:	88 ee       	ldi	r24, 0xE8	; 232
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	aa e7       	ldi	r26, 0x7A	; 122
    2672:	b4 e4       	ldi	r27, 0x44	; 68
    2674:	89 8f       	std	Y+25, r24	; 0x19
    2676:	9a 8f       	std	Y+26, r25	; 0x1a
    2678:	ab 8f       	std	Y+27, r26	; 0x1b
    267a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	69 8d       	ldd	r22, Y+25	; 0x19
    267e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a ef       	ldi	r20, 0xFA	; 250
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8d 8b       	std	Y+21, r24	; 0x15
    2696:	9e 8b       	std	Y+22, r25	; 0x16
    2698:	af 8b       	std	Y+23, r26	; 0x17
    269a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269c:	6d 89       	ldd	r22, Y+21	; 0x15
    269e:	7e 89       	ldd	r23, Y+22	; 0x16
    26a0:	8f 89       	ldd	r24, Y+23	; 0x17
    26a2:	98 8d       	ldd	r25, Y+24	; 0x18
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <main_menu+0x3c0>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <main_menu+0x43e>
	else if (__tmp > 65535)
    26be:	6d 89       	ldd	r22, Y+21	; 0x15
    26c0:	7e 89       	ldd	r23, Y+22	; 0x16
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <main_menu+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	69 8d       	ldd	r22, Y+25	; 0x19
    26d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <main_menu+0x420>
    2700:	88 ec       	ldi	r24, 0xC8	; 200
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9a 8b       	std	Y+18, r25	; 0x12
    2706:	89 8b       	std	Y+17, r24	; 0x11
    2708:	89 89       	ldd	r24, Y+17	; 0x11
    270a:	9a 89       	ldd	r25, Y+18	; 0x12
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <main_menu+0x40e>
    2710:	9a 8b       	std	Y+18, r25	; 0x12
    2712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8b 89       	ldd	r24, Y+19	; 0x13
    2720:	9c 89       	ldd	r25, Y+20	; 0x14
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <main_menu+0x402>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <main_menu+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9c 8b       	std	Y+20, r25	; 0x14
    273a:	8b 8b       	std	Y+19, r24	; 0x13
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	98 8b       	std	Y+16, r25	; 0x10
    2742:	8f 87       	std	Y+15, r24	; 0x0f
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	98 89       	ldd	r25, Y+16	; 0x10
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main_menu+0x44a>
    274c:	98 8b       	std	Y+16, r25	; 0x10
    274e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);

			}
			if(i==3)
    2750:	89 ad       	ldd	r24, Y+57	; 0x39
    2752:	9a ad       	ldd	r25, Y+58	; 0x3a
    2754:	83 30       	cpi	r24, 0x03	; 3
    2756:	91 05       	cpc	r25, r1
    2758:	09 f0       	breq	.+2      	; 0x275c <main_menu+0x45e>
    275a:	7c c0       	rjmp	.+248    	; 0x2854 <main_menu+0x556>
			{
				UART_sendString("error#");
    275c:	87 ef       	ldi	r24, 0xF7	; 247
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
				LCD_clearScreen();
    2764:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
				lcd_displaystring("error");
    2768:	8e ef       	ldi	r24, 0xFE	; 254
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e4       	ldi	r25, 0x40	; 64
    2774:	ac e9       	ldi	r26, 0x9C	; 156
    2776:	b5 e4       	ldi	r27, 0x45	; 69
    2778:	8b 87       	std	Y+11, r24	; 0x0b
    277a:	9c 87       	std	Y+12, r25	; 0x0c
    277c:	ad 87       	std	Y+13, r26	; 0x0d
    277e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a ef       	ldi	r20, 0xFA	; 250
    278e:	54 e4       	ldi	r21, 0x44	; 68
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	8f 83       	std	Y+7, r24	; 0x07
    279a:	98 87       	std	Y+8, r25	; 0x08
    279c:	a9 87       	std	Y+9, r26	; 0x09
    279e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <main_menu+0x4c4>
		__ticks = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	3f c0       	rjmp	.+126    	; 0x2840 <main_menu+0x542>
	else if (__tmp > 65535)
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	3f ef       	ldi	r19, 0xFF	; 255
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	57 e4       	ldi	r21, 0x47	; 71
    27d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	4c f5       	brge	.+82     	; 0x282c <main_menu+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27da:	6b 85       	ldd	r22, Y+11	; 0x0b
    27dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27de:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e2       	ldi	r20, 0x20	; 32
    27e8:	51 e4       	ldi	r21, 0x41	; 65
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
    2802:	0f c0       	rjmp	.+30     	; 0x2822 <main_menu+0x524>
    2804:	88 ec       	ldi	r24, 0xC8	; 200
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	8b 83       	std	Y+3, r24	; 0x03
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <main_menu+0x512>
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	69 f7       	brne	.-38     	; 0x2804 <main_menu+0x506>
    282a:	14 c0       	rjmp	.+40     	; 0x2854 <main_menu+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <main_menu+0x54e>
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01


	}
	else if(key == '-')
	{
		for (int i = 1; i <= 3; i++)
    2854:	89 ad       	ldd	r24, Y+57	; 0x39
    2856:	9a ad       	ldd	r25, Y+58	; 0x3a
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	9a af       	std	Y+58, r25	; 0x3a
    285c:	89 af       	std	Y+57, r24	; 0x39
    285e:	89 ad       	ldd	r24, Y+57	; 0x39
    2860:	9a ad       	ldd	r25, Y+58	; 0x3a
    2862:	84 30       	cpi	r24, 0x04	; 4
    2864:	91 05       	cpc	r25, r1
    2866:	0c f4       	brge	.+2      	; 0x286a <main_menu+0x56c>
    2868:	64 ce       	rjmp	.-824    	; 0x2532 <main_menu+0x234>
				lcd_displaystring("error");
				_delay_ms(5000);
			}
		}
	}
}
    286a:	ca 5b       	subi	r28, 0xBA	; 186
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <setpassword>:
void setpassword() {
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	aa 97       	sbiw	r28, 0x2a	; 42
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
	UART_sendString("setpass#");
    2892:	81 e1       	ldi	r24, 0x11	; 17
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
	count1 = 0;
    289a:	10 92 65 01 	sts	0x0165, r1
    289e:	10 92 64 01 	sts	0x0164, r1
	pass1 = 0;
    28a2:	10 92 5f 01 	sts	0x015F, r1
    28a6:	10 92 5e 01 	sts	0x015E, r1
	key=0;
    28aa:	10 92 77 01 	sts	0x0177, r1
    28ae:	10 92 76 01 	sts	0x0176, r1
	LCD_clearScreen();
    28b2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
	lcd_displaystring("Plz enter pass:");
    28b6:	8b e6       	ldi	r24, 0x6B	; 107
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
	LCD_movecursor(1,0);
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_movecursor>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a8 e4       	ldi	r26, 0x48	; 72
    28d0:	b3 e4       	ldi	r27, 0x43	; 67
    28d2:	8f a3       	std	Y+39, r24	; 0x27
    28d4:	98 a7       	std	Y+40, r25	; 0x28
    28d6:	a9 a7       	std	Y+41, r26	; 0x29
    28d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	6f a1       	ldd	r22, Y+39	; 0x27
    28dc:	78 a5       	ldd	r23, Y+40	; 0x28
    28de:	89 a5       	ldd	r24, Y+41	; 0x29
    28e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a ef       	ldi	r20, 0xFA	; 250
    28e8:	54 e4       	ldi	r21, 0x44	; 68
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8b a3       	std	Y+35, r24	; 0x23
    28f4:	9c a3       	std	Y+36, r25	; 0x24
    28f6:	ad a3       	std	Y+37, r26	; 0x25
    28f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28fa:	6b a1       	ldd	r22, Y+35	; 0x23
    28fc:	7c a1       	ldd	r23, Y+36	; 0x24
    28fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2900:	9e a1       	ldd	r25, Y+38	; 0x26
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	2c f4       	brge	.+10     	; 0x291c <setpassword+0x9e>
		__ticks = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	89 a3       	std	Y+33, r24	; 0x21
    291a:	3f c0       	rjmp	.+126    	; 0x299a <setpassword+0x11c>
	else if (__tmp > 65535)
    291c:	6b a1       	ldd	r22, Y+35	; 0x23
    291e:	7c a1       	ldd	r23, Y+36	; 0x24
    2920:	8d a1       	ldd	r24, Y+37	; 0x25
    2922:	9e a1       	ldd	r25, Y+38	; 0x26
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	4c f5       	brge	.+82     	; 0x2986 <setpassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	6f a1       	ldd	r22, Y+39	; 0x27
    2936:	78 a5       	ldd	r23, Y+40	; 0x28
    2938:	89 a5       	ldd	r24, Y+41	; 0x29
    293a:	9a a5       	ldd	r25, Y+42	; 0x2a
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9a a3       	std	Y+34, r25	; 0x22
    295a:	89 a3       	std	Y+33, r24	; 0x21
    295c:	0f c0       	rjmp	.+30     	; 0x297c <setpassword+0xfe>
    295e:	88 ec       	ldi	r24, 0xC8	; 200
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	98 a3       	std	Y+32, r25	; 0x20
    2964:	8f 8f       	std	Y+31, r24	; 0x1f
    2966:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2968:	98 a1       	ldd	r25, Y+32	; 0x20
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <setpassword+0xec>
    296e:	98 a3       	std	Y+32, r25	; 0x20
    2970:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	89 a1       	ldd	r24, Y+33	; 0x21
    2974:	9a a1       	ldd	r25, Y+34	; 0x22
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	9a a3       	std	Y+34, r25	; 0x22
    297a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	89 a1       	ldd	r24, Y+33	; 0x21
    297e:	9a a1       	ldd	r25, Y+34	; 0x22
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	69 f7       	brne	.-38     	; 0x295e <setpassword+0xe0>
    2984:	bb c0       	rjmp	.+374    	; 0x2afc <setpassword+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	6b a1       	ldd	r22, Y+35	; 0x23
    2988:	7c a1       	ldd	r23, Y+36	; 0x24
    298a:	8d a1       	ldd	r24, Y+37	; 0x25
    298c:	9e a1       	ldd	r25, Y+38	; 0x26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9a a3       	std	Y+34, r25	; 0x22
    2998:	89 a3       	std	Y+33, r24	; 0x21
    299a:	89 a1       	ldd	r24, Y+33	; 0x21
    299c:	9a a1       	ldd	r25, Y+34	; 0x22
    299e:	9e 8f       	std	Y+30, r25	; 0x1e
    29a0:	8d 8f       	std	Y+29, r24	; 0x1d
    29a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <setpassword+0x128>
    29aa:	9e 8f       	std	Y+30, r25	; 0x1e
    29ac:	8d 8f       	std	Y+29, r24	; 0x1d
    29ae:	a6 c0       	rjmp	.+332    	; 0x2afc <setpassword+0x27e>
	_delay_ms(200);
	while (count1 < 5) {
		key = KEYPAD_getPressedKey();
    29b0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <KEYPAD_getPressedKey>
    29b4:	88 2f       	mov	r24, r24
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	90 93 77 01 	sts	0x0177, r25
    29bc:	80 93 76 01 	sts	0x0176, r24
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a8 e4       	ldi	r26, 0x48	; 72
    29c6:	b3 e4       	ldi	r27, 0x43	; 67
    29c8:	89 8f       	std	Y+25, r24	; 0x19
    29ca:	9a 8f       	std	Y+26, r25	; 0x1a
    29cc:	ab 8f       	std	Y+27, r26	; 0x1b
    29ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d0:	69 8d       	ldd	r22, Y+25	; 0x19
    29d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	4a ef       	ldi	r20, 0xFA	; 250
    29de:	54 e4       	ldi	r21, 0x44	; 68
    29e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	8d 8b       	std	Y+21, r24	; 0x15
    29ea:	9e 8b       	std	Y+22, r25	; 0x16
    29ec:	af 8b       	std	Y+23, r26	; 0x17
    29ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29f0:	6d 89       	ldd	r22, Y+21	; 0x15
    29f2:	7e 89       	ldd	r23, Y+22	; 0x16
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e8       	ldi	r20, 0x80	; 128
    29fe:	5f e3       	ldi	r21, 0x3F	; 63
    2a00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a04:	88 23       	and	r24, r24
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <setpassword+0x194>
		__ticks = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9c 8b       	std	Y+20, r25	; 0x14
    2a0e:	8b 8b       	std	Y+19, r24	; 0x13
    2a10:	3f c0       	rjmp	.+126    	; 0x2a90 <setpassword+0x212>
	else if (__tmp > 65535)
    2a12:	6d 89       	ldd	r22, Y+21	; 0x15
    2a14:	7e 89       	ldd	r23, Y+22	; 0x16
    2a16:	8f 89       	ldd	r24, Y+23	; 0x17
    2a18:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	3f ef       	ldi	r19, 0xFF	; 255
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	57 e4       	ldi	r21, 0x47	; 71
    2a22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	4c f5       	brge	.+82     	; 0x2a7c <setpassword+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e2       	ldi	r20, 0x20	; 32
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9c 8b       	std	Y+20, r25	; 0x14
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <setpassword+0x1f4>
    2a54:	88 ec       	ldi	r24, 0xC8	; 200
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9a 8b       	std	Y+18, r25	; 0x12
    2a5a:	89 8b       	std	Y+17, r24	; 0x11
    2a5c:	89 89       	ldd	r24, Y+17	; 0x11
    2a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <setpassword+0x1e2>
    2a64:	9a 8b       	std	Y+18, r25	; 0x12
    2a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a68:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	9c 8b       	std	Y+20, r25	; 0x14
    2a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	69 f7       	brne	.-38     	; 0x2a54 <setpassword+0x1d6>
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <setpassword+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	98 8b       	std	Y+16, r25	; 0x10
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
    2a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9a:	98 89       	ldd	r25, Y+16	; 0x10
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <setpassword+0x21e>
    2aa0:	98 8b       	std	Y+16, r25	; 0x10
    2aa2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		lcd_displayCharacter('*');
    2aa4:	8a e2       	ldi	r24, 0x2A	; 42
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	0e 94 92 07 	call	0xf24	; 0xf24 <lcd_displayCharacter>

		if (key == '=')
    2aac:	80 91 76 01 	lds	r24, 0x0176
    2ab0:	90 91 77 01 	lds	r25, 0x0177
    2ab4:	8d 33       	cpi	r24, 0x3D	; 61
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	49 f1       	breq	.+82     	; 0x2b0c <setpassword+0x28e>
		{
			break;
		}
		pass1 = (pass1 * 10) + (key);
    2aba:	80 91 5e 01 	lds	r24, 0x015E
    2abe:	90 91 5f 01 	lds	r25, 0x015F
    2ac2:	9c 01       	movw	r18, r24
    2ac4:	22 0f       	add	r18, r18
    2ac6:	33 1f       	adc	r19, r19
    2ac8:	c9 01       	movw	r24, r18
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	28 0f       	add	r18, r24
    2ad4:	39 1f       	adc	r19, r25
    2ad6:	80 91 76 01 	lds	r24, 0x0176
    2ada:	90 91 77 01 	lds	r25, 0x0177
    2ade:	82 0f       	add	r24, r18
    2ae0:	93 1f       	adc	r25, r19
    2ae2:	90 93 5f 01 	sts	0x015F, r25
    2ae6:	80 93 5e 01 	sts	0x015E, r24
		count1++;
    2aea:	80 91 64 01 	lds	r24, 0x0164
    2aee:	90 91 65 01 	lds	r25, 0x0165
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	90 93 65 01 	sts	0x0165, r25
    2af8:	80 93 64 01 	sts	0x0164, r24
	key=0;
	LCD_clearScreen();
	lcd_displaystring("Plz enter pass:");
	LCD_movecursor(1,0);
	_delay_ms(200);
	while (count1 < 5) {
    2afc:	80 91 64 01 	lds	r24, 0x0164
    2b00:	90 91 65 01 	lds	r25, 0x0165
    2b04:	85 30       	cpi	r24, 0x05	; 5
    2b06:	91 05       	cpc	r25, r1
    2b08:	08 f4       	brcc	.+2      	; 0x2b0c <setpassword+0x28e>
    2b0a:	52 cf       	rjmp	.-348    	; 0x29b0 <setpassword+0x132>
		pass1 = (pass1 * 10) + (key);
		count1++;

	}

	LCD_clearScreen();
    2b0c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
	lcd_displaystring("Plz re-enter pass:");
    2b10:	8a e1       	ldi	r24, 0x1A	; 26
    2b12:	91 e0       	ldi	r25, 0x01	; 1
    2b14:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
	LCD_movecursor(1,0);
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_movecursor>
	count2 = 0;
    2b24:	10 92 67 01 	sts	0x0167, r1
    2b28:	10 92 66 01 	sts	0x0166, r1
	pass2 = 0; // Initialize password
    2b2c:	10 92 61 01 	sts	0x0161, r1
    2b30:	10 92 60 01 	sts	0x0160, r1
    2b34:	a6 c0       	rjmp	.+332    	; 0x2c82 <setpassword+0x404>
	while (count2 < 5)
	{
		key = KEYPAD_getPressedKey();
    2b36:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <KEYPAD_getPressedKey>
    2b3a:	88 2f       	mov	r24, r24
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	90 93 77 01 	sts	0x0177, r25
    2b42:	80 93 76 01 	sts	0x0176, r24
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a6 e9       	ldi	r26, 0x96	; 150
    2b4c:	b3 e4       	ldi	r27, 0x43	; 67
    2b4e:	8b 87       	std	Y+11, r24	; 0x0b
    2b50:	9c 87       	std	Y+12, r25	; 0x0c
    2b52:	ad 87       	std	Y+13, r26	; 0x0d
    2b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8f 83       	std	Y+7, r24	; 0x07
    2b70:	98 87       	std	Y+8, r25	; 0x08
    2b72:	a9 87       	std	Y+9, r26	; 0x09
    2b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <setpassword+0x31a>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <setpassword+0x398>
	else if (__tmp > 65535)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <setpassword+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <setpassword+0x37a>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <setpassword+0x368>
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <setpassword+0x35c>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <setpassword+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <setpassword+0x3a4>
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		lcd_displayCharacter('*');
    2c2a:	8a e2       	ldi	r24, 0x2A	; 42
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 92 07 	call	0xf24	; 0xf24 <lcd_displayCharacter>

		if (key == '=')
    2c32:	80 91 76 01 	lds	r24, 0x0176
    2c36:	90 91 77 01 	lds	r25, 0x0177
    2c3a:	8d 33       	cpi	r24, 0x3D	; 61
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	49 f1       	breq	.+82     	; 0x2c92 <setpassword+0x414>
		{
			break;
		}
		pass2 = (pass2 * 10) + (key);
    2c40:	80 91 60 01 	lds	r24, 0x0160
    2c44:	90 91 61 01 	lds	r25, 0x0161
    2c48:	9c 01       	movw	r18, r24
    2c4a:	22 0f       	add	r18, r18
    2c4c:	33 1f       	adc	r19, r19
    2c4e:	c9 01       	movw	r24, r18
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	28 0f       	add	r18, r24
    2c5a:	39 1f       	adc	r19, r25
    2c5c:	80 91 76 01 	lds	r24, 0x0176
    2c60:	90 91 77 01 	lds	r25, 0x0177
    2c64:	82 0f       	add	r24, r18
    2c66:	93 1f       	adc	r25, r19
    2c68:	90 93 61 01 	sts	0x0161, r25
    2c6c:	80 93 60 01 	sts	0x0160, r24
		count2++;
    2c70:	80 91 66 01 	lds	r24, 0x0166
    2c74:	90 91 67 01 	lds	r25, 0x0167
    2c78:	01 96       	adiw	r24, 0x01	; 1
    2c7a:	90 93 67 01 	sts	0x0167, r25
    2c7e:	80 93 66 01 	sts	0x0166, r24
	LCD_clearScreen();
	lcd_displaystring("Plz re-enter pass:");
	LCD_movecursor(1,0);
	count2 = 0;
	pass2 = 0; // Initialize password
	while (count2 < 5)
    2c82:	80 91 66 01 	lds	r24, 0x0166
    2c86:	90 91 67 01 	lds	r25, 0x0167
    2c8a:	85 30       	cpi	r24, 0x05	; 5
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	08 f4       	brcc	.+2      	; 0x2c92 <setpassword+0x414>
    2c90:	52 cf       	rjmp	.-348    	; 0x2b36 <setpassword+0x2b8>
		}
		pass2 = (pass2 * 10) + (key);
		count2++;

	}
	itoa(pass1, password1, 10);
    2c92:	80 91 5e 01 	lds	r24, 0x015E
    2c96:	90 91 5f 01 	lds	r25, 0x015F
    2c9a:	28 e7       	ldi	r18, 0x78	; 120
    2c9c:	31 e0       	ldi	r19, 0x01	; 1
    2c9e:	b9 01       	movw	r22, r18
    2ca0:	4a e0       	ldi	r20, 0x0A	; 10
    2ca2:	50 e0       	ldi	r21, 0x00	; 0
    2ca4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <itoa>
	itoa(pass2, password2, 10);
    2ca8:	80 91 60 01 	lds	r24, 0x0160
    2cac:	90 91 61 01 	lds	r25, 0x0161
    2cb0:	2f e6       	ldi	r18, 0x6F	; 111
    2cb2:	31 e0       	ldi	r19, 0x01	; 1
    2cb4:	b9 01       	movw	r22, r18
    2cb6:	4a e0       	ldi	r20, 0x0A	; 10
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <itoa>
	password1[count1]='#';
    2cbe:	80 91 64 01 	lds	r24, 0x0164
    2cc2:	90 91 65 01 	lds	r25, 0x0165
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e8 58       	subi	r30, 0x88	; 136
    2cca:	fe 4f       	sbci	r31, 0xFE	; 254
    2ccc:	83 e2       	ldi	r24, 0x23	; 35
    2cce:	80 83       	st	Z, r24
	password1[count1+1]='\0';
    2cd0:	80 91 64 01 	lds	r24, 0x0164
    2cd4:	90 91 65 01 	lds	r25, 0x0165
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	fc 01       	movw	r30, r24
    2cdc:	e8 58       	subi	r30, 0x88	; 136
    2cde:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce0:	10 82       	st	Z, r1
	password2[count2]='#';
    2ce2:	80 91 66 01 	lds	r24, 0x0166
    2ce6:	90 91 67 01 	lds	r25, 0x0167
    2cea:	fc 01       	movw	r30, r24
    2cec:	e1 59       	subi	r30, 0x91	; 145
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	83 e2       	ldi	r24, 0x23	; 35
    2cf2:	80 83       	st	Z, r24
	password2[count2+1]='\0';
    2cf4:	80 91 66 01 	lds	r24, 0x0166
    2cf8:	90 91 67 01 	lds	r25, 0x0167
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e1 59       	subi	r30, 0x91	; 145
    2d02:	fe 4f       	sbci	r31, 0xFE	; 254
    2d04:	10 82       	st	Z, r1


	UART_sendString(password1);
    2d06:	88 e7       	ldi	r24, 0x78	; 120
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>
	UART_sendString(password2);
    2d0e:	8f e6       	ldi	r24, 0x6F	; 111
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_sendString>

}
    2d16:	aa 96       	adiw	r28, 0x2a	; 42
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <passcheck>:
void passcheck(void)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	68 97       	sbiw	r28, 0x18	; 24
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
	char p[10];
	while(UART_recieveByte() != MC2_READY){}
    2d3c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <UART_recieveByte>
    2d40:	80 31       	cpi	r24, 0x10	; 16
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <passcheck+0x14>
	UART_receiveString(p);
    2d44:	ce 01       	movw	r24, r28
    2d46:	0f 96       	adiw	r24, 0x0f	; 15
    2d48:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <UART_receiveString>

	if(strcmp(p,"matched") == 0)
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	0f 96       	adiw	r24, 0x0f	; 15
    2d50:	2d e9       	ldi	r18, 0x9D	; 157
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	b9 01       	movw	r22, r18
    2d56:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <strcmp>
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	69 f4       	brne	.+26     	; 0x2d78 <passcheck+0x50>
	{

		LCD_clearScreen();
    2d5e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
		lcd_displaystring("pass is updated");
    2d62:	8d e2       	ldi	r24, 0x2D	; 45
    2d64:	91 e0       	ldi	r25, 0x01	; 1
    2d66:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
		swap=1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	90 93 6b 01 	sts	0x016B, r25
    2d72:	80 93 6a 01 	sts	0x016A, r24
    2d76:	7c c0       	rjmp	.+248    	; 0x2e70 <passcheck+0x148>
	}else
	{
		LCD_clearScreen();
    2d78:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_clearScreen>
		lcd_displaystring("pass not matched!!");
    2d7c:	8d e3       	ldi	r24, 0x3D	; 61
    2d7e:	91 e0       	ldi	r25, 0x01	; 1
    2d80:	0e 94 1d 0a 	call	0x143a	; 0x143a <lcd_displaystring>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	aa ef       	ldi	r26, 0xFA	; 250
    2d8a:	b4 e4       	ldi	r27, 0x44	; 68
    2d8c:	8b 87       	std	Y+11, r24	; 0x0b
    2d8e:	9c 87       	std	Y+12, r25	; 0x0c
    2d90:	ad 87       	std	Y+13, r26	; 0x0d
    2d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a ef       	ldi	r20, 0xFA	; 250
    2da2:	54 e4       	ldi	r21, 0x44	; 68
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8f 83       	std	Y+7, r24	; 0x07
    2dae:	98 87       	std	Y+8, r25	; 0x08
    2db0:	a9 87       	std	Y+9, r26	; 0x09
    2db2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <passcheck+0xae>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <passcheck+0x12c>
	else if (__tmp > 65535)
    2dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd8:	78 85       	ldd	r23, Y+8	; 0x08
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f e7       	ldi	r20, 0x7F	; 127
    2de4:	57 e4       	ldi	r21, 0x47	; 71
    2de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dea:	18 16       	cp	r1, r24
    2dec:	4c f5       	brge	.+82     	; 0x2e40 <passcheck+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <passcheck+0x10e>
    2e18:	88 ec       	ldi	r24, 0xC8	; 200
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <passcheck+0xfc>
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	69 f7       	brne	.-38     	; 0x2e18 <passcheck+0xf0>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <passcheck+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	9e 81       	ldd	r25, Y+6	; 0x06
    2e58:	9a 83       	std	Y+2, r25	; 0x02
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <passcheck+0x138>
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		swap=0;
    2e68:	10 92 6b 01 	sts	0x016B, r1
    2e6c:	10 92 6a 01 	sts	0x016A, r1
	}
}
    2e70:	68 96       	adiw	r28, 0x18	; 24
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <main>:

int main(void) {
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <main+0x6>
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <main+0x8>
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
	UART_ConfigType uartConfig = {eightbit, Disabled, one_bit, bd9600};
    2e8e:	83 e0       	ldi	r24, 0x03	; 3
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	1a 82       	std	Y+2, r1	; 0x02
    2e94:	1b 82       	std	Y+3, r1	; 0x03
    2e96:	1c 82       	std	Y+4, r1	; 0x04
	UART_init(&uartConfig);
    2e98:	ce 01       	movw	r24, r28
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	0e 94 76 19 	call	0x32ec	; 0x32ec <UART_init>
	lcd_init();
    2ea0:	0e 94 81 09 	call	0x1302	; 0x1302 <lcd_init>
	SREG|=(1<<7);
    2ea4:	af e5       	ldi	r26, 0x5F	; 95
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	ef e5       	ldi	r30, 0x5F	; 95
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	80 68       	ori	r24, 0x80	; 128
    2eb0:	8c 93       	st	X, r24


	while(UART_recieveByte() != MC2_READY){}
    2eb2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <UART_recieveByte>
    2eb6:	80 31       	cpi	r24, 0x10	; 16
    2eb8:	e1 f7       	brne	.-8      	; 0x2eb2 <main+0x30>
	while (1)
	{

		if(swap==0)
    2eba:	80 91 6a 01 	lds	r24, 0x016A
    2ebe:	90 91 6b 01 	lds	r25, 0x016B
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	29 f4       	brne	.+10     	; 0x2ed0 <main+0x4e>
		{
			setpassword();
    2ec6:	0e 94 3f 14 	call	0x287e	; 0x287e <setpassword>
			passcheck();
    2eca:	0e 94 94 16 	call	0x2d28	; 0x2d28 <passcheck>
    2ece:	f5 cf       	rjmp	.-22     	; 0x2eba <main+0x38>

		}
		else if(swap == 1)
    2ed0:	80 91 6a 01 	lds	r24, 0x016A
    2ed4:	90 91 6b 01 	lds	r25, 0x016B
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	91 05       	cpc	r25, r1
    2edc:	71 f7       	brne	.-36     	; 0x2eba <main+0x38>
		{
			main_menu();
    2ede:	0e 94 7f 11 	call	0x22fe	; 0x22fe <main_menu>
    2ee2:	eb cf       	rjmp	.-42     	; 0x2eba <main+0x38>

00002ee4 <__vector_7>:
#include "common_macros.h"
#define CPU_FREQ 8000000
static volatile void (*timer1CB)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    2ee4:	1f 92       	push	r1
    2ee6:	0f 92       	push	r0
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	0f 92       	push	r0
    2eec:	11 24       	eor	r1, r1
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
	if(timer1CB != NULL_PTR)
    2f0e:	80 91 6d 01 	lds	r24, 0x016D
    2f12:	90 91 6e 01 	lds	r25, 0x016E
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	29 f0       	breq	.+10     	; 0x2f24 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1CB)();
    2f1a:	e0 91 6d 01 	lds	r30, 0x016D
    2f1e:	f0 91 6e 01 	lds	r31, 0x016E
    2f22:	09 95       	icall
	}
}
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	bf 91       	pop	r27
    2f2e:	af 91       	pop	r26
    2f30:	9f 91       	pop	r25
    2f32:	8f 91       	pop	r24
    2f34:	7f 91       	pop	r23
    2f36:	6f 91       	pop	r22
    2f38:	5f 91       	pop	r21
    2f3a:	4f 91       	pop	r20
    2f3c:	3f 91       	pop	r19
    2f3e:	2f 91       	pop	r18
    2f40:	0f 90       	pop	r0
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	0f 90       	pop	r0
    2f46:	1f 90       	pop	r1
    2f48:	18 95       	reti

00002f4a <__vector_9>:
ISR (TIMER1_OVF_vect){
    2f4a:	1f 92       	push	r1
    2f4c:	0f 92       	push	r0
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	0f 92       	push	r0
    2f52:	11 24       	eor	r1, r1
    2f54:	2f 93       	push	r18
    2f56:	3f 93       	push	r19
    2f58:	4f 93       	push	r20
    2f5a:	5f 93       	push	r21
    2f5c:	6f 93       	push	r22
    2f5e:	7f 93       	push	r23
    2f60:	8f 93       	push	r24
    2f62:	9f 93       	push	r25
    2f64:	af 93       	push	r26
    2f66:	bf 93       	push	r27
    2f68:	ef 93       	push	r30
    2f6a:	ff 93       	push	r31
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	if(timer1CB!=NULL_PTR){
    2f74:	80 91 6d 01 	lds	r24, 0x016D
    2f78:	90 91 6e 01 	lds	r25, 0x016E
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	29 f0       	breq	.+10     	; 0x2f8a <__vector_9+0x40>

		(*timer1CB)();
    2f80:	e0 91 6d 01 	lds	r30, 0x016D
    2f84:	f0 91 6e 01 	lds	r31, 0x016E
    2f88:	09 95       	icall

	}
}
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	ff 91       	pop	r31
    2f90:	ef 91       	pop	r30
    2f92:	bf 91       	pop	r27
    2f94:	af 91       	pop	r26
    2f96:	9f 91       	pop	r25
    2f98:	8f 91       	pop	r24
    2f9a:	7f 91       	pop	r23
    2f9c:	6f 91       	pop	r22
    2f9e:	5f 91       	pop	r21
    2fa0:	4f 91       	pop	r20
    2fa2:	3f 91       	pop	r19
    2fa4:	2f 91       	pop	r18
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	28 97       	sbiw	r28, 0x08	; 8
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;    // Set Timer initial value to 0
    2fcc:	ac e4       	ldi	r26, 0x4C	; 76
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd4:	80 81       	ld	r24, Z
    2fd6:	91 81       	ldd	r25, Z+1	; 0x01
    2fd8:	11 96       	adiw	r26, 0x01	; 1
    2fda:	9c 93       	st	X, r25
    2fdc:	8e 93       	st	-X, r24

	/*
	 * Selecting precaler
	 */
	switch(Config_Ptr->prescaler)
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	84 81       	ldd	r24, Z+4	; 0x04
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	38 87       	std	Y+8, r19	; 0x08
    2fea:	2f 83       	std	Y+7, r18	; 0x07
    2fec:	8f 81       	ldd	r24, Y+7	; 0x07
    2fee:	98 85       	ldd	r25, Y+8	; 0x08
    2ff0:	83 30       	cpi	r24, 0x03	; 3
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	b9 f1       	breq	.+110    	; 0x3064 <Timer1_init+0xb4>
    2ff6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ff8:	f8 85       	ldd	r31, Y+8	; 0x08
    2ffa:	e4 30       	cpi	r30, 0x04	; 4
    2ffc:	f1 05       	cpc	r31, r1
    2ffe:	7c f4       	brge	.+30     	; 0x301e <Timer1_init+0x6e>
    3000:	2f 81       	ldd	r18, Y+7	; 0x07
    3002:	38 85       	ldd	r19, Y+8	; 0x08
    3004:	21 30       	cpi	r18, 0x01	; 1
    3006:	31 05       	cpc	r19, r1
    3008:	19 f1       	breq	.+70     	; 0x3050 <Timer1_init+0xa0>
    300a:	8f 81       	ldd	r24, Y+7	; 0x07
    300c:	98 85       	ldd	r25, Y+8	; 0x08
    300e:	82 30       	cpi	r24, 0x02	; 2
    3010:	91 05       	cpc	r25, r1
    3012:	1c f5       	brge	.+70     	; 0x305a <Timer1_init+0xaa>
    3014:	ef 81       	ldd	r30, Y+7	; 0x07
    3016:	f8 85       	ldd	r31, Y+8	; 0x08
    3018:	30 97       	sbiw	r30, 0x00	; 0
    301a:	b1 f0       	breq	.+44     	; 0x3048 <Timer1_init+0x98>
    301c:	3b c0       	rjmp	.+118    	; 0x3094 <Timer1_init+0xe4>
    301e:	2f 81       	ldd	r18, Y+7	; 0x07
    3020:	38 85       	ldd	r19, Y+8	; 0x08
    3022:	25 30       	cpi	r18, 0x05	; 5
    3024:	31 05       	cpc	r19, r1
    3026:	41 f1       	breq	.+80     	; 0x3078 <Timer1_init+0xc8>
    3028:	8f 81       	ldd	r24, Y+7	; 0x07
    302a:	98 85       	ldd	r25, Y+8	; 0x08
    302c:	85 30       	cpi	r24, 0x05	; 5
    302e:	91 05       	cpc	r25, r1
    3030:	f4 f0       	brlt	.+60     	; 0x306e <Timer1_init+0xbe>
    3032:	ef 81       	ldd	r30, Y+7	; 0x07
    3034:	f8 85       	ldd	r31, Y+8	; 0x08
    3036:	e6 30       	cpi	r30, 0x06	; 6
    3038:	f1 05       	cpc	r31, r1
    303a:	19 f1       	breq	.+70     	; 0x3082 <Timer1_init+0xd2>
    303c:	2f 81       	ldd	r18, Y+7	; 0x07
    303e:	38 85       	ldd	r19, Y+8	; 0x08
    3040:	27 30       	cpi	r18, 0x07	; 7
    3042:	31 05       	cpc	r19, r1
    3044:	19 f1       	breq	.+70     	; 0x308c <Timer1_init+0xdc>
    3046:	26 c0       	rjmp	.+76     	; 0x3094 <Timer1_init+0xe4>
	{
	case 0:
		TCCR1B=0;
    3048:	ee e4       	ldi	r30, 0x4E	; 78
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	10 82       	st	Z, r1
    304e:	22 c0       	rjmp	.+68     	; 0x3094 <Timer1_init+0xe4>
		break;
	case 1:
		TCCR1B=(1<<CS10);
    3050:	ee e4       	ldi	r30, 0x4E	; 78
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	80 83       	st	Z, r24
    3058:	1d c0       	rjmp	.+58     	; 0x3094 <Timer1_init+0xe4>
		break;
	case 2:
		TCCR1B=(1<<CS11);
    305a:	ee e4       	ldi	r30, 0x4E	; 78
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	80 83       	st	Z, r24
    3062:	18 c0       	rjmp	.+48     	; 0x3094 <Timer1_init+0xe4>
		break;
	case 3:
		TCCR1B=(1<<CS10) | (1<<CS11);
    3064:	ee e4       	ldi	r30, 0x4E	; 78
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	80 83       	st	Z, r24
    306c:	13 c0       	rjmp	.+38     	; 0x3094 <Timer1_init+0xe4>
		break;
	case 4:
		TCCR1B=(1<<CS12);
    306e:	ee e4       	ldi	r30, 0x4E	; 78
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	84 e0       	ldi	r24, 0x04	; 4
    3074:	80 83       	st	Z, r24
    3076:	0e c0       	rjmp	.+28     	; 0x3094 <Timer1_init+0xe4>
		break;
	case 5:
		TCCR1B=(1<<CS10) | (1<<CS12);
    3078:	ee e4       	ldi	r30, 0x4E	; 78
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	85 e0       	ldi	r24, 0x05	; 5
    307e:	80 83       	st	Z, r24
    3080:	09 c0       	rjmp	.+18     	; 0x3094 <Timer1_init+0xe4>
		break;
	case 6:
		TCCR1B=(1<<CS11) | (1<<CS12);
    3082:	ee e4       	ldi	r30, 0x4E	; 78
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	86 e0       	ldi	r24, 0x06	; 6
    3088:	80 83       	st	Z, r24
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <Timer1_init+0xe4>
		break;
	case 7:
		TCCR1B=(1<<CS10) | (1<<CS11) | (1<<CS12);
    308c:	ee e4       	ldi	r30, 0x4E	; 78
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	87 e0       	ldi	r24, 0x07	; 7
    3092:	80 83       	st	Z, r24
		break;

	}

	switch(Config_Ptr->mode)
    3094:	e9 81       	ldd	r30, Y+1	; 0x01
    3096:	fa 81       	ldd	r31, Y+2	; 0x02
    3098:	85 81       	ldd	r24, Z+5	; 0x05
    309a:	e8 2f       	mov	r30, r24
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	fe 83       	std	Y+6, r31	; 0x06
    30a0:	ed 83       	std	Y+5, r30	; 0x05
    30a2:	2d 81       	ldd	r18, Y+5	; 0x05
    30a4:	3e 81       	ldd	r19, Y+6	; 0x06
    30a6:	21 15       	cp	r18, r1
    30a8:	31 05       	cpc	r19, r1
    30aa:	31 f0       	breq	.+12     	; 0x30b8 <Timer1_init+0x108>
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	9e 81       	ldd	r25, Y+6	; 0x06
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	91 05       	cpc	r25, r1
    30b4:	11 f1       	breq	.+68     	; 0x30fa <Timer1_init+0x14a>
    30b6:	e9 c0       	rjmp	.+466    	; 0x328a <Timer1_init+0x2da>
	{

	case 0:

		CLEAR_BIT(TCCR1A,WGM13);
    30b8:	af e4       	ldi	r26, 0x4F	; 79
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	ef e4       	ldi	r30, 0x4F	; 79
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8f 7e       	andi	r24, 0xEF	; 239
    30c4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM12);
    30c6:	af e4       	ldi	r26, 0x4F	; 79
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	ef e4       	ldi	r30, 0x4F	; 79
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	87 7f       	andi	r24, 0xF7	; 247
    30d2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    30d4:	af e4       	ldi	r26, 0x4F	; 79
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	ef e4       	ldi	r30, 0x4F	; 79
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	8d 7f       	andi	r24, 0xFD	; 253
    30e0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM10);
    30e2:	af e4       	ldi	r26, 0x4F	; 79
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	ef e4       	ldi	r30, 0x4F	; 79
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	8e 7f       	andi	r24, 0xFE	; 254
    30ee:	8c 93       	st	X, r24

		TIMSK=(1<<TOIE1); //Overflow interrupt enable
    30f0:	e9 e5       	ldi	r30, 0x59	; 89
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	80 83       	st	Z, r24
    30f8:	c8 c0       	rjmp	.+400    	; 0x328a <Timer1_init+0x2da>
		break;

	case 1:
		CLEAR_BIT(TCCR1A,WGM13);
    30fa:	af e4       	ldi	r26, 0x4F	; 79
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	ef e4       	ldi	r30, 0x4F	; 79
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	8f 7e       	andi	r24, 0xEF	; 239
    3106:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM12);
    3108:	af e4       	ldi	r26, 0x4F	; 79
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	ef e4       	ldi	r30, 0x4F	; 79
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	88 60       	ori	r24, 0x08	; 8
    3114:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    3116:	af e4       	ldi	r26, 0x4F	; 79
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	ef e4       	ldi	r30, 0x4F	; 79
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	8d 7f       	andi	r24, 0xFD	; 253
    3122:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM10);
    3124:	af e4       	ldi	r26, 0x4F	; 79
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	ef e4       	ldi	r30, 0x4F	; 79
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	8e 7f       	andi	r24, 0xFE	; 254
    3130:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE1A);
    3132:	a9 e5       	ldi	r26, 0x59	; 89
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e9 e5       	ldi	r30, 0x59	; 89
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	80 61       	ori	r24, 0x10	; 16
    313e:	8c 93       	st	X, r24


		switch(Config_Ptr->prescaler)
    3140:	e9 81       	ldd	r30, Y+1	; 0x01
    3142:	fa 81       	ldd	r31, Y+2	; 0x02
    3144:	84 81       	ldd	r24, Z+4	; 0x04
    3146:	e8 2f       	mov	r30, r24
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	fc 83       	std	Y+4, r31	; 0x04
    314c:	eb 83       	std	Y+3, r30	; 0x03
    314e:	2b 81       	ldd	r18, Y+3	; 0x03
    3150:	3c 81       	ldd	r19, Y+4	; 0x04
    3152:	22 30       	cpi	r18, 0x02	; 2
    3154:	31 05       	cpc	r19, r1
    3156:	d1 f1       	breq	.+116    	; 0x31cc <Timer1_init+0x21c>
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	9c 81       	ldd	r25, Y+4	; 0x04
    315c:	83 30       	cpi	r24, 0x03	; 3
    315e:	91 05       	cpc	r25, r1
    3160:	5c f4       	brge	.+22     	; 0x3178 <Timer1_init+0x1c8>
    3162:	eb 81       	ldd	r30, Y+3	; 0x03
    3164:	fc 81       	ldd	r31, Y+4	; 0x04
    3166:	30 97       	sbiw	r30, 0x00	; 0
    3168:	09 f4       	brne	.+2      	; 0x316c <Timer1_init+0x1bc>
    316a:	8f c0       	rjmp	.+286    	; 0x328a <Timer1_init+0x2da>
    316c:	2b 81       	ldd	r18, Y+3	; 0x03
    316e:	3c 81       	ldd	r19, Y+4	; 0x04
    3170:	21 30       	cpi	r18, 0x01	; 1
    3172:	31 05       	cpc	r19, r1
    3174:	99 f0       	breq	.+38     	; 0x319c <Timer1_init+0x1ec>
    3176:	89 c0       	rjmp	.+274    	; 0x328a <Timer1_init+0x2da>
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	84 30       	cpi	r24, 0x04	; 4
    317e:	91 05       	cpc	r25, r1
    3180:	09 f4       	brne	.+2      	; 0x3184 <Timer1_init+0x1d4>
    3182:	54 c0       	rjmp	.+168    	; 0x322c <Timer1_init+0x27c>
    3184:	eb 81       	ldd	r30, Y+3	; 0x03
    3186:	fc 81       	ldd	r31, Y+4	; 0x04
    3188:	e4 30       	cpi	r30, 0x04	; 4
    318a:	f1 05       	cpc	r31, r1
    318c:	bc f1       	brlt	.+110    	; 0x31fc <Timer1_init+0x24c>
    318e:	2b 81       	ldd	r18, Y+3	; 0x03
    3190:	3c 81       	ldd	r19, Y+4	; 0x04
    3192:	25 30       	cpi	r18, 0x05	; 5
    3194:	31 05       	cpc	r19, r1
    3196:	09 f4       	brne	.+2      	; 0x319a <Timer1_init+0x1ea>
    3198:	61 c0       	rjmp	.+194    	; 0x325c <Timer1_init+0x2ac>
    319a:	77 c0       	rjmp	.+238    	; 0x328a <Timer1_init+0x2da>
		{
		case no_clock:
			break;

		case prescalar_1:
			OCR1A = ( (CPU_FREQ / 1) * (Config_Ptr ->compare_value) - 1);
    319c:	0a e4       	ldi	r16, 0x4A	; 74
    319e:	10 e0       	ldi	r17, 0x00	; 0
    31a0:	e9 81       	ldd	r30, Y+1	; 0x01
    31a2:	fa 81       	ldd	r31, Y+2	; 0x02
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	93 81       	ldd	r25, Z+3	; 0x03
    31a8:	cc 01       	movw	r24, r24
    31aa:	a0 e0       	ldi	r26, 0x00	; 0
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	32 e1       	ldi	r19, 0x12	; 18
    31b2:	4a e7       	ldi	r20, 0x7A	; 122
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__mulsi3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f8 01       	movw	r30, r16
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	80 83       	st	Z, r24
    31ca:	5f c0       	rjmp	.+190    	; 0x328a <Timer1_init+0x2da>
			break;

		case prescalar_8:
			OCR1A = ( (CPU_FREQ / 8) * (Config_Ptr ->compare_value) - 1);
    31cc:	0a e4       	ldi	r16, 0x4A	; 74
    31ce:	10 e0       	ldi	r17, 0x00	; 0
    31d0:	e9 81       	ldd	r30, Y+1	; 0x01
    31d2:	fa 81       	ldd	r31, Y+2	; 0x02
    31d4:	82 81       	ldd	r24, Z+2	; 0x02
    31d6:	93 81       	ldd	r25, Z+3	; 0x03
    31d8:	cc 01       	movw	r24, r24
    31da:	a0 e0       	ldi	r26, 0x00	; 0
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	20 e4       	ldi	r18, 0x40	; 64
    31e0:	32 e4       	ldi	r19, 0x42	; 66
    31e2:	4f e0       	ldi	r20, 0x0F	; 15
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__mulsi3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f8 01       	movw	r30, r16
    31f6:	91 83       	std	Z+1, r25	; 0x01
    31f8:	80 83       	st	Z, r24
    31fa:	47 c0       	rjmp	.+142    	; 0x328a <Timer1_init+0x2da>
			break;

		case prescalar_64:
			OCR1A = ( (CPU_FREQ / 64) * (Config_Ptr ->compare_value) - 1);
    31fc:	0a e4       	ldi	r16, 0x4A	; 74
    31fe:	10 e0       	ldi	r17, 0x00	; 0
    3200:	e9 81       	ldd	r30, Y+1	; 0x01
    3202:	fa 81       	ldd	r31, Y+2	; 0x02
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	cc 01       	movw	r24, r24
    320a:	a0 e0       	ldi	r26, 0x00	; 0
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	28 e4       	ldi	r18, 0x48	; 72
    3210:	38 ee       	ldi	r19, 0xE8	; 232
    3212:	41 e0       	ldi	r20, 0x01	; 1
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__mulsi3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f8 01       	movw	r30, r16
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	80 83       	st	Z, r24
    322a:	2f c0       	rjmp	.+94     	; 0x328a <Timer1_init+0x2da>
			break;

		case prescalar_256:
			OCR1A = ( (CPU_FREQ / 256) * (Config_Ptr ->compare_value) - 1);
    322c:	0a e4       	ldi	r16, 0x4A	; 74
    322e:	10 e0       	ldi	r17, 0x00	; 0
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	cc 01       	movw	r24, r24
    323a:	a0 e0       	ldi	r26, 0x00	; 0
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	22 e1       	ldi	r18, 0x12	; 18
    3240:	3a e7       	ldi	r19, 0x7A	; 122
    3242:	40 e0       	ldi	r20, 0x00	; 0
    3244:	50 e0       	ldi	r21, 0x00	; 0
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__mulsi3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f8 01       	movw	r30, r16
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
    325a:	17 c0       	rjmp	.+46     	; 0x328a <Timer1_init+0x2da>
			break;

		case prescalar_1024:
			OCR1A = ( (CPU_FREQ / 1024) * (Config_Ptr ->compare_value) - 1);
    325c:	0a e4       	ldi	r16, 0x4A	; 74
    325e:	10 e0       	ldi	r17, 0x00	; 0
    3260:	e9 81       	ldd	r30, Y+1	; 0x01
    3262:	fa 81       	ldd	r31, Y+2	; 0x02
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	cc 01       	movw	r24, r24
    326a:	a0 e0       	ldi	r26, 0x00	; 0
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	24 e8       	ldi	r18, 0x84	; 132
    3270:	3e e1       	ldi	r19, 0x1E	; 30
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__mulsi3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f8 01       	movw	r30, r16
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24
		case Ext_on_rising:
			break;
		}
		break;
	}
}
    328a:	28 96       	adiw	r28, 0x08	; 8
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	08 95       	ret

000032a0 <Timer1_deInit>:

void Timer1_deInit(void)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer1
	TCCR1A = 0;  // Clear all bits in TCCR1A
    32a8:	ef e4       	ldi	r30, 0x4F	; 79
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	10 82       	st	Z, r1
	TCCR1B = 0;  // Clear all bits in TCCR1B
    32ae:	ee e4       	ldi	r30, 0x4E	; 78
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	10 82       	st	Z, r1
	TIMSK &= ~(1 << OCIE1A); // Disable Timer1 compare match interrupt
    32b4:	a9 e5       	ldi	r26, 0x59	; 89
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e9 e5       	ldi	r30, 0x59	; 89
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8f 7e       	andi	r24, 0xEF	; 239
    32c0:	8c 93       	st	X, r24



}
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <Timer1_setCallBack+0x6>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
	timer1CB = a_ptr;
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	9a 81       	ldd	r25, Y+2	; 0x02
    32da:	90 93 6e 01 	sts	0x016E, r25
    32de:	80 93 6d 01 	sts	0x016D, r24
}
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	2c 97       	sbiw	r28, 0x0c	; 12
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3304:	1a 82       	std	Y+2, r1	; 0x02
    3306:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3308:	eb e2       	ldi	r30, 0x2B	; 43
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3310:	ea e2       	ldi	r30, 0x2A	; 42
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	88 e1       	ldi	r24, 0x18	; 24
    3316:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * parity bit,bit_data,stop_bit,baud_rate is selected
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3318:	e0 e4       	ldi	r30, 0x40	; 64
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 e8       	ldi	r24, 0x80	; 128
    331e:	80 83       	st	Z, r24
	switch(Config_Ptr->parity)
    3320:	eb 81       	ldd	r30, Y+3	; 0x03
    3322:	fc 81       	ldd	r31, Y+4	; 0x04
    3324:	81 81       	ldd	r24, Z+1	; 0x01
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	3c 87       	std	Y+12, r19	; 0x0c
    332c:	2b 87       	std	Y+11, r18	; 0x0b
    332e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3330:	9c 85       	ldd	r25, Y+12	; 0x0c
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	91 05       	cpc	r25, r1
    3336:	81 f0       	breq	.+32     	; 0x3358 <UART_init+0x6c>
    3338:	2b 85       	ldd	r18, Y+11	; 0x0b
    333a:	3c 85       	ldd	r19, Y+12	; 0x0c
    333c:	22 30       	cpi	r18, 0x02	; 2
    333e:	31 05       	cpc	r19, r1
    3340:	14 f1       	brlt	.+68     	; 0x3386 <UART_init+0x9a>
    3342:	8b 85       	ldd	r24, Y+11	; 0x0b
    3344:	9c 85       	ldd	r25, Y+12	; 0x0c
    3346:	82 30       	cpi	r24, 0x02	; 2
    3348:	91 05       	cpc	r25, r1
    334a:	71 f0       	breq	.+28     	; 0x3368 <UART_init+0x7c>
    334c:	2b 85       	ldd	r18, Y+11	; 0x0b
    334e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3350:	23 30       	cpi	r18, 0x03	; 3
    3352:	31 05       	cpc	r19, r1
    3354:	89 f0       	breq	.+34     	; 0x3378 <UART_init+0x8c>
    3356:	17 c0       	rjmp	.+46     	; 0x3386 <UART_init+0x9a>
	{
	case 0:

		break;
	case 1:
		UCSRC |= (1<<UPM0);
    3358:	a0 e4       	ldi	r26, 0x40	; 64
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e0 e4       	ldi	r30, 0x40	; 64
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	80 61       	ori	r24, 0x10	; 16
    3364:	8c 93       	st	X, r24
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <UART_init+0x9a>
		break;
	case 2:
		UCSRC |= (1<<UPM1);
    3368:	a0 e4       	ldi	r26, 0x40	; 64
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e0 e4       	ldi	r30, 0x40	; 64
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	80 62       	ori	r24, 0x20	; 32
    3374:	8c 93       	st	X, r24
    3376:	07 c0       	rjmp	.+14     	; 0x3386 <UART_init+0x9a>
		break;
	case 3:
		UCSRC |= (1<<UPM1) | (1<<UPM0);
    3378:	a0 e4       	ldi	r26, 0x40	; 64
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e0 e4       	ldi	r30, 0x40	; 64
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	80 63       	ori	r24, 0x30	; 48
    3384:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr->stop_bit)
    3386:	eb 81       	ldd	r30, Y+3	; 0x03
    3388:	fc 81       	ldd	r31, Y+4	; 0x04
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	28 2f       	mov	r18, r24
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	3a 87       	std	Y+10, r19	; 0x0a
    3392:	29 87       	std	Y+9, r18	; 0x09
    3394:	89 85       	ldd	r24, Y+9	; 0x09
    3396:	9a 85       	ldd	r25, Y+10	; 0x0a
    3398:	00 97       	sbiw	r24, 0x00	; 0
    339a:	61 f0       	breq	.+24     	; 0x33b4 <UART_init+0xc8>
    339c:	29 85       	ldd	r18, Y+9	; 0x09
    339e:	3a 85       	ldd	r19, Y+10	; 0x0a
    33a0:	21 30       	cpi	r18, 0x01	; 1
    33a2:	31 05       	cpc	r19, r1
    33a4:	39 f4       	brne	.+14     	; 0x33b4 <UART_init+0xc8>
	{
	case 0:
		break;
	case 1:
		UCSRC |= (1<<USBS);
    33a6:	a0 e4       	ldi	r26, 0x40	; 64
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	e0 e4       	ldi	r30, 0x40	; 64
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	88 60       	ori	r24, 0x08	; 8
    33b2:	8c 93       	st	X, r24
		break;
	}


	switch(Config_Ptr->bit_data)
    33b4:	eb 81       	ldd	r30, Y+3	; 0x03
    33b6:	fc 81       	ldd	r31, Y+4	; 0x04
    33b8:	80 81       	ld	r24, Z
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	38 87       	std	Y+8, r19	; 0x08
    33c0:	2f 83       	std	Y+7, r18	; 0x07
    33c2:	8f 81       	ldd	r24, Y+7	; 0x07
    33c4:	98 85       	ldd	r25, Y+8	; 0x08
    33c6:	83 30       	cpi	r24, 0x03	; 3
    33c8:	91 05       	cpc	r25, r1
    33ca:	a9 f1       	breq	.+106    	; 0x3436 <UART_init+0x14a>
    33cc:	2f 81       	ldd	r18, Y+7	; 0x07
    33ce:	38 85       	ldd	r19, Y+8	; 0x08
    33d0:	24 30       	cpi	r18, 0x04	; 4
    33d2:	31 05       	cpc	r19, r1
    33d4:	5c f4       	brge	.+22     	; 0x33ec <UART_init+0x100>
    33d6:	8f 81       	ldd	r24, Y+7	; 0x07
    33d8:	98 85       	ldd	r25, Y+8	; 0x08
    33da:	81 30       	cpi	r24, 0x01	; 1
    33dc:	91 05       	cpc	r25, r1
    33de:	d9 f0       	breq	.+54     	; 0x3416 <UART_init+0x12a>
    33e0:	2f 81       	ldd	r18, Y+7	; 0x07
    33e2:	38 85       	ldd	r19, Y+8	; 0x08
    33e4:	22 30       	cpi	r18, 0x02	; 2
    33e6:	31 05       	cpc	r19, r1
    33e8:	f4 f4       	brge	.+60     	; 0x3426 <UART_init+0x13a>
    33ea:	4c c0       	rjmp	.+152    	; 0x3484 <UART_init+0x198>
    33ec:	8f 81       	ldd	r24, Y+7	; 0x07
    33ee:	98 85       	ldd	r25, Y+8	; 0x08
    33f0:	85 30       	cpi	r24, 0x05	; 5
    33f2:	91 05       	cpc	r25, r1
    33f4:	81 f1       	breq	.+96     	; 0x3456 <UART_init+0x16a>
    33f6:	2f 81       	ldd	r18, Y+7	; 0x07
    33f8:	38 85       	ldd	r19, Y+8	; 0x08
    33fa:	25 30       	cpi	r18, 0x05	; 5
    33fc:	31 05       	cpc	r19, r1
    33fe:	1c f1       	brlt	.+70     	; 0x3446 <UART_init+0x15a>
    3400:	8f 81       	ldd	r24, Y+7	; 0x07
    3402:	98 85       	ldd	r25, Y+8	; 0x08
    3404:	86 30       	cpi	r24, 0x06	; 6
    3406:	91 05       	cpc	r25, r1
    3408:	71 f1       	breq	.+92     	; 0x3466 <UART_init+0x17a>
    340a:	2f 81       	ldd	r18, Y+7	; 0x07
    340c:	38 85       	ldd	r19, Y+8	; 0x08
    340e:	27 30       	cpi	r18, 0x07	; 7
    3410:	31 05       	cpc	r19, r1
    3412:	89 f1       	breq	.+98     	; 0x3476 <UART_init+0x18a>
    3414:	37 c0       	rjmp	.+110    	; 0x3484 <UART_init+0x198>
	{
	case 0:
		break;
	case 1:
		UCSRC |= (1<<UCSZ0);
    3416:	a0 e4       	ldi	r26, 0x40	; 64
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	e0 e4       	ldi	r30, 0x40	; 64
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	82 60       	ori	r24, 0x02	; 2
    3422:	8c 93       	st	X, r24
    3424:	2f c0       	rjmp	.+94     	; 0x3484 <UART_init+0x198>
		break;
	case 2:
		UCSRC |= (1<<UCSZ1);
    3426:	a0 e4       	ldi	r26, 0x40	; 64
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	e0 e4       	ldi	r30, 0x40	; 64
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	84 60       	ori	r24, 0x04	; 4
    3432:	8c 93       	st	X, r24
    3434:	27 c0       	rjmp	.+78     	; 0x3484 <UART_init+0x198>
		break;
	case 3:
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    3436:	a0 e4       	ldi	r26, 0x40	; 64
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e0 e4       	ldi	r30, 0x40	; 64
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	86 60       	ori	r24, 0x06	; 6
    3442:	8c 93       	st	X, r24
    3444:	1f c0       	rjmp	.+62     	; 0x3484 <UART_init+0x198>
		break;
	case 4:
		UCSRC |= (1<<UCSZ2);
    3446:	a0 e4       	ldi	r26, 0x40	; 64
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e0 e4       	ldi	r30, 0x40	; 64
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	84 60       	ori	r24, 0x04	; 4
    3452:	8c 93       	st	X, r24
    3454:	17 c0       	rjmp	.+46     	; 0x3484 <UART_init+0x198>
		break;
	case 5:
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ2);
    3456:	a0 e4       	ldi	r26, 0x40	; 64
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e0 e4       	ldi	r30, 0x40	; 64
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	86 60       	ori	r24, 0x06	; 6
    3462:	8c 93       	st	X, r24
    3464:	0f c0       	rjmp	.+30     	; 0x3484 <UART_init+0x198>
		break;
	case 6:
		UCSRC |= (1<<UCSZ1) | (1<<UCSZ2);
    3466:	a0 e4       	ldi	r26, 0x40	; 64
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e0 e4       	ldi	r30, 0x40	; 64
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	84 60       	ori	r24, 0x04	; 4
    3472:	8c 93       	st	X, r24
    3474:	07 c0       	rjmp	.+14     	; 0x3484 <UART_init+0x198>
		break;
	case 7:
		UCSRC |= (1<<UCSZ1) | (1<<UCSZ2);
    3476:	a0 e4       	ldi	r26, 0x40	; 64
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e0 e4       	ldi	r30, 0x40	; 64
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	84 60       	ori	r24, 0x04	; 4
    3482:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr->baud_rate)
    3484:	eb 81       	ldd	r30, Y+3	; 0x03
    3486:	fc 81       	ldd	r31, Y+4	; 0x04
    3488:	83 81       	ldd	r24, Z+3	; 0x03
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	3e 83       	std	Y+6, r19	; 0x06
    3490:	2d 83       	std	Y+5, r18	; 0x05
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	81 30       	cpi	r24, 0x01	; 1
    3498:	91 05       	cpc	r25, r1
    349a:	d1 f0       	breq	.+52     	; 0x34d0 <UART_init+0x1e4>
    349c:	2d 81       	ldd	r18, Y+5	; 0x05
    349e:	3e 81       	ldd	r19, Y+6	; 0x06
    34a0:	22 30       	cpi	r18, 0x02	; 2
    34a2:	31 05       	cpc	r19, r1
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <UART_init+0x1c4>
    34a6:	8d 81       	ldd	r24, Y+5	; 0x05
    34a8:	9e 81       	ldd	r25, Y+6	; 0x06
    34aa:	00 97       	sbiw	r24, 0x00	; 0
    34ac:	61 f0       	breq	.+24     	; 0x34c6 <UART_init+0x1da>
    34ae:	1e c0       	rjmp	.+60     	; 0x34ec <UART_init+0x200>
    34b0:	2d 81       	ldd	r18, Y+5	; 0x05
    34b2:	3e 81       	ldd	r19, Y+6	; 0x06
    34b4:	22 30       	cpi	r18, 0x02	; 2
    34b6:	31 05       	cpc	r19, r1
    34b8:	81 f0       	breq	.+32     	; 0x34da <UART_init+0x1ee>
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	83 30       	cpi	r24, 0x03	; 3
    34c0:	91 05       	cpc	r25, r1
    34c2:	81 f0       	breq	.+32     	; 0x34e4 <UART_init+0x1f8>
    34c4:	13 c0       	rjmp	.+38     	; 0x34ec <UART_init+0x200>
	{
	case 0:
		ubrr_value = (uint16)(((F_CPU / (9600 * 8UL))) - 1);
    34c6:	87 e6       	ldi	r24, 0x67	; 103
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	0e c0       	rjmp	.+28     	; 0x34ec <UART_init+0x200>
		break;
	case 1:
		ubrr_value = (uint32)(((F_CPU / (19200 * 8UL))) - 1);
    34d0:	83 e3       	ldi	r24, 0x33	; 51
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	09 c0       	rjmp	.+18     	; 0x34ec <UART_init+0x200>
		break;
	case 2:
		ubrr_value = (uint32)(((F_CPU / (38400 * 8UL))) - 1);
    34da:	89 e1       	ldi	r24, 0x19	; 25
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	9a 83       	std	Y+2, r25	; 0x02
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	04 c0       	rjmp	.+8      	; 0x34ec <UART_init+0x200>
		break;
	case 3:
		ubrr_value = (uint32)(((F_CPU / (115200 * 8UL))) - 1);
    34e4:	87 e0       	ldi	r24, 0x07	; 7
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    34ec:	e0 e4       	ldi	r30, 0x40	; 64
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	89 2f       	mov	r24, r25
    34f6:	99 27       	eor	r25, r25
    34f8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    34fa:	e9 e2       	ldi	r30, 0x29	; 41
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	80 83       	st	Z, r24
}
    3502:	2c 96       	adiw	r28, 0x0c	; 12
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	0f 92       	push	r0
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3520:	eb e2       	ldi	r30, 0x2B	; 43
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	88 2f       	mov	r24, r24
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	80 72       	andi	r24, 0x20	; 32
    352c:	90 70       	andi	r25, 0x00	; 0
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	b9 f3       	breq	.-18     	; 0x3520 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3532:	ec e2       	ldi	r30, 0x2C	; 44
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    353a:	0f 90       	pop	r0
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    354a:	eb e2       	ldi	r30, 0x2B	; 43
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	88 23       	and	r24, r24
    3552:	dc f7       	brge	.-10     	; 0x354a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3554:	ec e2       	ldi	r30, 0x2C	; 44
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
}
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <UART_sendString+0x6>
    3566:	0f 92       	push	r0
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	9b 83       	std	Y+3, r25	; 0x03
    356e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3570:	19 82       	std	Y+1, r1	; 0x01
    3572:	0e c0       	rjmp	.+28     	; 0x3590 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	28 2f       	mov	r18, r24
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	fc 01       	movw	r30, r24
    3580:	e2 0f       	add	r30, r18
    3582:	f3 1f       	adc	r31, r19
    3584:	80 81       	ld	r24, Z
    3586:	0e 94 8a 1a 	call	0x3514	; 0x3514 <UART_sendByte>
		i++;
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	8f 5f       	subi	r24, 0xFF	; 255
    358e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	9b 81       	ldd	r25, Y+3	; 0x03
    359a:	fc 01       	movw	r30, r24
    359c:	e2 0f       	add	r30, r18
    359e:	f3 1f       	adc	r31, r19
    35a0:	80 81       	ld	r24, Z
    35a2:	88 23       	and	r24, r24
    35a4:	39 f7       	brne	.-50     	; 0x3574 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <UART_receiveString+0xa>
    35bc:	0f 92       	push	r0
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	9b 83       	std	Y+3, r25	; 0x03
    35c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35c6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	28 2f       	mov	r18, r24
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	9b 81       	ldd	r25, Y+3	; 0x03
    35d2:	8c 01       	movw	r16, r24
    35d4:	02 0f       	add	r16, r18
    35d6:	13 1f       	adc	r17, r19
    35d8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <UART_recieveByte>
    35dc:	f8 01       	movw	r30, r16
    35de:	80 83       	st	Z, r24
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	8f 5f       	subi	r24, 0xFF	; 255
    35e6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	9b 81       	ldd	r25, Y+3	; 0x03
    35f2:	8c 01       	movw	r16, r24
    35f4:	02 0f       	add	r16, r18
    35f6:	13 1f       	adc	r17, r19
    35f8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <UART_recieveByte>
    35fc:	f8 01       	movw	r30, r16
    35fe:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	fc 01       	movw	r30, r24
    360c:	e2 0f       	add	r30, r18
    360e:	f3 1f       	adc	r31, r19
    3610:	80 81       	ld	r24, Z
    3612:	83 32       	cpi	r24, 0x23	; 35
    3614:	31 f7       	brne	.-52     	; 0x35e2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	8a 81       	ldd	r24, Y+2	; 0x02
    361e:	9b 81       	ldd	r25, Y+3	; 0x03
    3620:	fc 01       	movw	r30, r24
    3622:	e2 0f       	add	r30, r18
    3624:	f3 1f       	adc	r31, r19
    3626:	10 82       	st	Z, r1
}
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	08 95       	ret

00003638 <__mulsi3>:
    3638:	62 9f       	mul	r22, r18
    363a:	d0 01       	movw	r26, r0
    363c:	73 9f       	mul	r23, r19
    363e:	f0 01       	movw	r30, r0
    3640:	82 9f       	mul	r24, r18
    3642:	e0 0d       	add	r30, r0
    3644:	f1 1d       	adc	r31, r1
    3646:	64 9f       	mul	r22, r20
    3648:	e0 0d       	add	r30, r0
    364a:	f1 1d       	adc	r31, r1
    364c:	92 9f       	mul	r25, r18
    364e:	f0 0d       	add	r31, r0
    3650:	83 9f       	mul	r24, r19
    3652:	f0 0d       	add	r31, r0
    3654:	74 9f       	mul	r23, r20
    3656:	f0 0d       	add	r31, r0
    3658:	65 9f       	mul	r22, r21
    365a:	f0 0d       	add	r31, r0
    365c:	99 27       	eor	r25, r25
    365e:	72 9f       	mul	r23, r18
    3660:	b0 0d       	add	r27, r0
    3662:	e1 1d       	adc	r30, r1
    3664:	f9 1f       	adc	r31, r25
    3666:	63 9f       	mul	r22, r19
    3668:	b0 0d       	add	r27, r0
    366a:	e1 1d       	adc	r30, r1
    366c:	f9 1f       	adc	r31, r25
    366e:	bd 01       	movw	r22, r26
    3670:	cf 01       	movw	r24, r30
    3672:	11 24       	eor	r1, r1
    3674:	08 95       	ret

00003676 <__prologue_saves__>:
    3676:	2f 92       	push	r2
    3678:	3f 92       	push	r3
    367a:	4f 92       	push	r4
    367c:	5f 92       	push	r5
    367e:	6f 92       	push	r6
    3680:	7f 92       	push	r7
    3682:	8f 92       	push	r8
    3684:	9f 92       	push	r9
    3686:	af 92       	push	r10
    3688:	bf 92       	push	r11
    368a:	cf 92       	push	r12
    368c:	df 92       	push	r13
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	ca 1b       	sub	r28, r26
    36a0:	db 0b       	sbc	r29, r27
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	09 94       	ijmp

000036ae <__epilogue_restores__>:
    36ae:	2a 88       	ldd	r2, Y+18	; 0x12
    36b0:	39 88       	ldd	r3, Y+17	; 0x11
    36b2:	48 88       	ldd	r4, Y+16	; 0x10
    36b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    36bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    36be:	aa 84       	ldd	r10, Y+10	; 0x0a
    36c0:	b9 84       	ldd	r11, Y+9	; 0x09
    36c2:	c8 84       	ldd	r12, Y+8	; 0x08
    36c4:	df 80       	ldd	r13, Y+7	; 0x07
    36c6:	ee 80       	ldd	r14, Y+6	; 0x06
    36c8:	fd 80       	ldd	r15, Y+5	; 0x05
    36ca:	0c 81       	ldd	r16, Y+4	; 0x04
    36cc:	1b 81       	ldd	r17, Y+3	; 0x03
    36ce:	aa 81       	ldd	r26, Y+2	; 0x02
    36d0:	b9 81       	ldd	r27, Y+1	; 0x01
    36d2:	ce 0f       	add	r28, r30
    36d4:	d1 1d       	adc	r29, r1
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	ed 01       	movw	r28, r26
    36e2:	08 95       	ret

000036e4 <strcmp>:
    36e4:	fb 01       	movw	r30, r22
    36e6:	dc 01       	movw	r26, r24
    36e8:	8d 91       	ld	r24, X+
    36ea:	01 90       	ld	r0, Z+
    36ec:	80 19       	sub	r24, r0
    36ee:	01 10       	cpse	r0, r1
    36f0:	d9 f3       	breq	.-10     	; 0x36e8 <strcmp+0x4>
    36f2:	99 0b       	sbc	r25, r25
    36f4:	08 95       	ret

000036f6 <itoa>:
    36f6:	fb 01       	movw	r30, r22
    36f8:	9f 01       	movw	r18, r30
    36fa:	e8 94       	clt
    36fc:	42 30       	cpi	r20, 0x02	; 2
    36fe:	c4 f0       	brlt	.+48     	; 0x3730 <itoa+0x3a>
    3700:	45 32       	cpi	r20, 0x25	; 37
    3702:	b4 f4       	brge	.+44     	; 0x3730 <itoa+0x3a>
    3704:	4a 30       	cpi	r20, 0x0A	; 10
    3706:	29 f4       	brne	.+10     	; 0x3712 <itoa+0x1c>
    3708:	97 fb       	bst	r25, 7
    370a:	1e f4       	brtc	.+6      	; 0x3712 <itoa+0x1c>
    370c:	90 95       	com	r25
    370e:	81 95       	neg	r24
    3710:	9f 4f       	sbci	r25, 0xFF	; 255
    3712:	64 2f       	mov	r22, r20
    3714:	77 27       	eor	r23, r23
    3716:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__udivmodhi4>
    371a:	80 5d       	subi	r24, 0xD0	; 208
    371c:	8a 33       	cpi	r24, 0x3A	; 58
    371e:	0c f0       	brlt	.+2      	; 0x3722 <itoa+0x2c>
    3720:	89 5d       	subi	r24, 0xD9	; 217
    3722:	81 93       	st	Z+, r24
    3724:	cb 01       	movw	r24, r22
    3726:	00 97       	sbiw	r24, 0x00	; 0
    3728:	a1 f7       	brne	.-24     	; 0x3712 <itoa+0x1c>
    372a:	16 f4       	brtc	.+4      	; 0x3730 <itoa+0x3a>
    372c:	5d e2       	ldi	r21, 0x2D	; 45
    372e:	51 93       	st	Z+, r21
    3730:	10 82       	st	Z, r1
    3732:	c9 01       	movw	r24, r18
    3734:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <strrev>

00003738 <strrev>:
    3738:	dc 01       	movw	r26, r24
    373a:	fc 01       	movw	r30, r24
    373c:	67 2f       	mov	r22, r23
    373e:	71 91       	ld	r23, Z+
    3740:	77 23       	and	r23, r23
    3742:	e1 f7       	brne	.-8      	; 0x373c <strrev+0x4>
    3744:	32 97       	sbiw	r30, 0x02	; 2
    3746:	04 c0       	rjmp	.+8      	; 0x3750 <strrev+0x18>
    3748:	7c 91       	ld	r23, X
    374a:	6d 93       	st	X+, r22
    374c:	70 83       	st	Z, r23
    374e:	62 91       	ld	r22, -Z
    3750:	ae 17       	cp	r26, r30
    3752:	bf 07       	cpc	r27, r31
    3754:	c8 f3       	brcs	.-14     	; 0x3748 <strrev+0x10>
    3756:	08 95       	ret

00003758 <__udivmodhi4>:
    3758:	aa 1b       	sub	r26, r26
    375a:	bb 1b       	sub	r27, r27
    375c:	51 e1       	ldi	r21, 0x11	; 17
    375e:	07 c0       	rjmp	.+14     	; 0x376e <__udivmodhi4_ep>

00003760 <__udivmodhi4_loop>:
    3760:	aa 1f       	adc	r26, r26
    3762:	bb 1f       	adc	r27, r27
    3764:	a6 17       	cp	r26, r22
    3766:	b7 07       	cpc	r27, r23
    3768:	10 f0       	brcs	.+4      	; 0x376e <__udivmodhi4_ep>
    376a:	a6 1b       	sub	r26, r22
    376c:	b7 0b       	sbc	r27, r23

0000376e <__udivmodhi4_ep>:
    376e:	88 1f       	adc	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	5a 95       	dec	r21
    3774:	a9 f7       	brne	.-22     	; 0x3760 <__udivmodhi4_loop>
    3776:	80 95       	com	r24
    3778:	90 95       	com	r25
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	08 95       	ret

00003780 <_exit>:
    3780:	f8 94       	cli

00003782 <__stop_program>:
    3782:	ff cf       	rjmp	.-2      	; 0x3782 <__stop_program>
